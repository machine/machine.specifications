<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JetBrains.Platform.dotCover.Shell</name>
    </assembly>
    <members>
        <member name="T:JetBrains.Build.AllAssemblies.AssemblyKind">
            <summary>
            Kind of <see cref="T:JetBrains.Build.AllAssemblies.InstalledAssemblyXml"/>s.
            </summary>
        </member>
        <member name="M:JetBrains.Build.AllAssemblies.AssemblyKind.AllInstallableKinds(JetBrains.Application.Install.Installer)">
            <summary>
            Gets all the assembly kinds that are shipped with the product.
            </summary>
        </member>
        <member name="M:JetBrains.Build.AllAssemblies.AssemblyKind.AllInstallableKinds(JetBrains.Build.AllAssemblies.AllAssembliesXml)">
            <summary>
            Gets all the assembly kinds that are shipped with the product.
            </summary>
        </member>
        <member name="M:JetBrains.Build.AllAssemblies.AssemblyKind.AllKinds(JetBrains.Build.AllAssemblies.AllAssembliesXml)">
            <summary>
            Gets all the assembly kinds.
            </summary>
        </member>
        <member name="M:JetBrains.Build.AllAssemblies.AssemblyKind.AllPlatformReferences(JetBrains.Build.AllAssemblies.AllAssembliesXml)">
            <summary>
            Gets the list of all kinds for platform references (for all the platform names).
            </summary>
        </member>
        <member name="M:JetBrains.Build.AllAssemblies.AssemblyKind.FindAssemblyFile(System.String,JetBrains.Application.Install.Installer.InstallerSourceFoldersResolver)">
            <summary>
            Gets the assembly file.
            </summary>
            <param name="sAssemblyName">Assembly name, as in AllAssembliesXml.</param>
            <param name="sourceFoldersResolver">Resolves the source root dirs in the project. Get from <see cref="T:JetBrains.Application.Install.Installer"/> or elsewhere.</param>
        </member>
        <member name="M:JetBrains.Build.AllAssemblies.AssemblyKind.GetAssembliesInConfiguration(JetBrains.Application.Install.Installer)">
            <summary>
            Returns all the assemblies that fit into the assembly configuration config and belong to the group of the given kind (product/platform binaries/references).
            </summary>
        </member>
        <member name="M:JetBrains.Build.AllAssemblies.AssemblyKind.GetAssembliesInConfiguration(JetBrains.Application.IApplicationDescriptor,System.Collections.Generic.IList{JetBrains.Application.AssemblyConfiguration})">
            <summary>
            Returns all the assemblies that fit into the assembly configuration config and belong to the group of the given kind (product/platform binaries/references).
            </summary>
        </member>
        <member name="M:JetBrains.Build.AllAssemblies.AssemblyKind.GetAssembliesInConfiguration(JetBrains.Application.IApplicationDescriptor,System.Collections.Generic.JetHashSet{System.String})">
            <summary>
            Returns all the assemblies that fit into the assembly configuration config and belong to the group of the given kind (product/platform binaries/references).
            </summary>
        </member>
        <member name="M:JetBrains.Build.AllAssemblies.AssemblyKind.ResolveFolder(JetBrains.Application.Install.Installer.InstallerSourceFoldersResolver)">
            <summary>
            Gets the folder where the assemblies of this kind reside.
            </summary>
        </member>
        <member name="M:JetBrains.Build.AllAssemblies.AssemblyKind.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Build.AllAssemblies.AssemblyKind.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Build.AllAssemblies.AssemblyKind.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Build.AllAssemblies.AssemblyKind.Equals(JetBrains.Build.AllAssemblies.AssemblyKind)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="T:JetBrains.Build.AllAssemblies.AssemblyKind.AssemblyKindConverter">
            <summary>
            Knows how to switch between <see cref="T:JetBrains.Build.AllAssemblies.AssemblyKind"/>s and <see cref="T:System.String"/>s.
            </summary>
        </member>
        <member name="T:JetBrains.Build.AllAssemblies.AssemblyKind.KindBase">
            <summary>
            Kind of <see cref="T:JetBrains.Build.AllAssemblies.InstalledAssemblyXml"/>s.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.IXmlReadable.ReadFromXml(System.Xml.XmlElement)">
            <summary>
            <para>This method is called on the component to populate it with default or loaded settings, unless the component implements <see cref="T:JetBrains.Application.Configuration.IXmlUpgradable"/> and returns <c>True</c> from its handler.</para>
            <para>The element is taken from the settings file, if available.</para>
            <para>If not, and there are settings files from the older versions, and the component does not implement <see cref="T:JetBrains.Application.Configuration.IXmlUpgradable"/>, this method is called with the old settings.</para>
            <para>Otherwise, this method is called with an empty element or a <c>Null</c> value.</para>
            <para>For the first time, this method is called right before component's init.</para>
            <para>The settings-reading protocol might be executed more than once thru the component lifetime.</para>
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:JetBrains.Application.ActivityTrackingNew.PermanentUserId.GetUniqueUserId">
            <summary>
            Gets permanent unique user Id. The Id is saved in Registry under HKCU\Software\JetBrains\Platform section. <br />
            The Id is used to idendify same user even after ReSharper (or another product) is reinstalled or downgraded.
            Please note that the Id is shared among all JetBrains applications intalled by the user.
            To make it sharable with Idea team it also resides in %appdata%\Roaming\JetBrains\PermanentUserId
            </summary>
        </member>
        <member name="T:JetBrains.Application.IProductNameAndVersion">
            <summary>
            The basic technical info of the product. That's all we need for discovering product-specific locations.
            </summary>
        </member>
        <member name="P:JetBrains.Application.IProductNameAndVersion.ProductName">
            <summary>
            <para>Gets the <b>technical</b> product name in the shortest form (no company, no version, no spaces, identifier-syntax-compatible).</para>
            <para>Don't use for UI display strings, see Remarks on <see cref="P:JetBrains.Application.IApplicationDescriptor.ProductDisplayName"/> for an explanation.</para>
            <para>See <see cref="T:JetBrains.Application.IApplicationDescriptor"/> for other forms of product name: <see cref="P:JetBrains.Application.IApplicationDescriptor.ProductDisplayName"/> and <see cref="P:JetBrains.Application.IApplicationDescriptor.ProductFullName"/>.</para>
            </summary>
            <remarks>See Remarks on <see cref="P:JetBrains.Application.IApplicationDescriptor.ProductDisplayName"/>.</remarks>
            <seealso cref="P:JetBrains.Application.IApplicationDescriptor.ProductDisplayName"/>
            <seealso cref="P:JetBrains.Application.IApplicationDescriptor.ProductFullName"/>
            <example>
            <code>“Receptor”</code>
            <code>“DotMemory”</code>
            </example>
        </member>
        <member name="P:JetBrains.Application.IProductNameAndVersion.ProductVersion">
            <summary>
            Gets the product full version.
            </summary>
        </member>
        <member name="T:JetBrains.Application.ProductNameAndVersion">
            <summary>
            Dummy implementation for supplying e.g. to settings locator when we do not have an actual product.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Env.ProductCanBeStartedResolution">
            <summary>
            The resolution part of the <see cref="T:JetBrains.Application.Env.ProductCanBeStartedVerdict"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Env.ProductCanBeStartedResolution.Affirmative">
            <summary>
            <para>Affirmative resolution: this handler doesn't object running the product.</para>
            <para>Next handlers will be asked if they also don't have any objections.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Env.ProductCanBeStartedResolution.NegativeTemporary">
            <summary>
            <para>Negative resolution: this handler prohibits the product from being run.</para>
            <para>This is a veto, i.e. next handlers will not be polled.</para>
            <para>“Temporary” means that the handler is committed to resolve to either affirmative or negative-permanent state somewhen soon. An example is shutting down the product to immediately restart it with another licensing options. A standalone product should not be shutting down with such an active resolution. For a VS-integrated product, this is the same as a permanent negative resolution.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Env.ProductCanBeStartedResolution.NegativePermanentGraceful">
            <summary>
            <para>Negative resolution: this handler prohibits the product from being run.</para>
            <para>This is a veto, i.e. next handlers will not be polled.</para>
            <para>“Permanent” means that a standalone product might shut down when it sees such a resolution. A VS-integrated product will just be deactivated.</para>
            <para>“Graceful” means this state is not unexpected. For example, closing the standalone application main window or suspending a VS-integrated product is a graceful shutdown.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Env.ProductCanBeStartedResolution.NegativePermanentByError">
            <summary>
            <para>Negative resolution: this handler prohibits the product from being run.</para>
            <para>This is a veto, i.e. next handlers will not be polled.</para>
            <para>“Permanent” means that a standalone product might shut down when it sees such a resolution. A VS-integrated product will just be deactivated.</para>
            <para>“ByError” means this state is reached due to some problem like a failed startup or an invalid product license.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.Env.ProductCanBeStartedVerdict">
            <summary>
            The verdict of a single <see cref="T:JetBrains.Application.Env.IProductCanBeStarted"/> handler.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Env.ProductCanBeStartedVerdict.Resolution">
            <summary>
            The resolution (to make a decision on product).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Env.ProductCanBeStartedVerdict.Comment">
            <summary>
            Comment on the resolution. Optional.
            Highly recommended with non-positive resolutions.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Env.ProductCanBeStartedVerdict.Affirmative(System.String)">
            <summary>
            <see cref="F:JetBrains.Application.Env.ProductCanBeStartedResolution.Affirmative"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.Env.ProductCanBeStartedVerdict.NegativeTemporary(System.String)">
            <summary>
            <see cref="F:JetBrains.Application.Env.ProductCanBeStartedResolution.NegativeTemporary"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Env.ProductCanBeStartedVerdict.NegativePermanentGraceful(System.String)">
            <summary>
            <see cref="F:JetBrains.Application.Env.ProductCanBeStartedResolution.NegativePermanentGraceful"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Env.ProductCanBeStartedVerdict.NegativePermanentByError(System.String)">
            <summary>
            <see cref="F:JetBrains.Application.Env.ProductCanBeStartedResolution.NegativePermanentByError"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Env.ProductCanBeStartedVerdictEx.IsAffirmative(JetBrains.Application.Env.ProductCanBeStartedVerdict)">
            <summary>
            Gets whether the resolution is affirmative. <c>Null</c> is also considered affirmative because it's the <see cref="T:JetBrains.Application.ComposeVerdictWithPriority"/> return value for all-affirmative.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Env.ProductCanBeStartedVerdictEx.ShouldStartShell(JetBrains.Application.Env.ProductCanBeStartedVerdict)">
            <summary>
            Gets whether the product shell should be started.
            </summary>
            <remarks><c>Null</c> is also considered affirmative because it's the <see cref="T:JetBrains.Application.ComposeVerdictWithPriority"/> return value for all-affirmative.</remarks>
        </member>
        <member name="M:JetBrains.Application.Env.ProductCanBeStartedVerdictEx.ShouldBeRunningStandaloneApplicationHost(JetBrains.Application.Env.ProductCanBeStartedVerdict)">
            <summary>
            Gets whether the standalone application host (NOTE: this is not the product shell with components, but the host) should be still running.
            </summary>
            <remarks><c>Null</c> is also considered affirmative because it's the <see cref="T:JetBrains.Application.ComposeVerdictWithPriority"/> return value for all-affirmative.</remarks>
        </member>
        <member name="M:JetBrains.Application.Env.ProductCanBeStartedVerdictEx.IsWithErrors(JetBrains.Application.Env.ProductCanBeStartedVerdict)">
            <summary>
            Whether the overall application run is considered as failed.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Env.ProductCanBeStartedVerdictEx.IsNegativePermanent(JetBrains.Application.Env.ProductCanBeStartedVerdict)">
            <summary>
            Whether it's one of the permanent negative resolutions.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ChangeManagerEx.PushRegisterChangeProvider(JetBrains.Application.ChangeManager,JetBrains.Application.IChangeProvider)">
            <summary>
            Registers/unregisters change provider in the dispatching scheme.
            </summary>
        </member>
        <member name="T:JetBrains.Application.CommandProcessing.ICommandProcessor">
            <summary>
            Command processor that performs undoable actions.
            </summary>
        </member>
        <member name="P:JetBrains.Application.CommandProcessing.ICommandProcessor.IsExecutingCommand">
            <summary>
            Gets whether the command processor is executing at least one command.
            </summary>
        </member>
        <member name="P:JetBrains.Application.CommandProcessing.ICommandProcessor.CurrentCommand">
            <summary>
            The outermost command of the command processor. Opening nested commands does not affect this property.
            </summary>
        </member>
        <member name="P:JetBrains.Application.CommandProcessing.ICommandProcessor.CurrentBatchChangeName">
            <summary>
            If in a batch change (<see cref="M:JetBrains.Application.CommandProcessing.ICommandProcessor.BeginBatchTextChange(JetBrains.DataFlow.Lifetime,System.String)"/>), bears the batch change name. Otherwise, <c>Null</c>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.CommandProcessing.StandaloneCommandProcessor.myCurrentBatchChangeName">
            <summary>
            If in a batch change (<see cref="M:JetBrains.Application.CommandProcessing.ICommandProcessor.BeginBatchTextChange(JetBrains.DataFlow.Lifetime,System.String)"/>), bears the batch change name. Otherwise, <c>Null</c>.
            </summary>
        </member>
        <member name="P:JetBrains.Application.CommandProcessing.StandaloneCommandProcessor.JetBrains#Application#CommandProcessing#ICommandProcessor#CurrentBatchChangeName">
            <summary>
            If in a batch change (<see cref="M:JetBrains.Application.CommandProcessing.ICommandProcessor.BeginBatchTextChange(JetBrains.DataFlow.Lifetime,System.String)"/>), bears the batch change name. Otherwise, <c>Null</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Env.Components.AnyProductSettingsLocation">
            <summary>
            Component for providing environment-defined settings location of products (VS, non-VS, etc).
            </summary>
        </member>
        <member name="M:JetBrains.Application.Env.Components.AnyProductSettingsLocation.GetSettingsPathSuffix(JetBrains.Application.Env.Components.ProductSettingsLocationFlag,JetBrains.Application.IProductNameAndVersion)">
            <summary>
            Gets the suffix that forms the <see cref="M:JetBrains.Application.Env.Components.AnyProductSettingsLocation.GetSettingsRegistryKey(JetBrains.Application.Env.Components.ProductSettingsLocationFlag,JetBrains.Application.IProductNameAndVersion)"/>, <see cref="M:JetBrains.Application.Env.Components.AnyProductSettingsLocation.GetUserSettingsDir(System.Environment.SpecialFolder,JetBrains.Application.Env.Components.ProductSettingsLocationFlag,JetBrains.Application.IProductNameAndVersion)"/>.
            The template must not include location-specific parts (ie “Software” for registry or “AppData” for folder), as they should be concatenated by consumers.
            There should be no leading or trailing slashes.
            </summary>
            <param name="flag">See values.</param>
            <param name="product">Defines the product in case your <paramref name="flag"/> value requires product name or version.</param>
        </member>
        <member name="M:JetBrains.Application.Env.Components.AnyProductSettingsLocation.GetSettingsRegistryKey(JetBrains.Application.Env.Components.ProductSettingsLocationFlag,JetBrains.Application.IProductNameAndVersion)">
            <summary>
            Gets the path to the product's Registry key.
            </summary>
            <param name="flag">See values.</param>
            <param name="product">Defines the product in case your <paramref name="flag"/> value requires product name or version.</param>
        </member>
        <member name="F:JetBrains.Application.Env.Components.AnyProductSettingsLocation.ProductRegistryKeyPrefix_Software">
            <summary>
            Registry prefix which forms the Registry key when combined with the <see cref="M:JetBrains.Application.Env.Components.AnyProductSettingsLocation.GetSettingsPathSuffix(System.String,System.Version,System.Collections.Generic.IList{JetBrains.Util.JetTuple{System.String,System.String}})"/> suffix.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Env.Components.AnyProductSettingsLocation.GetUserSettingsDir(System.Environment.SpecialFolder,JetBrains.Application.Env.Components.ProductSettingsLocationFlag,JetBrains.Application.IProductNameAndVersion)">
            <summary>
            Gets the location of the settings folders used by the product (product-specific or not).
            Creates the directory if missing.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Env.Components.AnyProductSettingsLocation.GetSettingsPathSuffix(System.String,System.Version,System.Collections.Generic.IList{JetBrains.Util.JetTuple{System.String,System.String}})">
            <summary>
            The main implementation method for getting the settings directories for all products, per-product, product-specific, etc.
            </summary>
            <param name="nameProduct">Product short name, if the settings should be per-product. <c>NULL</c> or <c>""</c> for all-product settings location.</param>
            <param name="version">
            <para>If non-<c>NULL</c> and <paramref name="nameProduct"/> is specified, produces version-specific product settings.</para>
            <para>If non-<c>NULL</c> and <paramref name="nameProduct"/> is not specified, produces versioned all-products settings location.</para>
            <para>If <c>NULL</c>, produces version-invariant location (either all-products or product-specific).</para>
            </param>
            <param name="additionalParameters">
            <para>Allows to further differentiate locations by product or environment flavors, for example Visual Studio hives, as used to be up to R# 5.</para>
            <para>Each pair in the list is the name and the value of the additional parameter. Visual Studio 9.0 specific folder for the main Visual Studio hive has it as <c>("vs", "9.0")</c>.</para>
            <para>A subfolder will be created for every additional parameter, in the exact order as they're given here.</para>
            <para><c>NULL</c> or an empty list means there're no additional parameters.</para>
            <para>In this class, the default value for additional parameters is provided by the <see cref="M:JetBrains.Application.Env.Components.AnyProductSettingsLocation.GetSettingsPathSuffixAdditionalParameters"/> function (overridden by specific environments, like Visual Studio).</para>
            </param>
            <returns>Relative path to the directory (might not exist yet) from <c>%APPDATA%</c>, Registry <c>Software</c> key, etc.</returns>
            <remarks>
            <para>General rules for forming the suffix:</para>
            <para>• Folder with the company name. Always present.</para>
            <para>• Folder for the product, or the special “All Products” folder name (<see cref="F:JetBrains.Application.Env.Components.AnyProductSettingsLocation.AllProductsFolderName"/>) if getting an all-products location.</para>
            <para>• Folder for the version (as “v”{Major}{Minor}), or the special v∀ string (<see cref="F:JetBrains.Application.Env.Components.AnyProductSettingsLocation.AnyVersionString"/>) if getting an all-versions location.</para>
            <para>• One folder per each additional parameter (parameter name and value concatenated).</para>
            <para>The overall scheme looks like this: <c>{CompanyName}/{ProductName}/v{Version}[/vs{VsVersion}{VsRootSuffix}]</c>.</para>
            </remarks>
        </member>
        <member name="M:JetBrains.Application.Env.Components.AnyProductSettingsLocation.GetSettingsPathSuffixAdditionalParameters">
            <summary>
            Gets the default value for the “additional parameters” parameter of the <see cref="M:JetBrains.Application.Env.Components.AnyProductSettingsLocation.GetSettingsPathSuffix(System.String,System.Version,System.Collections.Generic.IList{JetBrains.Util.JetTuple{System.String,System.String}})"/> method for the current environment.
            The base implementation returns <c>NULL</c>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Env.Components.AnyProductSettingsLocation.AllProductsFolderName">
            <summary>
            When making an all-products folder location (e.g. with <see cref="M:JetBrains.Application.Env.Components.AnyProductSettingsLocation.GetSettingsPathSuffix(System.String,System.Version,System.Collections.Generic.IList{JetBrains.Util.JetTuple{System.String,System.String}})"/>), used in place of the product name.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Env.Components.AnyProductSettingsLocation.AnyVersionString">
            <summary>
            Used in place of the version-named folder when getting a version-invariant location (e.g. with <see cref="M:JetBrains.Application.Env.Components.AnyProductSettingsLocation.GetSettingsPathSuffix(System.String,System.Version,System.Collections.Generic.IList{JetBrains.Util.JetTuple{System.String,System.String}})"/>).
            </summary>
        </member>
        <member name="M:JetBrains.Application.Env.Components.AnyProductSettingsLocation.GetLegacyUserSettingsRoamingLegacyDirs(JetBrains.Application.IProductNameAndVersion)">
            <summary>
            Gets the list of legacy user-settings dirs (coming from previous product version), actually found on the local system, sorted in descending priority order.
            That means something like R# v2.5, which was in use even before platform v5 and compatibles, so it's double-legacy by now.
            The second part of the tuple is the product version of the legacy settings file.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Env.Components.AnyProductSettingsLocation.GetLegacyUserSettingsXmlPath(JetBrains.Application.IProductNameAndVersion)">
            <summary>
            Full path to the User Settings (<see cref="F:JetBrains.Application.Configuration.XmlExternalizationScope.UserSettings"/>) XML file we save. Platform v5 and below.
            Overridden in some of the DotTrace subproducts.
            </summary>
            <param name="product"></param>
        </member>
        <member name="M:JetBrains.Application.Env.Components.AnyProductSettingsLocation.GetLegacyWorkspaceXmlPath(JetBrains.Application.IProductNameAndVersion)">
            <summary>
            Full path to the Workspace Settings (<see cref="F:JetBrains.Application.Configuration.XmlExternalizationScope.WorkspaceSettings"/>) XML file we save.
            Overridden in some of the DotTrace subproducts.
            </summary>
            <param name="product"></param>
        </member>
        <member name="M:JetBrains.Application.Env.Components.AnyProductSettingsLocation.GetInstallDir(JetBrains.Application.IApplicationDescriptor)">
            <summary>
            Gets the directory in which the product assemblies are located.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Env.Components.ProductSettingsLocationFlag.ThisProductThisVersionThisEnvironment">
            <summary>
            As it used to be in R# and all other products on platform version 5 and before that.
            Specific to the product name, product version, and environment flavors (like VS hive).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Env.Components.ProductSettingsLocationFlag.ThisProductThisVersionAnyEnvironment">
            <summary>
            Almost as it used to be in R# and all other products on platform version 5 and before that, but does not differentiate between VS hives.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Env.Components.ProductSettingsLocationFlag.AsInPlatform5">
            <summary>
            As it used to be in R# and all other products on platform version 5 and before that.
            Specific to the product name, product version, and environment flavors (like VS hive).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Env.Components.ProductSettingsLocationFlag.ThisProductAnyVersion">
            <summary>
            Common location for all versions (and VSes) of this product.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Env.Components.ProductSettingsLocationFlag.AnyProductAnyVersion">
            <summary>
            Common location for all products of all versions (using this settings locations algorithm).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Env.Components.ProductSettingsLocationFlag.AnyProductPlatformVersion">
            <summary>
            Common location for all products, but versioned by the platform version.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Communication.InternetSettings">
            <summary>
            A settings node under <see cref="T:JetBrains.Application.Settings.EnvironmentSettings"/>. Root for internet-related settings.
            </summary>
        </member>
        <member name="T:JetBrains.Application.ComposeVerdictWithPriority">
            <summary>
            Has a list of tellers ordered by priority. Polls them for a verdict (live) until one of them returns a negative value. Determines whether all of the tellers have a positive verdict, or which is the one and only negative verdict.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ComposeVerdictWithPriority.Create``1(JetBrains.DataFlow.Lifetime,JetBrains.DataFlow.CollectionEvents{JetBrains.Application.ComposeVerdictWithPriority.VerdictTeller{``0}})">
            <summary>
            Takes a list of tellers ordered by priority. Polls them for a verdict (live) until one of them returns a negative value. Determines whether all of the tellers have a positive verdict, or which is the one and only negative verdict.
            Returns a property which is either <c>Null</c> when there're no tellers with a negative verdict, or contains the one and only negative verdict (remaining tellers are not polled when a negative verdict is encountered).
            </summary>
        </member>
        <member name="M:JetBrains.Application.ComposeVerdictWithPriority.UpdateActiveTellers``1(JetBrains.DataFlow.Lifetime,System.Collections.Generic.List{JetBrains.Application.ComposeVerdictWithPriority.ActiveTeller{``0}},JetBrains.DataFlow.IProperty{``0})">
            <summary>
            Apply invariants to the active state of the tellers, then update the property.
            </summary>
            <param name="lifetimeComponent"></param>
            <param name="tellers"></param>
            <param name="propComposite"></param>
        </member>
        <member name="T:JetBrains.Application.Env.Components.EnvironmentProductConfigurationsProvider">
            <summary>
            The configuration in which the environment is running also applies to the product, expose it.
            </summary>
        </member>
        <member name="T:JetBrains.Application.IProductCommandLine">
            <summary>
            Command line of the product. Usually created over the host command line, whose keys are then stripped of the prefix identifying the product.
            </summary>
        </member>
        <member name="P:JetBrains.Application.ICommandLine.Keys">
            <summary>
            Array of defined keys: “/Key[=Value]”.
            </summary> 
        </member>
        <member name="P:JetBrains.Application.ICommandLine.NonKeyedParameters">
            <summary>
            Strings that do not start with “/” and do not belong to the previous string with a “/”.
            </summary> 
        </member>
        <member name="P:JetBrains.Application.ICommandLine.Parameters">
            <summary>
            <para>Gets all of the command line parameters, <see cref="P:JetBrains.Application.ICommandLine.Keys"/> and <see cref="P:JetBrains.Application.ICommandLine.NonKeyedParameters"/> together, in order of appearance.</para>
            <para>If a standalone application imeplements the singleton mode, command line parameters from attempted new instances get added to this list of the original instance.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.IProductCommandLine.MakeFullCommandLineKeyName(System.String)">
            <summary>
            <para>Gets the string to be passed on the command line to this host so that the command line of this product would have the key named <paramref name="sShortKeyName"/> defined.</para>
            <para>If this product is not the default product of the host, the product name will be added to the short key name (to distinguish between keys addressed to different products). The environment (for example, Visual Studio non-default hive) might also add decorations to the key name.</para>
            <para>For example, let's consider a key with short name of “<c>SelfDestruction</c>” that belongs to the product named “<c>Kalabash</c>”, currently running in a non-default Visual Studio hive with root suffix “<c>Exp</c>”. This method is given the short key name “<c>Kalabash</c>”, and yields the full ready-for-VS-command-line “<c>Kalabash.SelfDestruction.Exp</c>” key name.</para>
            <para>In non-VS or VS default hive, there is no root suffix. If the product is also the default product of the host (not applicable to VS), the resulting full name will just be the short key name.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.IProductCommandLine.KeyPrefix">
            <summary>
            Gets the prefix of the command line keys in the host command line.
            To parse the whole host command line into the command lines for each of the products, they're filtered by the prefix (usually, <c>"ProductName."</c>), and the prefix is removed from keys.
            </summary>
        </member>
        <member name="P:JetBrains.Application.IProductCommandLine.IsKeyPrefixOptional">
            <summary>
            If there's a default product in the host, its command line keys could optionally be specified without the <see cref="P:JetBrains.Application.IProductCommandLine.KeyPrefix"/>.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Env.IJetHost">
            <summary>
            Represents the environment-specific host that can load our products and make them running.
            For example, there's a VS-host (single per products that share the same shell, ideally one per VS if versions are close), Tests host, etc.
            The host creates the shared environment, into which products can be loaded (by advertising <see cref="T:JetBrains.Application.IApplicationDescriptor"/> to its known products list).
            </summary>
        </member>
        <member name="P:JetBrains.Application.Env.IJetHost.Environment">
            <summary>
            The environment, which creates and hosts environment-level components.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Env.Components.InternalModeProductConfigurationsProvider">
            <summary>
            Provides environment config for internal/public modes.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Env.Components.InternalModeProductConfigurationsProvider.OverrideInternalModeOnNextStart">
            <summary>
            If assigned by somebody, explicitly specifies the internal mode for next shell start, regardless of the cmdline.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Env.Components.InternalModeProductConfigurationsProvider.IsProductInternalModeAware">
            <summary>
            Check whether product supports public/internal modes.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Env.IProductCanBeStarted">
            <summary>
            <para>A handler which determines whether the particular product is allowed to be run.</para>
            <para>There are standard handlers for: license check, suspended state, timebomb, etc.</para>
            <para>Of all the registered handlers, they get asked in order of priority until any of the handler gives a negative reply, which yields a negative result and stops polling other handlers. Note that the reply is not a scalar but a live value which can later change. If all of the handlers give a positive reply, the product will be started.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.Env.IProductCanBeStarted.CreateCanBeStarted(JetBrains.DataFlow.Lifetime)">
            <summary>
            <para>This method is called on your handler when the poll sequence reaches it (i.e. when all of the higher-priority handlers give an affirmative resolution).</para>
            <para>The <paramref name="lifetime"/> is the duration until polling your handler goes out of scope (i.e. either the whole setup is terminated or one of the higher-priority handlers changes its resolution to something non-affirmative). After the <paramref name="lifetime"/> is terminated, your resolution in the return value will be considered no more. If the poll sequence reaches your handler again, you'll get one more call with a new lifetime.</para>
            <para>The return value is your live verdict which you can change at any time within the <paramref name="lifetime"/>.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.Env.IProductCanBeStarted.Priority">
            <summary>
            <para>The priority of your handler. See <see cref="T:JetBrains.Application.Env.ProductCanBeStartedPriorityThresholds"/> for standard values.</para>
            <para>The lower the value, the sooner your handler gets asked.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.Env.JetEnvironment">
            <summary>
            The instance of the application environment.
            The host application (VS, standalone exe, etc) creates one environment, then loads the products into it.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Env.JetEnvironment.Configuration">
            <summary>
            Configuration of this environment.
            Defined by the host when the environment is created.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Env.JetEnvironment.Products">
            <summary>
            Publish here the products you'd like to be loaded in this environment.
            Per-product components of the environment are created immediately as products appear in here. Shell components for this product are created only when the product is allowed to run (<see cref="T:JetBrains.Application.Env.IProductCanBeStarted"/> handlers for the product are all <c>True</c>).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Env.JetEnvironment.FullPartCatalogSet">
            <summary>
            The complete catalog set, as collected from the <see cref="F:JetBrains.Application.Env.JetEnvironment.Products"/> currently known, plus their plugins and any parts introduced later. This is the origin of all the catalogsets in the component containers. It's not filtered yet, even by the environment.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Env.JetEnvironment.EnvironmentPartCatalogSet">
            <summary>
            Catalog set for the environment components, as narrowed down from <see cref="F:JetBrains.Application.Env.JetEnvironment.FullPartCatalogSet"/> by applying the environment configuration filter to the parts. Do not modify.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Env.JetEnvironment.HasDefaultProduct">
            <summary>
            In standalone hosts, the host could be owned by one of the products. Its command line keys could be specified without a prefix, the main window is branded with that product, its splash screen is shown, etc. In such a case, this should be set to <c>True</c>. Then the first product in the <see cref="F:JetBrains.Application.Env.JetEnvironment.Products"/> list is considered to be the default product. In Visual Studio hosts, this is <c>False</c>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Env.JetEnvironment.#ctor(JetBrains.DataFlow.Lifetime,JetBrains.Application.Env.JetEnvironment.JetEnvironmentConfiguration,JetBrains.Application.Components.IComponentContainer)">
            <summary>
            Creates the environment and defines its lifetime.
            </summary>
            <param name="lifetime">The lifetime of the environment. Must be guarded: the environment must be created and terminated under <see cref="T:JetBrains.Threading.ReentrancyGuard"/>.</param>
            <param name="configuration">Configuration for loading the Environment components.</param>
            <param name="containerHostInfo">Add any additional information on the host here: VS Service Provider, main window, command line, etc. Environment components and product components will be chained into this container and will be getting this information.</param>
        </member>
        <member name="P:JetBrains.Application.Env.JetEnvironment.Container">
            <summary>
            Gets the environment component container (when it gets fully composed).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Env.ProductCanBeStartedPriorityThresholds.EnvironmentReady">
            <summary>
            On this level, should check if the env is fully initialized for starting the product (and calling other checkers).
            Eg in VS this is when VS' Shell gets into the non-zombied state.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Env.ProductCanBeStartedPriorityThresholds.UserSuspend">
            <summary>
            On this level, should check for any user-induced deactivations of the product.
            Eg in VS it's when user suspends a product.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Env.ProductCanBeStartedPriorityThresholds.Licensing">
            <summary>
            On this level, check for a license.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Env.ProductConfigurationsEx.IsInternalMode(JetBrains.Application.Env.RunsProducts.ProductConfigurations)">
            <summary>
            Gets whether Internal mode is present among product configurations.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Env.ProductConfigurationsEx.GetInternalMode(JetBrains.Application.Env.RunsProducts.ProductConfigurations)">
            <summary>
            Gets whether Internal mode is present among product configurations.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Env.ProductConfigurationsEx.GuessProgramConfiguration(JetBrains.Application.Env.RunsProducts.ProductConfigurations)">
            <summary>
            Guesses legacy ProgramConfigurations from assembly configuration. To be dropped asap together with program configurations themselves.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Env.Components.ProductSettingsLocation">
            <summary>
            Component for providing environment-defined settings location of products (VS, non-VS, etc).
            Specializes <see cref="T:JetBrains.Application.Env.Components.AnyProductSettingsLocation"/> with a specific product.
            If you'd like to override the behavior in your product, you should rather override the utility class <see cref="T:JetBrains.Application.Env.Components.AnyProductSettingsLocation"/>, because it provides impl for this class and some more.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Env.Components.ProductSettingsLocation.GetUserSettingsNonRoamingDir(JetBrains.Application.Env.Components.ProductSettingsLocationFlag)">
            <summary>
            Gets the full path to the computer-local per-user folder that stores the product settings.
            This folder should be used for storing large or easily-re-generated files, like type index caches.
            </summary>
            <param name="flag"></param>
        </member>
        <member name="M:JetBrains.Application.Env.Components.ProductSettingsLocation.GetUserSettingsRoamingDir(JetBrains.Application.Env.Components.ProductSettingsLocationFlag)">
            <summary>
            Gets the full path to the network-roaming per-user folder that stores the product settings.
            This folder should be used for storing small and non-re-generatable files only.
            </summary>
            <param name="flag"></param>
        </member>
        <member name="M:JetBrains.Application.Env.Components.ProductSettingsLocation.GetProductRegistryKey(JetBrains.Application.Env.Components.ProductSettingsLocationFlag)">
            <summary>
            Gets the path to the product's Registry key.
            </summary>
            <param name="flag"></param>
        </member>
        <member name="P:JetBrains.Application.Env.Components.ProductSettingsLocation.InstallDir">
            <summary>
            Gets the directory in which the product assemblies are located.
            </summary>
        </member>
        <member name="T:JetBrains.Application.ComponentModel.LoggerComponent">
            <summary>
            Default implementation of <see cref="T:JetBrains.Util.ILogger"/> in this component container which dumps into the static logger.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Components.ProgramConfigurations">
            <summary>
            It is preferrable that you avoid using <see cref="T:JetBrains.Application.Components.ProgramConfigurations"/> wherever possible. Place your components in DLLs so that the <see cref="T:JetBrains.Application.AssemblyConfiguration"/> controls the presence of your component by either loading an assembly or omitting it. For example, a Test implementation should be placed in a tests-only assembly.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Components.ProgramConfigurations.NONE">
            <summary>
            It is preferrable that you avoid using <see cref="T:JetBrains.Application.Components.ProgramConfigurations"/> wherever possible. Place your components in DLLs so that the <see cref="T:JetBrains.Application.AssemblyConfiguration"/> controls the presence of your component by either loading an assembly or omitting it. For example, a Test implementation should be placed in a tests-only assembly.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Components.ProgramConfigurations.STANDALONE">
            <summary>
            It is preferrable that you avoid using <see cref="T:JetBrains.Application.Components.ProgramConfigurations"/> wherever possible. Place your components in DLLs so that the <see cref="T:JetBrains.Application.AssemblyConfiguration"/> controls the presence of your component by either loading an assembly or omitting it. For example, a Test implementation should be placed in a tests-only assembly.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Components.ProgramConfigurations.TEST">
            <summary>
            It is preferrable that you avoid using <see cref="T:JetBrains.Application.Components.ProgramConfigurations"/> wherever possible. Place your components in DLLs so that the <see cref="T:JetBrains.Application.AssemblyConfiguration"/> controls the presence of your component by either loading an assembly or omitting it. For example, a Test implementation should be placed in a tests-only assembly.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Components.ProgramConfigurations.VS_ADDIN">
            <summary>
            It is preferrable that you avoid using <see cref="T:JetBrains.Application.Components.ProgramConfigurations"/> wherever possible. Place your components in DLLs so that the <see cref="T:JetBrains.Application.AssemblyConfiguration"/> controls the presence of your component by either loading an assembly or omitting it. For example, a Test implementation should be placed in a tests-only assembly.
            </summary>
            
        </member>
        <member name="F:JetBrains.Application.Components.ProgramConfigurations.COMMAND_LINE">
            <summary>
            It is preferrable that you avoid using <see cref="T:JetBrains.Application.Components.ProgramConfigurations"/> wherever possible. Place your components in DLLs so that the <see cref="T:JetBrains.Application.AssemblyConfiguration"/> controls the presence of your component by either loading an assembly or omitting it. For example, a Test implementation should be placed in a tests-only assembly.
            </summary>
            
        </member>
        <member name="F:JetBrains.Application.Components.ProgramConfigurations.ALL">
            <summary>
            It is preferrable that you avoid using <see cref="T:JetBrains.Application.Components.ProgramConfigurations"/> wherever possible. Place your components in DLLs so that the <see cref="T:JetBrains.Application.AssemblyConfiguration"/> controls the presence of your component by either loading an assembly or omitting it. For example, a Test implementation should be placed in a tests-only assembly.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Env.ReportsProductsAllowedToRun">
            <summary>
            For each given product, monitors its <see cref="T:JetBrains.Application.Env.IProductCanBeStarted"/> validators, and reports to <see cref="T:JetBrains.Application.Env.RunsProducts"/> when the product can be started.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Env.ReportsProductsAllowedToRun.Product">
            <summary>
            The product for which this component is calculating the Can-Run status.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Env.ReportsProductsAllowedToRun.IsProductAllowedToRun">
            <summary>
            Whether the <see cref="F:JetBrains.Application.Env.ReportsProductsAllowedToRun.Product"/> is allowed to run right now (<c>True</c> means it can be started or continue running; <c>False</c> means it cannot be started or has to be shut down if already running).
            </summary>
        </member>
        <member name="M:JetBrains.Application.Env.ReportsProductsAllowedToRun.Init_ComposeProperty(JetBrains.DataFlow.Lifetime,JetBrains.DataFlow.ICollectionEvents{JetBrains.Application.Env.IProductCanBeStarted},JetBrains.Threading.IThreading)">
            <summary>
            Composes the state of all the <see cref="T:JetBrains.Application.Env.IProductCanBeStarted"/>, by priority.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Env.Components.ReportUnhandledExceptions">
            <summary>
            Catches as many unhandled exceptions as possible, reports them, and prevents them from crashing the whole environment.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Env.RunsProducts">
            <summary>
            All-products component.
            Watches the list of products allowed to run (supplied by per-product components <see cref="T:JetBrains.Application.Env.ReportsProductsAllowedToRun"/>).
            When there're any, spawns the shared environment, and then individual products, by creating the corresponding components.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Env.RunsProducts.ProductsAllowedToRun">
            <summary>
            The list of products currently allowed to run. A subset of <see cref="F:JetBrains.Application.Env.JetEnvironment.Products"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Env.RunsProducts.Init_CollectProductsAllowedToRun(JetBrains.DataFlow.Lifetime,JetBrains.DataFlow.CollectionEvents{JetBrains.Application.Env.ReportsProductsAllowedToRun},JetBrains.Threading.IThreading,System.Collections.Generic.ICollection{JetBrains.Application.IApplicationDescriptor})">
            <summary>
            Queries <see cref="T:JetBrains.Application.Env.ReportsProductsAllowedToRun"/> to fill the list of products allowed to run.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Env.RunsProducts.WithRWLockedLifetime(JetBrains.DataFlow.Lifetime,JetBrains.Application.IShellLocks,System.Action{JetBrains.DataFlow.Lifetime})">
            <summary>
            Opens a lifetime inside the given one which will be terminated under an RW lock. <paramref name="FInRWLockedLifetime"/> is called to fill the lifetime, under the RW lock also.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Env.RunsProducts.Init_RunWhenAllowed(JetBrains.DataFlow.Lifetime,JetBrains.Application.IShellLocks,System.Collections.Generic.IEnumerable{JetBrains.Application.Env.IProductConfigurationsProvider},JetBrains.Application.Env.JetEnvironment,JetBrains.DataFlow.ICollectionEvents{JetBrains.Application.IApplicationDescriptor},JetBrains.DataFlow.DictionaryEvents{JetBrains.Application.IApplicationDescriptor,JetBrains.Application.Components.IComponentContainer},JetBrains.DataFlow.DictionaryEvents{JetBrains.Application.IApplicationDescriptor,JetBrains.Application.Components.IComponentContainer})">
            <summary>
            Starts each product getting into the alloweds list, stops when leaving the list.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:JetBrains.Application.Env.RunsProducts.RunProduct(JetBrains.DataFlow.Lifetime,JetBrains.Application.IApplicationDescriptor,System.Collections.Generic.IEnumerable{JetBrains.Application.Env.IProductConfigurationsProvider},JetBrains.Application.Env.JetEnvironment,JetBrains.DataFlow.IDictionaryEvents{JetBrains.Application.IApplicationDescriptor,JetBrains.Application.Components.IComponentContainer},JetBrains.DataFlow.IDictionaryEvents{JetBrains.Application.IApplicationDescriptor,JetBrains.Application.Components.IComponentContainer})" -->
        <member name="T:JetBrains.Application.Env.RunsProducts.ProductConfigurations">
            <summary>
            Gives out the configurations the product is running in.
            Published as a product-specific component on the Shell-level.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Env.RunsProducts.ProductPartsCatalogSet">
            <summary>
            Gives out the product's <see cref="T:JetBrains.Application.Parts.PartsCatalogueSet"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ShellComponentAttribute.#ctor(JetBrains.Application.Sharing,JetBrains.Application.Lifecycle,JetBrains.Application.Creation,JetBrains.Application.Access)">
            <summary>
            Note: all of the params are not used yet, but should be set up on all newly-created components to later enable deferred/lazy loading.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Access.None">
            <summary>
            Worker component.
            Importing to other components not supported.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Access.PrimaryThread">
            <summary>
            Can be retrieved on the primary thread only.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Access.AnyThread">
            <summary>
            Can be retrieved on any thread.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Creation.PrimaryThread">
            <summary>
            Must be created on primary thread only.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Creation.AnyThread">
            <summary>
            Can be created on any thread (demand/deferred).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Lifecycle.Container">
            <summary>
            Created ASAP (when composing container), destroyed when destroying container.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Lifecycle.DemandReclaimable">
            <summary>
            Created on-demand, could be reclaimed and re-created.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Lifecycle.OneCall">
            <summary>
            Created when someone needs it, can be destroyed right after use.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Lifecycle.Demand">
            <summary>
            Created on-demand, destroyed ALAP when destroying container.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Lifecycle.Deferred">
            <summary>
            Created automatically (or on demand), but a bit later, to save CPU on component startup; destroyed when destroying container. 
            Access threading policy must be same or narrower as creation threading policy.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Sharing.Common">
            <summary>
            One component for all products.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Sharing.Product">
            <summary>
            A separate instance per each product.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Env.Components.SuspendResume">
            <summary>
            Manages Suspend/Resume functionality for the product.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Env.Components.SuspendResume.IsSuspended">
            <summary>
            Gets whether the product is currently in the suspended state.
            If you change the property value, or call one of the appropriate methods on this class, the product will be suspended or resumed.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Env.Components.SuspendResume.Init_Registry(JetBrains.DataFlow.Lifetime,JetBrains.Application.Env.Components.ProductSettingsLocation)">
            <summary>
            Supports persisting the suspended state in the Registry.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Env.Components.SuspendResume.Init_CommandLine(JetBrains.Application.IProductCommandLine)">
            <summary>
            Applies the command line key values to <see cref="F:JetBrains.Application.Env.Components.SuspendResume.IsSuspended"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Env.Components.SuspendResume.CmdLineResume">
            <summary>
            Causes the package to start in the resumed stage.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Env.Components.SuspendResume.CmdLineSuspend">
            <summary>
            Causes the package to start in the suspended stage.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Env.Components.SuspendResumeProductCanBeStarted">
            <summary>
            Allows the product to start only if it's not suspended.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Configuration.ISaveSettings">
            <summary>
            An interface for a component that has some settings and they should be saved whenever all of the application settings are being saved.
            // TODO: rework when we have a mature settings model.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.ISaveSettings.LoadSettings">
            <summary>
            <para>Tells the component container to reload the settings from the persistent media, deserialize them from the bag, and apply them to the components.</para>
            <para>If a particular component has not been initialized yet, it will be called for <see cref="!:IXmlExternalizable.ReadFromXml"/> / <see cref="M:JetBrains.Application.Configuration.IXmlUpgradable.UpgradeFromXml(System.Xml.XmlElement,System.Version)"/> before its <see cref="!:IComponent.Init"/>. Otherwise, those xml-related methods will be called on it for the second and so on time.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.ISaveSettings.SaveSettings">
            <summary>
            <para>Tells the component container that it's about time to query the components of their settings, serialize them to the bag, and write that to the persistent media.</para>
            <para>You must make sure this method is called on component containers in the end of the session. The component container will never save settings on its own.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.Configuration.IXmlConfigurable">
            <summary>
            The interface which is used to mark components as requiring initialization from configuration file which ships with the product. 
            Used for components which have complex initial configuration which is better to keep in external files rather than in code.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.IXmlConfigurable.ConfigureFromXml(System.Xml.XmlElement)">
            <summary>
            Called on the component by the component container before its <see cref="!:IComponent.Init"/> and <see cref="!:IXmlExternalizable.ReadFromXml"/> to load the XML Configuration from the resource in the component implementation assembly, the name of the resource specified in the <see cref="T:JetBrains.Application.Configuration.XmlConfigurableAttribute"/> on the component implementation.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.IXmlWritable.WriteToXml(System.Xml.XmlElement)">
            <summary>
            Called when the component should serialize its settings into the XML presentation, for saving into the settings file.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Configuration.IXmlRegistrable">
            <summary>
            Interface for classes that support registration in Windows Registry
            </summary>
        </member>
        <member name="T:JetBrains.Application.Configuration.IXmlUpgradable">
            <summary>
            If a previous User Settings version is found, and the component implements this interface, it's called with this interface instead of the regular Externalizable.
            Otherwise, the old settings will be passed into the regular interface.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.IXmlUpgradable.UpgradeFromXml(System.Xml.XmlElement,System.Version)">
            <summary>
            <para>Called with component's settings taken from the older version of the settings file, for each of the <see cref="P:JetBrains.Application.Configuration.IXmlUpgradable.LegacyTagNames"/> (even if some of the handlers return <c>True</c>).</para>
            <para><see cref="!:IXmlExternalizable.ReadFromXml"/> will not be called if any of the calls returns <c>True</c>.</para>
            <para>The settings-reading protocol might be executed more than once thru the component lifetime.</para>
            </summary>
            <param name="element">An XML element with component settings, taken from the settings file.</param>
            <param name="version">Version of the product that supposedly produced the legacy settings file we're upgrading from, or an empty <see cref="T:System.Version"/> instance if those are not known.</param>
            <returns>Whether the component has upgraded. Its normal <see cref="!:IXmlExternalizable.ReadFromXml"/> will not be called if that is the case.</returns>
        </member>
        <member name="P:JetBrains.Application.Configuration.IXmlUpgradable.LegacyTagNames">
            <summary>
            Element names for the component under which it used to be known in the old settings files.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Configuration.SettingsComponentBase">
            <summary>
            A component container with XML serialization capabilities for the component settings.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Configuration.SettingsComponentBase.myXmlSettingsBag">
            <summary>
            This stores the settings after they're read from the storage and before they're loaded by the components, and before they're written back to the storage. 
            </summary>
        </member>
        <member name="F:JetBrains.Application.Configuration.SettingsComponentBase.myVersionUpgradingFrom">
            <summary>
            Whenever an older version of the settings file is found to be upgraded, set to the version of the product that supposedly produced that file.
            Otherwise, <c>Null</c>, which means that the upgrade should not be called.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Configuration.SettingsComponentBase.myXmlDocumentSettings">
            <summary>
            A dummy XML document for creating XML elements for component settings. When settings are deserialized, set to their XML document.
            It's not important which XmlDoc to use, we'd just like to minimize their number.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.SettingsComponentBase.OnLoadSettingsXmlBag(System.Action{System.Xml.XmlDocument,JetBrains.Application.Configuration.XmlExternalizationScope})">
            <summary>
            <para>Invoked by the base implementation when it's time to load the XML Settings Bag from the permanent storage. </para>
            <para>This logic (like, choosing the file) must be implemented by the inheritor. The inheritor might look for legacy settings files from previous versions if the normal settings file is missing and set <see cref="M:JetBrains.Application.Configuration.SettingsComponentBase.ShouldUpgradeSettings(System.Version)"/> to use them with <see cref="T:JetBrains.Application.Configuration.IXmlUpgradable"/> components.</para>
            <para>Call <see paramref="funcDeserializeXmlBag"/> to submit the XML representation of the settings for a particular scope (see <see cref="M:JetBrains.Application.Configuration.SettingsComponentBase.DeserializeXmlBag(System.Xml.XmlDocument,JetBrains.Application.Configuration.XmlExternalizationScope)"/> for details).</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.SettingsComponentBase.ComponentReadFromXmlBag_TrySettingsElement(JetBrains.Application.Configuration.IXmlReadable,JetBrains.Application.Configuration.XmlExternalizationScope,System.String)">
            <summary>
            There were no upgrade, but there's a valid settings element, and it will be applied.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.SettingsComponentBase.ComponentReadFromXmlBag_TryUpgrade(JetBrains.Application.Configuration.IXmlReadable,JetBrains.Application.Configuration.XmlExternalizationScope)">
            <summary>
            If in upgrade mode, see for upgrade data for this component.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.SettingsComponentBase.DeserializeXmlBag(System.Xml.XmlDocument,JetBrains.Application.Configuration.XmlExternalizationScope)">
            <summary>
            Reads from an XML document and stores into the XML Bag.
            Collects the entries for the <see cref="F:JetBrains.Application.Configuration.SettingsComponentBase.myXmlSettingsBag"/> map from the <paramref name="document"/>.
            The scope is given by <paramref name="scope"/>, and the name comes from the XML tag names.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.SettingsComponentBase.LoadSettings(JetBrains.Application.Configuration.IXmlReadable,JetBrains.Application.Configuration.XmlExternalizationScope,System.String)">
            <summary>
            Overrides the base init-component to perform XML-related ops.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.SettingsComponentBase.LoadSettingsWithXmlExternalizationUtil(System.Object,JetBrains.Application.Configuration.XmlExternalizationScope,System.String)">
            <summary>
            Uses <see cref="M:JetBrains.Application.Configuration.XmlExternalizationUtil.ReadFromXml(System.Xml.XmlElement,System.Object)"/> and <see cref="M:JetBrains.Application.Configuration.XmlExternalizationUtil.WriteToXml(System.Xml.XmlElement,System.Object)"/> as the default implementation of <see cref="!:IXmlExternalizable"/> over <paramref name="target"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.SettingsComponentBase.Init">
            <returns>True if loaded anything, false otherwise </returns>
        </member>
        <member name="P:JetBrains.Application.Configuration.SettingsComponentBase.ValidXmlExternalizationScopes">
            <summary>
            Override this property to provide a list of scopes that are valid for components in this container.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Configuration.WorkspaceSettingsTable">
            <summary>
            Contains global settings of objects that do not have components to store settings in
            </summary>
        </member>
        <member name="P:JetBrains.Application.Configuration.SettingsTableBase.BoolProperties">
            <summary>
            Gets the boolean properties.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Configuration.SettingsTableBase.IntProperties">
            <summary>
            Gets the integer properties.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Configuration.SettingsTableBase.StringProperties">
            <summary>
            Gets the string properties.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Configuration.SettingsTableBase.PropertiesCollection`1">
            <summary>
            Represent the properties collection.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.SettingsTableBase.PropertiesCollection`1.Add(JetBrains.DataFlow.IProperty{`0})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:JetBrains.Application.Configuration.SettingsTableBase.PropertiesCollection`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only. </exception>
        </member>
        <member name="M:JetBrains.Application.Configuration.SettingsTableBase.PropertiesCollection`1.Contains(JetBrains.DataFlow.IProperty{`0})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            
            <returns>
            true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
            
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
        </member>
        <member name="M:JetBrains.Application.Configuration.SettingsTableBase.PropertiesCollection`1.CopyTo(JetBrains.DataFlow.IProperty{`0}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or-arrayIndex is equal to or greater than the length of array.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"></see> is greater than the available space from arrayIndex to the end of the destination array.-or-Type T cannot be cast automatically to the type of the destination array.</exception>
        </member>
        <member name="M:JetBrains.Application.Configuration.SettingsTableBase.PropertiesCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Application.Configuration.SettingsTableBase.PropertiesCollection`1.Remove(JetBrains.DataFlow.IProperty{`0})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            
            <returns>
            true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:JetBrains.Application.Configuration.SettingsTableBase.PropertiesCollection`1.System#Collections#Generic#IEnumerable{JetBrains#DataFlow#IProperty{TValue}}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:JetBrains.Application.Configuration.SettingsTableBase.PropertiesCollection`1.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String@JetBrains#DataFlow#IProperty{TValue}}}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:JetBrains.Application.Configuration.SettingsTableBase.PropertiesCollection`1.Item(System.String)">
            <summary>
            Gets a property by its name.
            Creates a new one if missing.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Configuration.SettingsTableBase.PropertiesCollection`1.Item(System.String,`0)">
            <summary>
            Gets a property by its name.
            Creates a new one if missing.
            The second parameter is the default value for the case the property does not yet exist.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Configuration.SettingsTableBase.PropertiesCollection`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            
        </member>
        <member name="P:JetBrains.Application.Configuration.SettingsTableBase.PropertiesCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
            
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only; otherwise, false.
            </returns>
            
        </member>
        <member name="T:JetBrains.Application.Configuration.XmlConfigurableAttribute">
            <summary>
            Allows to mark a type as XML Configurable. 
            Call to <see cref="M:JetBrains.Application.Configuration.XmlConfigurableHelper.InitializeComponent_XmlConfigurable(JetBrains.Application.Configuration.IXmlConfigurable)"/> to configure.  
            <see cref="M:JetBrains.Application.Configuration.IXmlConfigurable.ConfigureFromXml(System.Xml.XmlElement)"/> is used to fill instance with data.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.XmlConfigurableAttribute.#ctor(System.String)">
            <param name="configurationResourceName">
            Name of the embedded resource in either the component's assembly or the product's <see cref="!:IApplicationDescriptor.ConfigurationAssembly"/> that contains the XML to be passed into the component's <see cref="M:JetBrains.Application.Configuration.IXmlConfigurable.ConfigureFromXml(System.Xml.XmlElement)"/> before its <see cref="!:IComponent.Init"/>.
            </param>
        </member>
        <member name="P:JetBrains.Application.Configuration.XmlConfigurableAttribute.ConfigurationResourceName">
            <summary>
            Name of the embedded resource in either the component's assembly or the product's <see cref="!:IApplicationDescriptor.ConfigurationAssembly"/> that contains the XML to be passed into the component's <see cref="M:JetBrains.Application.Configuration.IXmlConfigurable.ConfigureFromXml(System.Xml.XmlElement)"/> before its <see cref="!:IComponent.Init"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.XmlConfigurableHelper.InitializeComponent_XmlConfigurable(JetBrains.Application.Configuration.IXmlConfigurable)">
            <summary>
            For an XML-configurable component, loads its config and applies to the component.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Configuration.XmlExternalizableAttribute">
            <summary>
            Use this attribute to mark those fields and properties of a class that should be serialized to XML.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Configuration.XmlExternalizableAttribute.DefaultValue">
            <summary>
            <para>The default value for this entry. You do not need to initialize the field itself in the inline initializer or the constructor. Instead, you MUST set this to the desired initial value, for serialization to work consistently.</para>
            <para>The possible values are:</para>
            <para>• <c>Null</c>,.which means the default value for the <see cref="T:System.Type"/> of the field (<c>Null</c> for reference types and zero memory for value types).</para>
            <para>• Some value of the same type as the <see cref="T:System.Type"/> of the field, or a value type convertible to it.</para>
            <para>• An invariant string representation of a value that cannot be presented inline in the attribute ctor. value of the same type as the <see cref="T:System.Type"/> of the field, or a value type convertible to it. The appropriate <see cref="T:System.ComponentModel.TypeConverter"/> is used for reading the value.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.Configuration.XmlExternalizableAttribute.SettingName">
            <summary>
            Use this property to specify settings name used in the xml, if different from the property (field) name.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Configuration.XmlExternalizableAttribute.UseXmlSerializer">
            <summary>
            Gets or sets whether the XML Serializer should be used for serializing the value of this field.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Configuration.XmlExternalizationScope">
            <summary>
            Defines the scopes for the externalizable components.
            The define the sets of isolated components that are serialized to separate storages.
            You may use one of the base values, or introduce your own ones as integers, as the string representations are never used.
            The scopes are normally not persisted, because they define a settings storage on serialization and are defined by the storage on deserialization.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Configuration.XmlExternalizationScope.Any">
            <summary>
            Don't return from components.
            Means that, when filtering, all the scopes should be allowed.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Configuration.XmlExternalizationScope.Local">
            <summary>
            Locally-stored settings of a project or a solution.
            They're not intended to be shared in the team or added to the SCC.
            Typically, they're persisted in a “.resharper.user” file.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Configuration.XmlExternalizationScope.Shared">
            <summary>
            Team-shared settings of a project or a solution.
            They're intended to be added to the SCC.
            Typically, they're persisted in a “.resharper” file.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Configuration.XmlExternalizationScope.UserSettings">
            <summary>
            User settings of the product.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Configuration.XmlExternalizationScope.WorkspaceSettings">
            <summary>
            Workspace settings of the product.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Configuration.GlobalSettingsTable">
            <summary>
            Contains global settings of objects that do not have components to store settings in
            </summary>
        </member>
        <member name="T:JetBrains.Application.Configuration.XmlExternalizationUtil">
            <summary>
            Utility class to externalize values of fields and properties of given instance via reflection.
            Helpful for implementing <see cref="T:JetBrains.Application.Configuration.IXmlReadable"/> and <see cref="T:JetBrains.Application.Configuration.IXmlWritable"/> interface.
            Values of all fields and properties marked with <see cref="T:JetBrains.Application.Configuration.XmlExternalizableAttribute"/> are saved/restored.
            The following value types are supported: <see cref="T:System.Boolean"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.String"/>, <see cref="T:System.Enum"/>s, <see cref="T:System.DateTime"/>s and one-dimensional arrays of the above types (as well as arrays of arrays).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Configuration.XmlExternalizationUtil.XmlIsNullAttrName">
            <summary>
            Controls the element nullity in the new serialization behavior.
            New behavior: elements with non-empty content are not-null values, and IsNull attribute must be present on elements with empty content to tell apart Null and empty string serialization (or empty arrays).
            Old behavior: if the IsNull attr is missing on an empty-content element, a self-closed tag is considered Null, and an opening+closing pair is considered an empty string.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Configuration.XmlExternalizationUtil.XmlExternalizableElementName">
            <summary>
            Name of the root element of the settings we write.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Configuration.XmlExternalizationUtil.XmlStreamElementName">
            <summary>
            Name of the <see cref="M:JetBrains.Application.Configuration.XmlExternalizationUtil.WriteStreamToXml(System.Xml.XmlElement,System.Action{System.Xml.XmlWriter})"/> / <see cref="M:JetBrains.Application.Configuration.XmlExternalizationUtil.ReadStreamFromXml(System.Xml.XmlElement,System.Action{System.Xml.XmlReader})"/> root element.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.XmlExternalizationUtil.ApplyDefaults(System.Object)">
            <summary>
            Enumerates the XML-externalizable fields of the <paramref name="externalizable"/> object and sets them to the default values, if such are given in the <see cref="P:JetBrains.Application.Configuration.XmlExternalizableAttribute.DefaultValue"/> property.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.XmlExternalizationUtil.ApplyDefaults(System.Object,System.Object)">
            <summary>
            Enumerates the XML-externalizable fields of the <paramref name="externalizable"/> object and sets them to the default values, if such are given in the <see cref="P:JetBrains.Application.Configuration.XmlExternalizableAttribute.DefaultValue"/> property.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.XmlExternalizationUtil.ReadStreamElementsFromXml(System.Xml.XmlElement,System.Action{System.Xml.XmlReader})">
            <summary>
            XML Serial access to the CDATA element content.
            Called on each top-level element under the stream root element.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.XmlExternalizationUtil.ReadStreamFromXml(System.Xml.XmlElement,System.Action{System.Xml.XmlReader})">
            <summary>
            XML Serial access to the CDATA element content.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.XmlExternalizationUtil.WriteStreamToXml(System.Xml.XmlElement,System.Action{System.Xml.XmlWriter})">
            <summary>
            XML Serial access to the CDATA element content.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.XmlExternalizationUtil.GetExternalizableMembers(System.Object)">
            <summary>
            Gets the members supported for XML Externalization.
            That is, fields or properties with the <see cref="T:JetBrains.Application.Configuration.XmlExternalizableAttribute"/> attribute.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.XmlExternalizationUtil.ReadFromXml_FillMembersWithValues_Value(System.Xml.XmlReader,System.Type)">
            <summary>
            Reads a value from the reader, returns either that value of type <paramref name="type"/>, or <c>Null</c>.
            </summary>
            <param name="reader">XML Reader positioned at the element whose value should be parsed.</param>
            <param name="type">Expected value type.</param>
        </member>
        <member name="M:JetBrains.Application.Configuration.XmlExternalizationUtil.ReadFromXml_FillMembersWithValues_Value(System.Xml.XmlElement,System.Type)">
            <summary>
            Reads the value, returns it if available, or <see cref="F:System.Convert.DBNull"/> otherwise.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.XmlExternalizationUtil.ReadFromXml_FillMembersWithValues_ValueXmlSerializer(System.Xml.XmlReader,JetBrains.Application.Configuration.XmlExternalizationUtil.ExternalizableMember)">
            <summary>
            Value deserialization for the <see cref="P:JetBrains.Application.Configuration.XmlExternalizableAttribute.UseXmlSerializer"/> case.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.XmlExternalizationUtil.ExternalizableMember.GetMemberType">
            <summary>
            Gets the type of the member values.
            Supports fields and properties of a CLR and <see cref="T:JetBrains.DataFlow.IProperty`1"/> type.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.XmlExternalizationUtil.ExternalizableMember.GetMemberValue(System.Object)">
            <summary>
            Retrieves a value of the member.
            Supports fields and properties of a CLR and <see cref="T:JetBrains.DataFlow.IProperty`1"/> type.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.XmlExternalizationUtil.ExternalizableMember.GetMemberValueRaw">
            <summary>
            Retrieves a value of the member in a raw manner.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.XmlExternalizationUtil.ExternalizableMember.HasDefaultValue">
            <summary>
            Gets whether there's a default value specified for the member in its <see cref="P:JetBrains.Application.Configuration.XmlExternalizationUtil.ExternalizableMember.Attribute"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.XmlExternalizationUtil.ExternalizableMember.ParseDefaultValue">
            <summary>
            Analyses and parses the default value, as given by the <see cref="P:JetBrains.Application.Configuration.XmlExternalizationUtil.ExternalizableMember.Attribute"/>-&gt;<see cref="P:JetBrains.Application.Configuration.XmlExternalizableAttribute.DefaultValue"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.XmlExternalizationUtil.ExternalizableMember.SetMemberValue(System.Object,System.Object)">
            <summary>
            Assigns a value to the member.
            Supports fields and properties of a CLR and <see cref="T:JetBrains.DataFlow.IProperty`1"/> type.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.XmlExternalizationUtil.ExternalizableMember.SetMemberValueRaw(System.Object)">
            <summary>
            Sets the value of the member in a raw manner.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.XmlExternalizationUtil.ExternalizableMember.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />. </param>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj" /> parameter is null.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Application.Configuration.XmlExternalizationUtil.ExternalizableMember.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Application.Configuration.XmlExternalizationUtil.ExternalizableMember.CompareTo(JetBrains.Application.Configuration.XmlExternalizationUtil.ExternalizableMember)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other" /> parameter.Zero This object is equal to <paramref name="other" />. Greater than zero This object is greater than <paramref name="other" />. 
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:JetBrains.Application.Configuration.XmlExternalizationUtil.ExternalizableMember.Equals(JetBrains.Application.Configuration.XmlExternalizationUtil.ExternalizableMember)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="P:JetBrains.Application.Configuration.XmlExternalizationUtil.ExternalizableMember.UserValue">
            <summary>
            The value read from the member, or the value to be written to the member. Temporary storage. Not operated by this class, read and written by external consumers.
            Initially, <see cref="F:System.Convert.DBNull"/>.
            </summary>
        </member>
        <member name="T:JetBrains.Application.DataContext.IDataConstant">
            <summary>
            Identifies a piece of data that could be requested from an <see cref="T:JetBrains.Application.DataContext.IDataContext"/>.
            </summary>
        </member>
        <member name="P:JetBrains.Application.DataContext.IDataConstant.Id">
            <summary>
            Gets the unique ID of this data constant instance.
            </summary>
        </member>
        <member name="P:JetBrains.Application.DataContext.IDataConstant.Type">
            <summary>
            Gets the type of the constant. Somewhen soon enough this is likely to become the identity of the constant.
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataContext.DataConstant`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:JetBrains.Application.DataContext.DataContext">
            <summary>
            <para>The Action Manager's implementation of IDataContext.</para>
            <para>If you'd like to create your own data context, use one of the <see cref="T:JetBrains.Application.DataContext.DataContexts"/> methods (import <see cref="T:JetBrains.Application.DataContext.DataContexts"/>). With it, you can add any rules or constants on your own, and create the data context on a specific control or point, or without any local context (the default global context).</para>
            <para>In the rare case when you need entirely your own datacontext without standard data rules, implement <see cref="T:JetBrains.Application.DataContext.IDataContext"/> directly.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.DataContext.IDataContext">
            <summary>
            The context, passed to Action.
            Must be used immediately ONLY, within the same <see cref="T:JetBrains.Threading.ReentrancyGuard"/> execution session.
            If you're deferring the execution, extract these parameters and store in your own structures.
            </summary>
        </member>
        <member name="F:JetBrains.Application.DataContext.DataContext.myDataConstantsInUse_Constant">
            <summary>
            Recursion prevention.
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataContext.DataContext.#ctor(JetBrains.DataFlow.Lifetime,System.Collections.Generic.IEnumerable{JetBrains.Application.DataContext.IDataRule},JetBrains.Util.OneToListMap{JetBrains.Application.DataContext.IDataConstant,JetBrains.Application.DataContext.IDataRule})">
            <summary>
            <para>Creates the data context.</para>
            <para>If you'd like to create your own data context, use one of the <see cref="T:JetBrains.Application.DataContext.DataContexts"/> methods (import <see cref="T:JetBrains.Application.DataContext.DataContexts"/>). With it, you can add any rules or constants on your own, and create the data context on a specific control or point, or without any local context (the default global context).</para>
            <para>From all the rules lists (plain and pre-sorted), rules are picked first by priority, then (within the same priority, which is usually the case because nearly all the rules have the default priority) — first from the plain list in order of appearance, then from the sorted list. The precedence of the plain list comes from the fact that it's usually the context-specific one (from focused control or moused control etc), while the pre-sorted list is the global list of the Action Manager.</para>
            </summary>
            <param name="lifetime">Limiting lifetime.</param>
            <param name="datarulesPlain">Optional. The plain list of data rules for the context.</param>
            <param name="datarulesSorted">Optional. As Action Manager has a large persistent list of data rules, they're given in a way that they're pre-tossed by constant and pre-sorted by priority for each constant.</param>
        </member>
        <member name="F:JetBrains.Application.DataContext.DataContext.Thread">
            <summary>
            Thread affinity.
            </summary>
        </member>
        <member name="F:JetBrains.Application.DataContext.DataContext.myDebugInstanceId">
            <summary>
            For diagnostyx.
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataContext.DataContext.CachedValues_ToDictionarySlow">
            <summary>
            For exception diag only, might be as slow as you'd like.
            </summary>
            <returns></returns>
        </member>
        <member name="F:JetBrains.Application.DataContext.DataContext.Evaluator.myDebugInstanceId">
            <summary>
            For diagnostyx.
            </summary>
        </member>
        <member name="F:JetBrains.Application.DataContext.DataContext.Evaluator.IsEmpty">
            <summary>
            Gets if there're no rules at all in this datacontext.
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataContext.DataContext.Evaluator.#ctor(System.Collections.Generic.IEnumerable{JetBrains.Application.DataContext.IDataRule},JetBrains.Util.OneToListMap{JetBrains.Application.DataContext.IDataConstant,JetBrains.Application.DataContext.IDataRule},System.String)">
            <summary>
            From all the rules lists (plain and pre-sorted), rules are picked first by priority, then (within the same priority, which is usually the case because nearly all the rules have the default priority) — first from the plain list in order of appearance, then from the sorted list. The precedence of the plain list comes from the fact that it's usually the context-specific one (from focused control or moused control etc), while the pre-sorted list is the global list of the Action Manager.
            </summary>
            <param name="datarulesPlain">Optional. The plain list of data rules for the context.</param>
            <param name="datarulesSorted">Optional. As Action Manager has a large persistent list of data rules, they're given in a way that they're pre-tossed by constant and pre-sorted by priority for each constant.</param>
            <param name="debugInstanceId"></param>
        </member>
        <member name="M:JetBrains.Application.DataContext.DataContext.Evaluator.TryEvaluateDataRules(JetBrains.Application.DataContext.IDataConstant,JetBrains.Application.DataContext.IDataContext)">
            <summary>
            Tries to get the constant value by evaluating all of the data rules in both lists.
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataContext.DataContexts.RegisterDataRule``1(JetBrains.DataFlow.Lifetime,System.String,JetBrains.Application.DataContext.DataConstant{``0},System.Func{JetBrains.Application.DataContext.IDataContext,``0})">
            <summary>
            Registers a data rule that will apply to data contexts created by this object.
            </summary>
            <typeparam name="TValue"></typeparam>
            <param name="lifetime"></param>
            <param name="name">Required for debugging data constant values inference. Allows to track the rule supplying the questionable constant value.</param>
            <param name="constant">The rule knows how to produce this constant out of some other constants or the environment.</param>
            <param name="FRule"></param>
        </member>
        <member name="M:JetBrains.Application.DataContext.DataContexts.RegisterDataRule(JetBrains.DataFlow.Lifetime,JetBrains.Application.DataContext.IDataRule)">
            <summary>
            Registers a data rule that will apply to data contexts created by this object.
            </summary>
            <param name="lifetime"></param>
            <param name="rule"></param>
        </member>
        <member name="M:JetBrains.Application.DataContext.DataContexts.CreateOnActiveControl(JetBrains.DataFlow.Lifetime,System.Collections.Generic.IEnumerable{JetBrains.Application.DataContext.IDataRule})">
            <summary>
            Gets the data context for executing the actions in the control that currently has user input focus.
            </summary>
            <param name="lifetime"></param>
            <param name="datarulesAdditional">Manually-supplied additional data rules. Takes precedence over any other data rules (of the same priority).</param>
        </member>
        <member name="M:JetBrains.Application.DataContext.DataContexts.CreateOnSelection(JetBrains.DataFlow.Lifetime,System.Collections.Generic.IEnumerable{JetBrains.Application.DataContext.IDataRule})">
            <summary>
            <para>Gets the data context for executing the actions based on the given data rules.</para>
            <para>Note that the focused control is not used for collecting data rules in this overload, but application-wide selection context (like VS selected hierarchy item as current project file, text control, document, etc) still contributes to the context.</para>
            <para>Registered data rules are also enabled with this context.</para>
            </summary>
            <param name="lifetime"></param>
            <param name="datarulesAdditional">Manually-supplied additional data rules. Takes precedence over any other data rules (of the same priority).</param>
        </member>
        <member name="M:JetBrains.Application.DataContext.DataContexts.CreateOnApplicationWideState(JetBrains.DataFlow.Lifetime,System.Collections.Generic.IEnumerable{JetBrains.Application.DataContext.IDataRule})">
            <summary>
            <para>Gets the data context for the current application-wide state.</para>
            <para>Note that the focused control is not used for collecting data rules in this overload, and application-wide selection context is not used either(like VS selected hierarchy item as current project file, text control, document, etc). Only application-wide state like currently opened solution takes effect.</para>
            <para>Registered data rules are also enabled with this context.</para>
            </summary>
            <param name="lifetime"></param>
            <param name="datarulesAdditional">Manually-supplied additional data rules. Takes precedence over any other data rules (of the same priority).</param>
        </member>
        <member name="M:JetBrains.Application.DataContext.DataContexts.CreateWithDataRules(JetBrains.DataFlow.Lifetime,System.Collections.Generic.IEnumerable{JetBrains.Application.DataContext.IDataRule})">
            <summary>
            <para>Gets the data context for executing the actions based on the given data rules.</para>
            <para>Note that no selection/application context is used for collecting data rules in this overload. Only transformation data rules should be applied.</para>
            <para>This method is different from creating a <see cref="T:JetBrains.Application.DataContext.DataContext"/> explicitly on these providers because <see cref="M:JetBrains.Application.DataContext.DataContexts.RegisterDataRule``1(JetBrains.DataFlow.Lifetime,System.String,JetBrains.Application.DataContext.DataConstant{``0},System.Func{JetBrains.Application.DataContext.IDataContext,``0})">registered data rules</see> are added to the data rules pool (with a lower priority than your manually-supplied list).</para>
            </summary>
            <param name="lifetime"></param>
            <param name="datarulesAdditional">Manually-supplied additional data rules. Takes precedence over any other data rules (of the same priority).</param>
        </member>
        <member name="M:JetBrains.Application.DataContext.DataContexts.CreateWithoutDataRules(JetBrains.DataFlow.Lifetime,System.Collections.Generic.IEnumerable{JetBrains.Application.DataContext.IDataRule})">
            <summary>
            Gets the data context for executing the actions based on the given data rules.
            Note that the focused control is not used for collecting data rules in this overload.
            The registered data rules are not taking part in this data context.
            </summary>
            <param name="lifetime"></param>
            <param name="datarulesAdditional">Manually-supplied additional data rules. Takes precedence over any other data rules (of the same priority).</param>
        </member>
        <member name="M:JetBrains.Application.DataContext.DataContexts.CreateAtScreenPoint(JetBrains.DataFlow.Lifetime,System.Windows.Point,System.Collections.Generic.IEnumerable{JetBrains.Application.DataContext.IDataRule})">
            <summary>
            Gets the data context for executing the actions in the given screen location.
            Basically, this is <see cref="M:JetBrains.Application.DataContext.DataContexts.CreateOnControl(JetBrains.DataFlow.Lifetime,JetBrains.UI.CrossFramework.EitherControl,System.Collections.Generic.IEnumerable{JetBrains.Application.DataContext.IDataRule})">the context for the UI control</see> at the given screen location.
            </summary>
            <param name="lifetime"></param>
            <param name="ptScreen">Point, in screen coordinates.</param>
            <param name="datarulesAdditional">Manually-supplied additional data rules. Takes precedence over any other data rules (of the same priority).</param>
        </member>
        <member name="M:JetBrains.Application.DataContext.DataContexts.CreateOnControl(JetBrains.DataFlow.Lifetime,JetBrains.UI.CrossFramework.EitherControl,System.Collections.Generic.IEnumerable{JetBrains.Application.DataContext.IDataRule})">
            <summary>
            Gets the data context for executing actions within the given control.
            </summary>
            <param name="lifetime"></param>
            <param name="control">The control of either kind.</param>
            <param name="datarulesAdditional">Manually-supplied additional data rules. Takes precedence over any other data rules (of the same priority).</param>
        </member>
        <member name="P:JetBrains.Application.DataContext.DataContexts.FindDataRules">
            <summary>
            Exposes the aggregator of registered data rule finders.
            </summary>
        </member>
        <member name="P:JetBrains.Application.DataContext.DataContexts.Empty">
            <summary>
            A data context that knows no data constants at all.
            </summary>
        </member>
        <member name="F:JetBrains.Application.DataContext.DataConstants.ScreenPoint">
            <summary>
            A point, in screen coordinates.
            Available if the context has been created from a screen point: <see cref="M:JetBrains.Application.DataContext.DataContexts.CreateAtScreenPoint(JetBrains.DataFlow.Lifetime,System.Windows.Point,System.Collections.Generic.IEnumerable{JetBrains.Application.DataContext.IDataRule})"/> (or if published by some data provider).
            </summary>
        </member>
        <member name="F:JetBrains.Application.DataContext.DataConstants.CurrentSelectionContext">
            <summary>
            <para>Presence of this data constant in the data context means that you would like to refine the context to all the possibly known details of the current selection, like current document, file, text control, caret position in the text control, selected text, and so on.</para>
            <para>All of the data rules providing context info should be doing this in inference from this constant instead of supplying the data out of nothing.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.DataContext.DataConstants.ApplicationContext">
            <summary>
            <para>Presence of this data constant in the data context means that you would like to refine the context to the current global state of the application, which is more or less permanent and does not depend on selected window/document etc. Global features not bound to selection (like Memory Usage Indicator for instance) might be using this context for their actions and settings binding. In VS-based products, this normally includes the solution object, because a solution defines the VS context (and you must switch the state with an explicit Open/Close Solution Action to alter this context), but does not include projects because the current project changes with selection. In DotTrace with one-process-per-snapshot, this might be the snapshot.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.DataContext.DataConstants.ComponentContainerForFactoring">
            <summary>
            Gets the component container which is best for factoring object belonging to this context.
            </summary>
        </member>
        <member name="T:JetBrains.Application.DataContext.ExportFindDataRulesAttribute">
            <summary>
            Attribute for <see cref="T:JetBrains.Application.DataContext.IFindDataRules"/> impls.
            </summary>
        </member>
        <member name="F:JetBrains.Application.DataContext.ExportFindDataRulesAttribute.Priority">
            <summary>
            The higher the priority, the sooner the finder is asked (and can promote its own result in precedence of the others).
            </summary>
        </member>
        <member name="T:JetBrains.Application.DataContext.FindDataRules">
            <summary>
            Takes <see cref="T:JetBrains.Application.DataContext.IFindDataRules"/>, prioritizes, and runs queries on them.
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataContext.IDataContextEx.ToPropertyBag(JetBrains.Application.DataContext.IDataContext,JetBrains.Application.DataContext.IDataConstant[])">
            <summary>
            Creates a new property bag with a snapshot of this data context.
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataContext.IDataContextEx.GetRawData(JetBrains.Application.DataContext.IDataContext,JetBrains.Application.DataContext.IDataConstant)">
            <summary>
            Creates a new property bag with a snapshot of this data context.
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataContext.IDataContextEx.ToPropertyId(JetBrains.Application.DataContext.IDataConstant)">
            <summary>
            Creates a property ID identified by a data constant.
            We convert it to a generic <see cref="T:JetBrains.Application.DataContext.DataConstant`1"/> type, and then instantiate <see cref="T:JetBrains.Application.DataContext.DataConstantPropertyId`1"/> for the same <c>T</c>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataContext.IDataContextEx.ToPropertyId``1(JetBrains.Application.DataContext.DataConstant{``0})">
            <summary>
            Creates a property ID identified by a data constant.
            </summary>
        </member>
        <member name="T:JetBrains.Application.DataContext.IDataRuleProvider">
            <summary>
            The Windows Forms specific way of providing ui-context-spefific <see cref="T:JetBrains.Application.DataContext.IDataRule"/>s on UI controls.
            </summary>
        </member>
        <member name="T:JetBrains.Application.DataContext.IDataRule">
            <summary>
            A data rule that is the internal mechanism of the default <see cref="!:IActionManager"/>'s implementation of <see cref="T:JetBrains.Application.DataContext.IDataContext"/> for evaluating values of constants. When a constant is requested from the data context, it's evaluated transitively by a chain of rules where the first rule in the chain uses no inputs and just tells the value (e.g. current text control from the environment), and other rules transform it to get the desired data constant out of it (e.g. document from the current text control).
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataContext.IDataRule.Evaluate(JetBrains.Application.DataContext.IDataContext)">
            <summary>
            Attempts to evaluate the data rule.
            </summary>
            <param name="context">The data context from which the data rule could optionally get any other constants to calculate the rule result upon.</param>
            <returns>
            <para>Returns the value if it could be calculated. The possible return values are:</para>
            <para>(1) A valid value, if the rule was evaluated successfully. No rules would be further evaluated. The value must be of type specified by <see cref="P:JetBrains.Application.DataContext.IDataRule.OutputType"/>.</para>
            <para>(2) A <c>Null</c> value if this rule has insufficient information for evaluation, such as a "text control selection from text control" when no text control could be taken from data context. The remaining rules will be evaluated in this case.</para>
            <para>(3) The <see cref="F:System.Reflection.Missing.Value">VT_ERROR/DISP_E_PARAMNOTFOUND</see> value, which means that the rule knows and understands this context and usually can produce a result, but right now (with current user selection etc) cannot yield a value. In this case rules with larger priority values will not be processed, and <c>Null</c> will be returned from the data context for this constant, unless some of the remaining rules of the same priority provides a value. Evaluation of the remaining rules of the same priority is not prevented because their relative order is not well defined.</para>
            </returns>
        </member>
        <member name="P:JetBrains.Application.DataContext.IDataRule.Name">
            <summary>
            Semantic name of the rule. Crucial for debugging data constants inference.
            </summary>
        </member>
        <member name="P:JetBrains.Application.DataContext.IDataRule.OutputType">
            <summary>
            The output type of the rule.
            </summary>
        </member>
        <member name="P:JetBrains.Application.DataContext.IDataRule.Priority">
            <summary>
            <para>The rule priority. The lower the priority, the earlier the rule gets chance to contribute. Evaluation stops after some rule yields a valid value.</para>
            <para>The order of execution for rules of the same priority is undefined in most cases. However, as rules are collected from UI context by bubbling out of the active our mouse-hit control, rules of the control closer to the bubbling origin would be preferred.</para>
            <para>See <see cref="T:JetBrains.Application.DataContext.DataRulePriorityClasses"/> for typical values. As you create a rule with <see cref="T:JetBrains.Application.DataContext.DataRule`1"/> class or one of the helper methods, it gets the default priority of <see cref="F:JetBrains.Application.DataContext.DataRulePriorityClasses.Default"/>.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.DataContext.DataRule`1">
            <summary>
            The default data rule implementation with default priority.
            </summary>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:JetBrains.Application.DataContext.DataRule`1.#ctor(System.String,JetBrains.Application.DataContext.DataConstant{`0},`0)">
            <summary>
            Creates a constant data rule (no evaluation involved).
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataContext.DataRule`1.#ctor(System.String,JetBrains.Application.DataContext.DataConstant{`0},System.Func{JetBrains.Application.DataContext.IDataContext,`0})">
            <summary>
            <para>Creates a data rule that evaluates a function, possibly requesting other constants from the data context transitively.</para>
            <para>Out of the <see cref="M:JetBrains.Application.DataContext.IDataRule.Evaluate(JetBrains.Application.DataContext.IDataContext)"/> return type variations supports <c>Null</c> and a meaningful value. For the usually-available-but-now-missing value, see another overload.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataContext.DataRule`1.#ctor(System.String,JetBrains.Application.DataContext.DataConstant{`0},System.Func{JetBrains.Application.DataContext.IDataContext,JetBrains.Util.JetTuple{`0,System.Boolean}})">
            <summary>
            <para>Creates a data rule that evaluates a function, possibly requesting other constants from the data context transitively.</para>
            <para>Unlike the other overload, supports all of the <see cref="M:JetBrains.Application.DataContext.IDataRule.Evaluate(JetBrains.Application.DataContext.IDataContext)"/> return type variations. The boolean in the tuple means whether the value would usually be available in this context. Your function could return the following tuple combinations:</para>
            <para>(1) {meaningful-value, True}: evaluation succeeded.</para>
            <para>(2) {Null, True}: evaluation recognized the context and usually would return smth, but right now there is no value available. See <see cref="M:JetBrains.Application.DataContext.IDataRule.Evaluate(JetBrains.Application.DataContext.IDataContext)"/> for further details.</para>
            <para>(3) {Null, False}: evaluation has no idea as of what to return. See <see cref="M:JetBrains.Application.DataContext.IDataRule.Evaluate(JetBrains.Application.DataContext.IDataContext)"/> for further details.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.DataContext.DataRule`1.DesperateDataRule">
            <summary>
            The last-chance data rule to be called only even no other data rules for this constant could yield a result.
            </summary>
        </member>
        <member name="T:JetBrains.Application.DataContext.DataRules">
            <summary>
            Helper class for creating lists of data rules.
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataContext.DataRules.AddRule``1(System.String,JetBrains.Application.DataContext.DataConstant{``0},System.Func{JetBrains.Application.DataContext.IDataContext,``0})">
            <summary>
            Starts a new list of data rules.
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataContext.DataRules.AddRule``1(System.String,JetBrains.Application.DataContext.DataConstant{``0},``0)">
            <summary>
            Starts a new list of data rules.
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataContext.DataRules.AddRule``1(System.Collections.Generic.IList{JetBrains.Application.DataContext.IDataRule},System.String,JetBrains.Application.DataContext.DataConstant{``0},System.Func{JetBrains.Application.DataContext.IDataContext,``0})">
            <summary>
            Adds another rule to the rules list. Modifies the original list. Fluent.
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataContext.DataRules.AddRule``1(System.Collections.Generic.IList{JetBrains.Application.DataContext.IDataRule},System.String,JetBrains.Application.DataContext.DataConstant{``0},``0)">
            <summary>
            Adds another rule to the rules list. Modifies the original list. Fluent.
            </summary>
        </member>
        <member name="T:JetBrains.Application.DataContext.DataRulePriorityClasses">
            <summary>
            Sample priority classes for data rules.
            </summary>
        </member>
        <member name="F:JetBrains.Application.DataContext.DataRulePriorityClasses.Default">
            <summary>
            Default priority. Most of data rules be at this level.
            </summary>
        </member>
        <member name="F:JetBrains.Application.DataContext.DataRulePriorityClasses.Ambient">
            <summary>
            Ambient data rules taking context from the environment. For example, Visual Studio selected hierarchy item is turned into a project model element. Would not be called if any of the product rules are able to provide a value for the constant.
            </summary>
        </member>
        <member name="F:JetBrains.Application.DataContext.DataRulePriorityClasses.Desperate">
            <summary>
            Last-chance data rules providing an arguebly useful value in case it couldn't be inferred from normal rules or host environment. For example, if there're no declared elements available, use the project model element to expose it as a "declared path" to make it searchable etc.
            </summary>
        </member>
        <member name="T:JetBrains.Application.DataContext.AmbientSelectionDataRule`1">
            <summary>
            <para>Overrides the data rule priority to make it a last-chance-fallback to getting the current selection of the application environment (eg VS).</para>
            <para>This rule is only active when a Data Context with current selection is requested (<see cref="F:JetBrains.Application.DataContext.DataConstants.CurrentSelectionContext"/>) is present in the data context.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataContext.AmbientSelectionDataRule`1.#ctor(System.String,JetBrains.Application.DataContext.DataConstant{`0},System.Func{JetBrains.Application.DataContext.IDataContext,`0})">
            <summary>
            Overrides the data rule priority to make it a last-chance-fallback to application environment (eg VS).
            </summary>
            <param name="name">Rule name for rules inference problems diagnostics.</param>
            <param name="dataconstant">Output data constant of the rule.</param>
            <param name="FTryEvaluate">Rule function.</param>
        </member>
        <member name="T:JetBrains.Application.DataContext.AmbientSelectionMainThreadDataRule`1">
            <summary>
            <para>Overrides the data rule priority to make it a last-chance-fallback to getting the current selection of the application environment (eg VS).</para>
            <para>Is deactivated on background threads. Use this when calling into VS APIs which are primary-thread-only.</para>
            <para>This rule is only active when a Data Context with current selection is requested (<see cref="F:JetBrains.Application.DataContext.DataConstants.CurrentSelectionContext"/>) is present in the data context.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataContext.AmbientSelectionMainThreadDataRule`1.#ctor(System.String,JetBrains.Application.DataContext.DataConstant{`0},JetBrains.Threading.IThreading,System.Func{JetBrains.Application.DataContext.IDataContext,`0})">
            <summary>
            Overrides the data rule priority to make it a last-chance-fallback to application environment (eg VS).
            </summary>
            <param name="name">Rule name for rules inference problems diagnostics.</param>
            <param name="dataconstant">Output data constant of the rule.</param>
            <param name="mainthread">Identifies the main thread to which this rule affines.</param>
            <param name="FTryEvaluate">Rule function.</param>
        </member>
        <member name="T:JetBrains.Application.DataContext.AmbientApplicationDataRule`1">
            <summary>
            <para>Overrides the data rule priority to make it a last-chance-fallback to getting the non-selection-dependent state of the application environment (eg VS). See <see cref="F:JetBrains.Application.DataContext.DataConstants.ApplicationContext"/> for details.</para>
            <para>This rule is only active when a Data Context with current selection is requested (<see cref="F:JetBrains.Application.DataContext.DataConstants.ApplicationContext"/>) is present in the data context.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataContext.AmbientApplicationDataRule`1.#ctor(System.String,JetBrains.Application.DataContext.DataConstant{`0},System.Func{JetBrains.Application.DataContext.IDataContext,`0})">
            <summary>
            Overrides the data rule priority to make it a last-chance-fallback to application environment (eg VS).
            </summary>
            <param name="name">Rule name for rules inference problems diagnostics.</param>
            <param name="dataconstant">Output data constant of the rule.</param>
            <param name="FTryEvaluate">Rule function.</param>
        </member>
        <member name="T:JetBrains.Application.DataContext.AmbientApplicationOrSelectionDataRule`1">
            <summary>
            <para>Operates as a combination of <see cref="T:JetBrains.Application.DataContext.AmbientApplicationDataRule`1"/> and <see cref="T:JetBrains.Application.DataContext.AmbientSelectionDataRule`1"/>, which means that this rule is active when either selection or ambient information is requested (any of the <see cref="F:JetBrains.Application.DataContext.DataConstants.ApplicationContext"/> or <see cref="F:JetBrains.Application.DataContext.DataConstants.CurrentSelectionContext"/> constants is present). See documentation on the abovementioned rule kinds for details.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataContext.AmbientApplicationOrSelectionDataRule`1.#ctor(System.String,JetBrains.Application.DataContext.DataConstant{`0},System.Func{JetBrains.Application.DataContext.IDataContext,`0})">
            <summary>
            Overrides the data rule priority to make it a last-chance-fallback to application environment (eg VS).
            </summary>
            <param name="name">Rule name for rules inference problems diagnostics.</param>
            <param name="dataconstant">Output data constant of the rule.</param>
            <param name="FTryEvaluate">Rule function.</param>
        </member>
        <member name="T:JetBrains.Application.DataContext.IFindDataRules">
            <summary>
            An entity to look for an <see cref="T:JetBrains.Application.DataContext.IDataRuleProvider"/> based on the current cursor position or current UI control.
            </summary>
            <seealso cref="T:JetBrains.Application.DataContext.ExportFindDataRulesAttribute"/>.
        </member>
        <member name="M:JetBrains.Application.DataContext.IFindDataRules.FindActiveDataRules">
            <summary>
            Gets the data provider for the control that currently has user input focus.
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataContext.IFindDataRules.FindDataRulesAtPoint(System.Windows.Point)">
            <summary>
            Gets the data provider for the control that is located at the given screen point.
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataContext.IFindDataRules.FindDataRulesInControl(JetBrains.UI.CrossFramework.EitherControl)">
            <summary>
            Gets the data provider for the given control.
            </summary>
        </member>
        <member name="P:JetBrains.Application.ExceptionReport.ExceptionStorageLocator.StoresExceptions">
            <summary>
              Returns true if this storage is meant to store exceptions. Otherwise returns false.
            </summary>
        </member>
        <member name="T:JetBrains.Application.ExceptionReport.ManagedThreadNameExceptionReportDataProvider">
            <summary>
            Adds managed thread name to the submitted exception data.
            </summary>
        </member>
        <member name="T:JetBrains.Application.ExceptionReport.IExceptionReportDataProvider">
            <summary>
            Components exporting this interface are called to add data to the exception when an exception is about to be reported.
            Use <see cref="M:JetBrains.Util.ExceptionEx.AddData``1(``0,System.String,System.Object)"/> on the <see cref="T:System.Exception"/> object of the data you're given to add exception data to the exception object.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ExceptionReport.PersistableExceptionData.AddExternalDataLine(System.Exception,System.String)">
            <summary>
              Adds to the <see cref="P:JetBrains.Application.ExceptionReport.PersistableExceptionData.HeaderText"/> .
            </summary>
        </member>
        <member name="P:JetBrains.Application.ExceptionReport.PersistableExceptionData.HeaderText">
            <summary>
              Additional text in the header, just before the full stack traces of the exception. Might contain environmental info, build description, etc. Most of the technical data must be added to the exception data itself, with <see cref="M:JetBrains.Util.ExceptionEx.AddData``1(``0,System.String,System.Object)"/> inside your implementation of <see cref="M:JetBrains.Application.ExceptionReport.IExceptionReportDataProvider.ProvideExceptionData(System.Exception)"/> . It will appear in the detailed stack traces among the data field of the outermost exception. If you'd like your data get into the header text, call <see cref="M:JetBrains.Application.ExceptionReport.PersistableExceptionData.AddExternalDataLine(System.Exception,System.String)"/> inside your implementation of <see cref="M:JetBrains.Application.ExceptionReport.IExceptionReportDataProvider.ProvideExceptionData(System.Exception)"/> . Use sparingly.
            </summary>
        </member>
        <member name="T:JetBrains.Application.ExceptionReport.PlatformSccRevisionExceptionReportDataProvider">
            <summary>
            Exposes the SCC revision of the codebase off which the platform was built.
            Note: in case of platform sharing, platform and products might be built off different SCC revisions.
            </summary>
        </member>
        <member name="T:JetBrains.Application.ExceptionReport.ProductSccRevisionExceptionReportDataProvider">
            <summary>
            Exposes the SCC revision of the codebase off which the product was built.
            Note: in case of platform sharing, platform and products might be built off different SCC revisions.
            TODO: make sure it uses per-product defines when we have shell sharing.
            </summary>
        </member>
        <member name="T:JetBrains.Application.CommandLineParameter">
            <summary>
            One parsed parameter of the command line.
            </summary>
        </member>
        <member name="F:JetBrains.Application.CommandLineParameter.Key">
            <summary>
            The key to the command line parameter. <c>Null</c> or <c>""</c> on a non-keyed parameter.
            </summary>
        </member>
        <member name="F:JetBrains.Application.CommandLineParameter.Value">
            <summary>
            The command line parameter value. <c>Null</c> or <c>""</c> on a command line key without a value.
            </summary>
        </member>
        <member name="T:JetBrains.Application.IHostCommandLine">
            <summary>
            Command line of the host, which includes both product-shared keys and all keys that belong to each product.
            In VS, created over the VS command line object. In standalone, created over a string array.
            </summary>
        </member>
        <member name="M:JetBrains.Application.IHostCommandLine.MakeFullCommandLineKeyName(System.String)">
            <summary>
            <para>Gets the string to be passed on the command line to this host so that the product-specific command lines would get <paramref name="sKeyWithProductDecoration"/> for parsing.</para>
            <para>For calling from <see cref="T:JetBrains.Application.IProductCommandLine"/>s to serve their <see cref="M:JetBrains.Application.IProductCommandLine.MakeFullCommandLineKeyName(System.String)"/> requests.</para>
            <para>For example, let's consider a non-default Visual Studio hive with root suffix “<c>Exp</c>”, a key with short name of “<c>SelfDestruction</c>”, for the product named “<c>Kalabash</c>”. This method is given the product-decorated “<c>Kalabash.SelfDestruction</c>” key name (formed from the short name by some <see cref="T:JetBrains.Application.IProductCommandLine"/>), and yields the full ready-for-VS-command-line “<c>Kalabash.SelfDestruction.Exp</c>” key name.</para>
            <para>In non-VS or VS default hive, returns the original string. If the product is also the default product of the host (not applicable to VS), the resulting full name will just be the short key name.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.IHostCommandLineEx.IsKeyDefinedInAnyProduct(JetBrains.Application.IHostCommandLine,System.String,System.Boolean)">
            <summary>
            Checks if the key is defined in any product loaded in this host.
            </summary>
        </member>
        <member name="T:JetBrains.Application.ProductCommandLine">
            <summary>
            Implements the command line of the product over a host command line.
            Selects those keys that have the prefix of a specific product (or no prefix at all, for host-default product).
            </summary>
        </member>
        <member name="M:JetBrains.Application.ProductCommandLine.#ctor(JetBrains.DataFlow.Lifetime,JetBrains.Application.IHostCommandLine,System.String,System.Boolean)">
            <summary>
            Init.
            </summary>
            <param name="lifetime"> </param>
            <param name="cmdlHost">Host command line to filter and strip key names.</param>
            <param name="sProductPrefix">Prefix of the product (dot not included). Keys with this prefix (followed by a dot) are attributed to the current product and given out. Case-sensitivity flags of the command line request also applies to the prefix.</param>
            <param name="isKeyPrefixOptional">If the host has a default product, then keys without prefix are also attributed to that product. An example is a standalone application (eg DotTrace).</param>
        </member>
        <member name="T:JetBrains.Application.Install.IAssemblyAttributeInstaller`1">
            <summary>
            A class marked with <see cref="T:JetBrains.Application.Install.AssemblyAttributeInstallerAttribute"/> must implement this interface in order to be called for processing each of the assembly attributes it handles.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.IAssemblyAttributeInstaller`1.Install(JetBrains.Application.Install.Installer,System.Reflection.Assembly,`0)">
            <summary>
            Called for each of the attributes of the requested type encountered in the known assemblies.
            </summary>
            <param name="installer">The installer object that provides the installation data.</param>
            <param name="assembly">The assembly in which the assembly attribute we're processing is located.</param>
            <param name="attribute">The instance of the attribute to process.</param>
            <returns>The list of the Registry entries to write, or <c>Null</c> if none.</returns>
        </member>
        <member name="T:JetBrains.Application.Install.InstallationData.InstalledReplaceTextInFile">
            <summary>
            <para>An advanced installation task which alters the contents of an installed file on the target system.</para>
            <para>It takes a regular installed file as a source, reads its text, applies the transformation, and writes to the new location on the target system.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.InstallationData.InstalledFileItemBase">
            <summary>
            Base class for all of the files installed to the target system by the Installation Data items.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledFileItemBase.#ctor(System.String)">
            <summary>
            Sets the name of the file item on the target filesystem.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledFileItemBase.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledFileItemBase.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledFileItemBase.System#IComparable{JetBrains#Application#Install#InstallationData#InstalledFileItemBase}#CompareTo(JetBrains.Application.Install.InstallationData.InstalledFileItemBase)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>. 
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledFileItemBase.Equals(JetBrains.Application.Install.InstallationData.InstalledFileItemBase)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="P:JetBrains.Application.Install.InstallationData.InstalledFileItemBase.TargetName">
            <summary>
            The local name of the file on the target system. If left empty, will be the same as the source name. Must be left empty if the source name matches more than one file.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.InstallationData.InstalledReplaceTextInFile.OriginalRoot">
            <summary>
            Root folder on the target file system in which the original file for patching the text is residing.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.InstallationData.InstalledReplaceTextInFile.OriginalDir">
            <summary>
            Relative path from the root folder to the folder on the target file system in which the original file for patching the text is residing.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.InstallationData.InstalledReplaceTextInFile.OriginalName">
            <summary>
            Local name of the original file for patching the text (under <see cref="P:JetBrains.Application.Install.InstallationData.InstalledReplaceTextInFile.OriginalDir"/>).
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.InstallationData.InstalledReplaceTextInFile.Encoding">
            <summary>
            Specifies the file text encoding. 
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.InstallationData.InstalledReplaceTextInFile.StandardMacros">
            <summary>
            Standard macros which could be used in files when replacing their text.
            The string representation of the macro is <c>$()</c>-surrounded text representation of the enumeration member name.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.InstallDirInstaller">
            <summary>
            Writes the InstallDir to the Registry. Works for VS shells.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.IStaticInstaller">
            <summary>
            A class marked with <see cref="T:JetBrains.Application.Install.StaticInstallerAttribute"/> must implement this interface in order to be called once per the registration process.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.IStaticInstaller.InstallStatic(JetBrains.Application.Install.Installer)">
            <summary>
            Called once on the object during the registration process.
            </summary>
            <param name="installer">The installer object that provides the installation data.</param>
            <returns>The list of the Registry entries to write, or <c>Null</c> if none.</returns>
        </member>
        <member name="M:JetBrains.Application.Install.InstallDirInstaller.JetBrains#Application#Install#IStaticInstaller#InstallStatic(JetBrains.Application.Install.Installer)">
            <summary>
            Called once on the object during the registration process.
            </summary>
            <returns>The list of the Registry entries to write, or <c>Null</c> if none.</returns>
        </member>
        <member name="P:JetBrains.Application.Install.InstallerAttributeBase.VsVersionAffinity">
            <summary>
            Specifies whether this installation is interested in the VS version, and how.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.InstallFromReferencesDirectoryAttribute.#ctor(System.String,JetBrains.Application.Install.InstallationData.InstallationTargetDirRoot,System.String,System.String,JetBrains.Application.Install.InstallFromReferencesDirectoryAttribute.Recursive)">
            <summary>
            Adds one or more arbitrary files to the installation.
            </summary>
            <param name="targetroot">Base folder on the installation site.</param>
            <param name="sTargetRelativeDir">Relative path from the base folder on the installation site.</param>
            <param name="sSourceRelativeDir">Relative path from the base folder on the compilation site.</param>
            <param name="id">The unique identifier for this installation entry.</param>
            <param name="recursive">Process all subfolders recursively, or not.</param>
        </member>
        <member name="P:JetBrains.Application.Install.InstallFromReferencesDirectoryAttribute.Id">
            <summary>
            The unique identifier for this installation entry.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.InstallFromReferencesDirectoryAttribute.TargetRoot">
            <summary>
            Base folder on the installation site.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.InstallFromReferencesDirectoryAttribute.TargetRelativeDir">
            <summary>
            Relative path from the base folder on the installation site.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.InstallFromReferencesDirectoryAttribute.SourceRelativeDir">
            <summary>
            <para>Relative path from the base folder on the compilation site.</para>
            <para>It's always relative to the references directory of the current module.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.InstallFromReferencesDirectoryAttribute.IsRecursive">
            <summary>
            Process all subfolders recursively, or not.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.ITypeAttributeInstaller">
            <summary>
            A class marked with <see cref="T:JetBrains.Application.Install.TypeAttributeInstallerAttribute"/> must implement this interface in order to be called for processing each of the type attributes it handles.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.ITypeAttributeInstaller.InstallInstance(JetBrains.Application.Install.Installer,System.Type,System.Object)">
            <summary>
            Called for each of the attributes of the requested type encountered in the known assemblies.
            </summary>
            <param name="installer">The installer object that provides the installation data.</param>
            <param name="attributeOwner">The type owning the attribute</param>
            <param name="attributeInstance">Instance of the attribute to process.</param>
            <returns>The list of the Registry entries to write, or <c>Null</c> if none.</returns>
        </member>
        <member name="T:JetBrains.Application.Install.StaticInstallerAttribute">
            <summary>
            An attribute to mark the classes that called once to perform attribute-independent installation.
            The class must implement the <see cref="T:JetBrains.Application.Install.ITypeAttributeInstaller"/> interface.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.StaticInstallerAttribute.#ctor(JetBrains.Application.Install.InstallerVsVersionAffinity)">
            <summary>
            Creates the attribute.
            </summary>
            <param name="vsversionaffinity">Specifies the affinity of this installer to the VS version, see enum member summaries for details.</param>
        </member>
        <member name="T:JetBrains.Application.Install.TypeAttributeInstallerAttribute">
            <summary>
            An attribute to mark the classes that process the installation data written in the form of type attributes of type <see cref="P:JetBrains.Application.Install.TypeAttributeInstallerAttribute.AttributeToInstall"/> during registration and unregistration.
            The class must implement the <see cref="T:JetBrains.Application.Install.ITypeAttributeInstaller"/> interface.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.TypeAttributeInstallerAttribute.#ctor(System.Type,JetBrains.Application.Install.InstallerVsVersionAffinity)">
            <summary>
            Creates the attribute.
            </summary>
            <param name="typeAttributeToInstall">Type of the attribute for which the class marked by <see cref="T:JetBrains.Application.Install.TypeAttributeInstallerAttribute"/> should be invoked to process the installation</param>
            <param name="vsversionaffinity">Specifies the affinity of this installer to the VS version, see enum member summaries for details.</param>
        </member>
        <member name="P:JetBrains.Application.Install.TypeAttributeInstallerAttribute.AttributeToInstall">
            <summary>
            Gets the type of the attribute for which the class marked by <see cref="T:JetBrains.Application.Install.AssemblyAttributeInstallerAttribute"/> should be invoked to process the installation.
            </summary>
        </member>
        <member name="T:JetBrains.Application.License.LicenseSupportBase">
            <summary>
            Simple implementation of license support that fetches all the possible data from product <see cref="T:JetBrains.Application.Defines"/>
            </summary>
        </member>
        <member name="M:JetBrains.Application.License.ILicenseSupport.CreateLicenseData(System.String,System.String,System.String)">
            <summary>
            Creates license data using licenseKey, userName and company name. If only one type of licenses is acceptable,
            normally returns new LicenseData(...). Otherwise some additional processing should take place
            </summary>
        </member>
        <member name="M:JetBrains.Application.License.ILicenseSupport.GetLicenseAgreement(JetBrains.Application.License.LicenseType)">
            <summary>
            License agreement in rich text. NULL if no license agreement is necessary
            </summary>
        </member>
        <member name="P:JetBrains.Application.License.ILicenseSupport.ProductGuid">
            <summary>
            Guid (with braces), that is used to store Date marker
            </summary>
        </member>
        <member name="P:JetBrains.Application.License.ILicenseSupport.FreeTrialPeriod">
            <summary>
            Number of days, free trial period lasts
            </summary>
        </member>
        <member name="P:JetBrains.Application.License.ILicenseSupport.FeedbackRequestPeriod">
            <summary>
            Number of free trial days, after which feedback is requested.
            Negative value means feedback is never requested.
            </summary>
        </member>
        <member name="P:JetBrains.Application.License.ILicenseSupport.LeftDaysNotification">
            <summary>
            Identifies, when to start informing user that, his free trial
            period ends up 
            </summary>
        </member>
        <member name="P:JetBrains.Application.License.ILicenseSupport.ProductBuiltDateUsedForSubscriptionCheck">
            <summary>
            When checking subscription license we need to verify product creation time against subscription period. 
            If we just use <see cref="P:JetBrains.Application.IApplicationDescriptor.BuiltOn"/> there might be situation when version X.0 is eligible to use because issued within subscription period,
            but bugfix X.0.1 is issued when the period is over. To handle this the property is set to the date of X.0 release.
            Normally, TeamCity build parameter TC_DateTimeForSubscriptionCheck is used (<see cref="F:JetBrains.Application.Defines.DateTimeForSubscriptionCheck"/>).
            If subscription is not available one may return <see cref="F:System.DateTime.MaxValue"/>
            </summary>
        </member>
        <member name="P:JetBrains.Application.License.ILicenseSupport.ProductFamily">
            <summary>
            JetBrains license server supports ProductFamily as guid without braces !!!
            </summary>
        </member>
        <member name="P:JetBrains.Application.License.ILicenseSupport.Version">
            <summary>
            Version to request from license server. Normally it eqals to product major version * 1000
            In case of subscription use <see cref="M:JetBrains.Application.License.LicenseSupportExtension.GetLicenseServerVersionForSubscriptionCheck(JetBrains.Application.IApplicationDescriptor)"/>
            </summary>
        </member>
        <member name="T:JetBrains.Application.License.TimeBombComponent">
            <summary>
            A timebomb that renders the product unusable after a period of time.
            Makes sure Beta builds cannot be used forever.
            </summary>
        </member>
        <member name="M:JetBrains.Application.License.TimeBombComponent.ReportBetaExpired">
            <summary>
            Show UI or do whatever applicable to the environment you override this in.
            </summary>
        </member>
        <member name="P:JetBrains.Application.License.TimeBombComponent.TimeBombPeriod">
            <summary>
            <para>If <c>Null</c>, there is no timebomb in the build.</para>
            <para>A positive value denotes the period of time after the build date (<see cref="P:JetBrains.Application.IApplicationDescriptor.BuiltOn"/>) within which the product is operational. When the timeout expires, the product cannot be used anymore.</para>
            <para>Do not use non-positive time spans.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.PersistentMap.PersistentSortedMapLevelDb`2.Remove(`0)">
            <summary>    
            
            </summary>
            <param name="key"></param>
            <returns>Always returns True</returns>
        </member>
        <member name="T:JetBrains.Application.PersistentMap.UnsafeStructAsIsMarshaller`1">
            <summary>
            Does not work with generic types
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:JetBrains.Application.PlatformProduct.PlatformApplicationDescriptor">
            <summary>
            Describes the platform products. It's not 
            Currently, the platform product is of no use when run, so it just  applies to tests (populates the test environment with components).
            </summary>
        </member>
        <member name="T:JetBrains.Application.ApplicationDescriptor">
            <summary>
            Describes the product.
            The instances are spawned by the shell and populated with the assembly configuration and product edition parameters.
            </summary>
        </member>
        <member name="T:JetBrains.Application.IApplicationDescriptor">
            <summary>
            <para>For a JetBrains .NET Platform based product, describes the static <see cref="T:JetBrains.Application.PlatformObsoleteStatics"/> properties for that product.</para>
            Being static, an Application Descriptor can be created without a Shell. It's used for getting static product info without a running product, eg for packing the assemblies for the setup package, or harvesting entities like registration attributes from all of the product assemblies.
            The AD can tell product properties, like name, version, build date, and URIs, and the list of product assemblies for various product configurations. A configuration is defined elsewhere, when starting the Shell over this AD, or specified for the setup package builder to tell which DLLs should go into setup.
            To start a Shell, create an AD of the specific type, give it enough context as needed, and call its overload of <c>StartShell</c>. A Shell cannot be created directly. A newly-created Shell remembers its underlying AD and uses it to get the list of the assemblies to run for the product.
            Even though you can create an AD directly, things Visual Studio integration package and setup package builder use autodiscovery to locate the AD because they're not product-specific and cannot know the exact AD class type. An <see cref="T:JetBrains.Application.ApplicationDescriptorAttribute"/> defnies the Application Descriptor to be created.
            <para>Note: <see cref="T:JetBrains.Application.IApplicationDescriptor"/> is all-static and the same throughout all the product runs, <see cref="!:IShellStarter"/> is bound to the single product run (but multiple shell runs, if needed), so it binds to cmdline ando VS version, and the <see cref="T:JetBrains.Application.PlatformObsoleteStatics"/> is for a single Shell run (in Visual Studio, our Shell can be started and stopped multiple times within the same VS run), and its <see cref="!:PlatformObsoleteStatics.AssemblyConfigurations"/> is unique per run.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.IApplicationDescriptor.AllAssembliesResourceAssembly">
            <summary>
            Gets the assembly that contains the <see cref="P:JetBrains.Application.IApplicationDescriptor.AllAssembliesXml"/> data in the <see cref="P:JetBrains.Application.IApplicationDescriptor.AllAssembliesResourceName"/> resource.
            </summary>
        </member>
        <member name="P:JetBrains.Application.IApplicationDescriptor.AllAssembliesResourceName">
            <summary>
            Gets the name of the resource in <see cref="P:JetBrains.Application.IApplicationDescriptor.AllAssembliesResourceAssembly"/> that contains the serialized <see cref="P:JetBrains.Application.IApplicationDescriptor.AllAssembliesXml"/> data.
            </summary>
        </member>
        <member name="P:JetBrains.Application.IApplicationDescriptor.AllAssembliesXml">
            <summary>
            The “All Assemblies” XML file, deserialized.
            Contains the list of product assemblies to be loaded, as well as the configurations filters.
            </summary>
        </member>
        <member name="P:JetBrains.Application.IApplicationDescriptor.Bag">
            <summary>
            A property bag with arbitrary additional properties that bear information about the product.
            </summary>
        </member>
        <member name="P:JetBrains.Application.IApplicationDescriptor.BuiltOn">
            <summary>
            Gets the date and time when the current product was built.
            </summary>
        </member>
        <member name="P:JetBrains.Application.IApplicationDescriptor.BuyURL">
            <summary>
            Gets the URL that takes to the “Buy Product” page.
            </summary>
        </member>
        <member name="P:JetBrains.Application.IApplicationDescriptor.DoCheckLicenseReuseOverNetwork">
            <summary>
            Determines whether the product should check for multiple instances running simultaneousely over the network.
            </summary>
        </member>
        <member name="P:JetBrains.Application.IApplicationDescriptor.EvaluationURL">
            <summary>
            Gets the URL that takes to the page that provides an eval license.
            </summary>
        </member>
        <member name="P:JetBrains.Application.IApplicationDescriptor.LicenseSupport">
            <summary>
            Gets the licensing implementation.
            </summary>
        </member>
        <member name="P:JetBrains.Application.IApplicationDescriptor.ProductAboutBoxImage">
            <summary>
            <para>AboutBox for the product shows this image. Recommended minimum width: <c>200h</c>.</para>
            <para>Usually, it's the same image as the installer Welcome Page banner. So its width is 512 px.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.IApplicationDescriptor.ProductDialogHeaderImage">
            <summary>
            All license-related dialogs shows this image to ease disambiguation between products. Recommended size: <c>521x54</c>.
            </summary>
        </member>
        <member name="P:JetBrains.Application.IApplicationDescriptor.ProductBirthDate">
            <summary>
            The birth date of the product. Used for the lower copyright year and so on.
            </summary>
        </member>
        <member name="P:JetBrains.Application.IApplicationDescriptor.ProductFullName">
            <summary>
            <para>Gets the expanded marketing product name, which is typically the <see cref="P:JetBrains.Application.IApplicationDescriptor.ProductDisplayName"/> plus the marketing version number, beta/EAP/RC designation, etc.</para>
            <para>Don't use it in UI except for a few special cases, see Remarks on <see cref="P:JetBrains.Application.IApplicationDescriptor.ProductDisplayName"/> for an explanation.</para>
            </summary>
            <remarks>See Remarks on <see cref="P:JetBrains.Application.IApplicationDescriptor.ProductDisplayName"/>.</remarks>
            <example>
            <code>“Receptor 7.0.2 RC”</code>
            <code>“DotTrace Memory 1.0 Public EAP”</code>
            </example>
            <seealso cref="P:JetBrains.Application.IProductNameAndVersion.ProductName"/>
            <seealso cref="P:JetBrains.Application.IApplicationDescriptor.ProductDisplayName"/>
        </member>
        <member name="P:JetBrains.Application.IApplicationDescriptor.ProductDisplayName">
            <summary>
            <para>The user-friendly name of the product in the short form (no company, no version).</para>
            <para>The default choice if you want to mention the product name in UI.</para>
            <para>See Remarks for details.</para>
            </summary>
            <remarks>
            <para>There're three forms of the product name:</para>
            <h5>(1) <see cref="P:JetBrains.Application.IProductNameAndVersion.ProductName"/></h5>
            <para>The short technical name which follows the identifier syntax.</para>
            <para>Use for IDs, filenames, Registry access, prefixes/disambiguations, etc.</para>
            <para><b>Example</b>: <c>“Receptor”</c>, <c>“DotMemory”</c>.</para>
            <h5>(2) <see cref="P:JetBrains.Application.IApplicationDescriptor.ProductDisplayName"/></h5>
            <para>The short UI name for use in display strings. Still does not include the version number.</para>
            <para>The default choice if you want to mention the product name in UI.<br/>(NOTE: there's a special function for making window titles like “Receptor – Downloading”).</para>
            <para>Equal to <see cref="P:JetBrains.Application.IProductNameAndVersion.ProductName"/> by default, but might differ in some products<br/> (e.g. DotMemory's technical product name is <c>“DotMemory”</c>, while its display product name is <c>“DotTrace Memory”</c>).</para>
            <para><b>Example</b>: <c>“Receptor”</c>, <c>“DotTrace Memory”</c>.</para>
            <h5>(3) <see cref="P:JetBrains.Application.IApplicationDescriptor.ProductFullName"/></h5>
            <para>The expanded marketing product name for detailed UI strings which also includes the marketing version, beta/EAP/RC designation, etc.</para>
            <para>Its use is narrow (for about-boxes and alike), just compare:<br/>
            • “Receptor 7.0.2 Limited EAP – Code Cleanup” vs. “Receptor – Code Cleanup”<br/>
            • “Reset all Receptor 7.0.2 Limited EAP settings” vs. “Reset all Receptor settings”.</para>
            <para>This is the only property which exposes the marketing version of the build which, if it has more than two components, does not directly match the technical version. For example, “Receptor 7.0.2” has the service pack number of 2, while the technical version build component (the third number) is roughly the number of the nightly published.</para>
            <para><b>Example</b>: <c>“Receptor 7.0.2 RC”</c>, <c>“DotTrace Memory 1.0 Public EAP”</c>.</para>
            <para>—</para>
            <para>None of these include the Company Name, use <see cref="T:JetBrains.Application.CompanyInfo"/> to concatenate if needed for display.</para>
            </remarks>
            <example>
            <code>“Receptor”</code>
            <code>“DotTrace Memory”</code>
            </example>
            <seealso cref="P:JetBrains.Application.IProductNameAndVersion.ProductName"/>
            <seealso cref="P:JetBrains.Application.IApplicationDescriptor.ProductFullName"/>
        </member>
        <member name="P:JetBrains.Application.IApplicationDescriptor.ProductIcon">
            <summary>
            Gets the product icon.
            </summary>
        </member>
        <member name="P:JetBrains.Application.IApplicationDescriptor.ProductURL">
            <summary>
            Gets the URL that takes to the Product page.
            </summary>
        </member>
        <member name="P:JetBrains.Application.IApplicationDescriptor.UpdatesFilterUri">
            <summary>
            Gets the URI to request for the product updates, if available. //TODO:link to updates format info
            </summary>
        </member>
        <member name="P:JetBrains.Application.IApplicationDescriptor.ProductSplashScreenImage">
            <summary>
            Gets the splash screen clipart for this product.
            </summary>
        </member>
        <member name="F:JetBrains.Application.ApplicationDescriptor.myAllAssembliesXml">
            <summary>
            Caches the <see cref="T:JetBrains.Build.AllAssemblies.AllAssembliesXml"/> file, which should be loaded only once.
            </summary>
        </member>
        <member name="F:JetBrains.Application.ApplicationDescriptor.myBag">
            <summary>
            <see cref="P:JetBrains.Application.ApplicationDescriptor.Bag"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.ApplicationDescriptor.myBuiltOn">
            <summary>
            Lazy-init-caches the <see cref="P:JetBrains.Application.ApplicationDescriptor.BuiltOn"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.ApplicationDescriptor.myProductVersion">
            <summary>
            Lazy-init-caches the <see cref="P:JetBrains.Application.ApplicationDescriptor.ProductVersion"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ApplicationDescriptor.CreateInstance(JetBrains.Application.ApplicationDescriptorAttribute)">
            <summary>
            Creates an <see cref="T:JetBrains.Application.IApplicationDescriptor"/> instance based on the construction data that describes the class and ctor arguments.
            Throws on errors.
            </summary>
            <param name="attribute">The declaring attribute that has spawned this descriptor.</param>
        </member>
        <member name="M:JetBrains.Application.ApplicationDescriptor.CreateInstance(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Creates an <see cref="T:JetBrains.Application.IApplicationDescriptor"/> instance based on the attributes identifying the descriptor (looked up in <paramref name="assemblies"/>) and spawning it with universal configurations/editions.
            Such a descriptor is not suitable for runtime use, but suits for picking the static properties.
            The instance is NOT cached.
            Throws on errors.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ApplicationDescriptor.FindAttribute(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Looks up a <see cref="T:JetBrains.Application.ApplicationDescriptorAttribute"/> that instructs on how to spawn an <see cref="T:JetBrains.Application.IApplicationDescriptor"/> in the specified assemblies.
            </summary>
        </member>
        <member name="P:JetBrains.Application.ApplicationDescriptor.AllAssembliesResourceAssembly">
            <summary>
            Gets the assembly that contains the <see cref="P:JetBrains.Application.ApplicationDescriptor.AllAssembliesXml"/> data.
            </summary>
        </member>
        <member name="P:JetBrains.Application.ApplicationDescriptor.AllAssembliesResourceName">
            <summary>
            Gets the name of the resource in <see cref="P:JetBrains.Application.IApplicationDescriptor.AllAssembliesResourceAssembly"/> that contains the serialized <see cref="P:JetBrains.Application.IApplicationDescriptor.AllAssembliesXml"/> data.
            </summary>
        </member>
        <member name="P:JetBrains.Application.ApplicationDescriptor.AllAssembliesXml">
            <summary>
            The “All Assemblies” XML file, deserialized.
            Contains the list of product assemblies to be loaded, as well as the configurations filters.
            </summary>
        </member>
        <member name="P:JetBrains.Application.ApplicationDescriptor.Bag">
            <summary>
            A property bag with arbitrary additional properties that bear information about the product.
            </summary>
        </member>
        <member name="P:JetBrains.Application.ApplicationDescriptor.BuiltOn">
            <summary>
            Gets the date and time when the current product was built.
            By default, returns the assembly file modification time of the configuration assembly.
            </summary>
        </member>
        <member name="P:JetBrains.Application.ApplicationDescriptor.BuyURL">
            <summary>
            Gets the URL that takes to the “Buy Product” page.
            </summary>
        </member>
        <member name="P:JetBrains.Application.ApplicationDescriptor.DoCheckLicenseReuseOverNetwork">
            <summary>
            Determines whether the product should check for multiple instances running simultaneousely over the network.
            The default behavior is <c>True</c> when we have licensing.
            </summary>
        </member>
        <member name="P:JetBrains.Application.ApplicationDescriptor.EvaluationURL">
            <summary>
            Gets the URL that takes to the page that provides an eval license.
            </summary>
        </member>
        <member name="P:JetBrains.Application.ApplicationDescriptor.LicenseSupport">
            <summary>
            Gets the licensing implementation.
            </summary>
        </member>
        <member name="P:JetBrains.Application.ApplicationDescriptor.ProductAboutBoxImage">
            <summary>
            AboutBox for the product shows this image. Recommended minimum width: <c>200h</c>.
            </summary>
        </member>
        <member name="P:JetBrains.Application.ApplicationDescriptor.ProductDialogHeaderImage">
            <summary>
            All license-related dialogs shows this image to ease disambiguation between products. Recommended minimum width: <c>200h</c>.
            </summary>
        </member>
        <member name="P:JetBrains.Application.ApplicationDescriptor.ProductBirthDate">
            <summary>
            The birth date of the product. Used for the lower copyright year and so on.
            </summary>
        </member>
        <member name="P:JetBrains.Application.ApplicationDescriptor.ProductFullName">
            <summary>
            Gets the product full name, which is typically the <see cref="!:IApplicationDescriptor.ProductName"/> plus the short version number.
            </summary>
        </member>
        <member name="P:JetBrains.Application.ApplicationDescriptor.ProductIcon">
            <summary>
            Gets the product icon.
            </summary>
        </member>
        <member name="P:JetBrains.Application.ApplicationDescriptor.ProductName">
            <summary>
            Gets the bare product name in the shortest form (no company, no version).
            </summary>
        </member>
        <member name="P:JetBrains.Application.ApplicationDescriptor.ProductVersion">
            <summary>
            Gets the product full version.
            By default, returns the assembly version of the configuration assembly.
            </summary>
        </member>
        <member name="P:JetBrains.Application.ApplicationDescriptor.ProductSplashScreenImage">
            <summary>
            Returns the About Box image as the splash screen image by default.
            </summary>
        </member>
        <member name="P:JetBrains.Application.ApplicationDescriptor.UpdatesFilterUri">
            <summary>
            Gets the URI to request for the product updates, if available. //TODO:link to updates format info
            </summary>
        </member>
        <member name="T:JetBrains.Application.PluginSupport.CollectPluginsInProductFolders">
            <summary>
            Looks for plugins in eligible folders: product installation location, roaming or local per-user or global data folders.
            </summary>
        </member>
        <member name="M:JetBrains.Application.PluginSupport.CollectPluginsInProductFolders.GetPluginsFolderMachine(JetBrains.Application.Env.Components.ProductSettingsLocation)">
            <summary>
            Directory with per-machine plugins.
            </summary>
        </member>
        <member name="M:JetBrains.Application.PluginSupport.CollectPluginsInProductFolders.GetPluginsFoldersInUserSettings(JetBrains.Application.Env.Components.AnyProductSettingsLocation,JetBrains.Application.IProductNameAndVersion)">
            <summary>
            Directory with per-user plugins (roaming, non-roaming, per-product-version, all-versions, etc).
            </summary>
            <param name="productSettingsLocation"></param>
        </member>
        <member name="M:JetBrains.Application.PluginSupport.CollectPluginsInProductFolders.GetAllPredefinedPluginsFolders(JetBrains.Application.Env.Components.ProductSettingsLocation)">
            <summary>
            All predefined directories with plugins.
            If you'd like to add your own, create the <see cref="T:JetBrains.Application.PluginSupport.Plugin"/> descriptor with <see cref="T:JetBrains.Application.PluginSupport.DiscoverPluginsInDirectory"/> and publish them to <see cref="T:JetBrains.Application.PluginSupport.PluginsDirectory"/> for loading.
            </summary>
        </member>
        <member name="T:JetBrains.Application.PluginSupport.CollectPluginsOnCommandLine">
            <summary>
            Loads plugins from what was given on the command line: a list of filenames, or directories, or assembly names, or mixed.
            </summary>
        </member>
        <member name="F:JetBrains.Application.PluginSupport.CollectPluginsOnCommandLine.PluginCommandLineSwitch">
            <summary>
            Name of the command line switch that instructs the product to load an arbitrary DLL file as a plugin.
            </summary>
        </member>
        <member name="P:JetBrains.Application.PluginSupport.CollectPluginsOnCommandLine.IsEnabled">
            <summary>
            Override to suppress command line plugins discovery.
            </summary>
        </member>
        <member name="T:JetBrains.Application.PluginSupport.DiscoverPluginsInDirectory">
            <summary>
            Helper for creating plugins out of files/folders.
            </summary>
        </member>
        <member name="M:JetBrains.Application.PluginSupport.DiscoverPluginsInDirectory.CreatePluginsFromDirectory(JetBrains.DataFlow.Lifetime,JetBrains.Util.FileSystemPath,JetBrains.Application.IApplicationDescriptor,System.Collections.Generic.ICollection{JetBrains.Application.PluginSupport.PluginsDirectory.Record},JetBrains.Metadata.Reader.API.MetadataLoader)">
            <summary>
            Searches the directory for plugin files and creates one or multiple plugins on them.
            </summary>
            <param name="lifetime">Lifetime for the created plugin.</param>
            <param name="pathDirectory">Directory to look in, recursively.</param>
            <param name="product">The originating product that has provided the plugin.</param>
            <param name="infoRecords">Plugin discovery log entries destination.</param>
            <param name="loader">Cached loader.</param>
            <returns>Plugins found.</returns>
        </member>
        <member name="M:JetBrains.Application.PluginSupport.DiscoverPluginsInDirectory.CreatePluginsFromFileSet(JetBrains.DataFlow.Lifetime,System.Collections.Generic.IEnumerable{JetBrains.Util.JetTuple{System.String,JetBrains.Util.FileSystemPath}},JetBrains.Application.IApplicationDescriptor,System.Collections.Generic.ICollection{JetBrains.Application.PluginSupport.PluginsDirectory.Record},JetBrains.Metadata.Reader.API.MetadataLoader)">
            <summary>
            Creates one or multiple plugins from the file set.
            </summary>
            <param name="lifetime">Lifetime for plugins.</param>
            <param name="pluginfiles">List of plugin files. The string member of the tuple is the optional plugin origin hint string (command line entry, directory name, etc).</param>
            <param name="product">The originating product that has provided the plugin.</param>
            <param name="infoRecords">Log entries target.</param>
            <param name="loader">Cached loader.</param>
        </member>
        <member name="M:JetBrains.Application.PluginSupport.DiscoverPluginsInDirectory.TryGetPluginTitleFromFile(System.String,JetBrains.Util.FileSystemPath,JetBrains.Metadata.Reader.API.MetadataLoader,System.Collections.Generic.ICollection{JetBrains.Application.PluginSupport.PluginsDirectory.Record})">
            <summary>
            Checks if the plugin assembly file has any plugin title attribute in it.
            </summary>
            <param name="sPluginOrigin">Optional plugin origin string (eg command line arg, directory name, etc) — for diagnostics.</param>
            <param name="path">Plugin assembly file path.</param>
            <param name="loader">Cached loader.</param>
            <param name="infoRecords">Log entries target.</param>
            <returns><c>Null</c> on errors, <c>""</c> if there's no title in the assembly, the title otherwise.</returns>
        </member>
        <member name="T:JetBrains.Application.PluginSupport.PluginLoader">
            <summary>
            As the plugins get discovered and published in the <see cref="T:JetBrains.Application.PluginSupport.PluginsDirectory"/>, loads them into the product.
            </summary>
        </member>
        <member name="M:JetBrains.Application.PluginSupport.PluginLoader.PluginsToCatalogs(JetBrains.DataFlow.Lifetime,System.Collections.Generic.IEnumerable{JetBrains.Application.PluginSupport.Plugin})">
            <summary>
            Maintains the list of assemblies to be loaded into the product.
            Each plugin consists of one or more assemblies, or zero if the plugin is not enabled, and some of the assemblies might intersect.
            </summary>
        </member>
        <member name="T:JetBrains.Application.PluginSupport.PluginPresentation">
            <summary>
            Display info on a <see cref="T:JetBrains.Application.PluginSupport.Plugin"/>.
            </summary>
        </member>
        <member name="T:JetBrains.Application.PluginSupport.PluginsDirectory">
            <summary>
            Lists the discovered plugins, loaded or not, as well as any discovery errors or info.
            Plugins to be loaded are published here, by standard collectors like <see cref="T:JetBrains.Application.PluginSupport.CollectPluginsInProductFolders"/> and <see cref="T:JetBrains.Application.PluginSupport.CollectPluginsOnCommandLine"/>, or by you.
            </summary>
        </member>
        <member name="F:JetBrains.Application.PluginSupport.PluginsDirectory.InfoRecords">
            <summary>
            Debug and information messages on loading the plugins, like files that were not detected as plugins, errors encountered, etc. Plugin-bound messages are stored with plugins themselves.
            </summary>
        </member>
        <member name="P:JetBrains.Application.PluginSupport.PluginsDirectory.Plugins">
            <summary>
            The list of discovered plugins. Some of them might be disabled and will not thus load until enabled.
            </summary>
        </member>
        <member name="M:JetBrains.Application.PluginSupport.Plugin.#ctor(JetBrains.DataFlow.Lifetime,System.Collections.Generic.IEnumerable{JetBrains.Util.FileSystemPath},JetBrains.Application.IApplicationDescriptor,JetBrains.Application.PluginSupport.PluginPresentation,JetBrains.Metadata.Reader.API.MetadataLoader)">
            <summary>
            
            </summary>
            <param name="lifetime">Lifetime for plugin properties.</param>
            <param name="assemblyPaths">Paths to plugin assemblies.</param>
            <param name="product">The originating product that has provided the plugin.</param>
            <param name="presentation">Plugin presentation (title, version, etc), if known. Otherwise, will be collected from the assemblies.</param>
            <param name="metadataloader"><c>Null</c> if <paramref name="presentation"/> is supplied. Otherwise, optional cached metadata loader for reading assemblies.</param>
        </member>
        <member name="F:JetBrains.Application.PluginSupport.Plugin.Product">
            <summary>
            The originating product that has provided the plugin.
            </summary>
        </member>
        <member name="P:JetBrains.Application.PluginSupport.Plugin.IsEnabled">
            <summary>
            Gets or sets whether the plugin is enabled and can be loaded.
            The initial <c>Null</c> means plugin loader should use MRU enabled setting from previous run, any speicifc boolean value overrides MRU settings.
            </summary>
        </member>
        <member name="P:JetBrains.Application.PluginSupport.Plugin.Presentation">
            <summary>
            Display info on a <see cref="T:JetBrains.Application.PluginSupport.Plugin"/>.
            </summary>
        </member>
        <member name="P:JetBrains.Application.PluginSupport.Plugin.RuntimeInfoRecords">
            <summary>
            Diagnostics or errors upon loading the plugin.
            These should include runtime errors on the discovered plugin only. Any plugin discovery info should go to the global <see cref="F:JetBrains.Application.PluginSupport.PluginsDirectory.InfoRecords"/> log.
            </summary>
        </member>
        <member name="F:JetBrains.Application.PluginSupport.PluginManager.myPluginIdToStateMap">
            <summary>
            Indicates the plugin's enabled state.
            Filled in by <see cref="M:JetBrains.Application.PluginSupport.PluginManager.ReadFromXml(System.Xml.XmlElement)"/>.
            </summary>
        </member>
        <member name="P:JetBrains.Application.PluginSupport.PluginManager.PluginsDirectoryMachine">
            <summary>
            Directory with per-machine plugins.
            </summary>
        </member>
        <member name="P:JetBrains.Application.PluginSupport.PluginManager.PluginsDirectoryUserLocal">
            <summary>
            Directory with per-user plugins that aren't roamed within a network.
            </summary>
        </member>
        <member name="P:JetBrains.Application.PluginSupport.PluginManager.PluginsDirectoryUserRoaming">
            <summary>
            Directory with per-user plugins that would roam within a network.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Extentions.ISettingsCache.GetData``1(JetBrains.DataFlow.Lifetime,JetBrains.Application.Settings.Extentions.ICachedSettingsReader{``0})">
            <summary>
            Data is cached by reader instance equality
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.SettingsStorageFactory.CreateStorage(JetBrains.DataFlow.Lifetime,System.String,JetBrains.Util.ILogger)">
            <summary>
            Creates the currently-preferred impl of the storage.
            </summary>
            <param name="lifetime"></param>
            <param name="name"></param>
            <param name="logger"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:JetBrains.Application.Settings.Storage.SettingsStorageFlat" -->
        <member name="T:JetBrains.Application.Settings.Storage.ISettingsStorageSerializable">
            <summary>
            A contract to require both interfaces.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.ISettingsStorage">
            <summary>
            Interface to the key-value settings storage (representing a physical storage on disk or a file from the Web).
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.ISettingsStorage.Get(JetBrains.Application.Settings.Storage.KeyPathComponents,JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext)">
            <summary>
            Tries to get the value of the key. 
            </summary>
            <param name="key">Key.</param>
            <param name="transaction"></param>
            <returns>Either a value of one of the predefined types (<see cref="T:JetBrains.Application.Settings.Storage.SettingsStorageHelpers.StorageValueTypeId"/>), or <c>Null</c> if the value for this key is not set.</returns>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.ISettingsStorage.Set(JetBrains.Application.Settings.Storage.KeyPathComponents,System.Object,JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext)">
            <summary>
            Sets or resets the value of the key.
            </summary>
            <param name="key">Key.</param>
            <param name="value">Either a value of one of the predefined types (<see cref="T:JetBrains.Application.Settings.Storage.SettingsStorageHelpers.StorageValueTypeId"/>) to assign, or <c>Null</c> to reset the value of the given key.</param>
            <param name="transaction"></param>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.ISettingsStorage.AdviseChange(JetBrains.DataFlow.Lifetime,System.Action{JetBrains.Application.Settings.Storage.SettingsStorageChangeArgs},JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext)">
            <summary>
            Advises changes to the stored values.
            A change happens both when setting a new value thru <see cref="M:JetBrains.Application.Settings.Storage.ISettingsStorage.Set(JetBrains.Application.Settings.Storage.KeyPathComponents,System.Object,JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext)"/> and when synchronizing to external changes to the disk storage.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.ISettingsStorage.Enum(JetBrains.Application.Settings.Storage.KeyPathComponents,System.Int32,System.Action{JetBrains.Application.Settings.Storage.KeyPathComponents,System.Object},JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext)">
            <summary>
            Enumerates keys and values in the storage.
            The lock is held throughout the whole enumeration process, so you should minimize your callback activities as much as possible.
            </summary>
            <param name="root">The root key from which the enumeration should start. Its children or subtree will be enumerated. To enumerate the whole storage, pass in an empty (but non-<c>Null</c>) key path list here. This function MIGHT modify the key path list in the <paramref name="root"/> on each step by appending the child/ancestor key path components to it. The path prefix which you pass in is never modified though. Upon function exit, the original value is restored.</param>
            <param name="nTakeChildLevelOnly">If nonzero, ancestors of the specified level will be enumerated (such keys whose key path is the <paramref name="root"/> plus one <paramref name="nTakeChildLevelOnly"/> components). If <c>0</c>, the whole subtree will be enumerated, which includes the <paramref name="root"/> itself (if there's a value for it in the storage), and any ancestors (to whom <paramref name="root"/> path is a prefix).</param>
            <param name="FCallback">Your callback which is invoked on every iteration for each key-value pair encountered in the enumeration.
            The callback parameters are the key and non-<c>Null</c> value of the item. Note that the implementation MIGHT reuse the path you passed in as <paramref name="root"/> to be modified on each iteration to point to the current key path. You should not be performing lengthy operations or calling the storage recursively within this callback because the storage lock is held during the whole operation.</param>
            <param name="transaction"></param>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.ISettingsStorage.AttachToTransaction(JetBrains.DataFlow.Lifetime,JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext,JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext)">
            <summary>
            Makes sure this storage is attached to the specific transaction.
            This method only guarantees that read-repeatable within the transaction will not see any data written to the storage after this point.
            </summary>
            <param name="lifetime"></param>
            <param name="transactionToAttach">Transaction context in which this storage should work in transactional fashion.</param>
            <param name="transactionOuter">The current transaction context, if we're opening a nested transaction.</param>
            <returns>Transaction data of this storage.</returns>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.ISettingsStorage.EraseSubtree(JetBrains.Application.Settings.Storage.KeyPathComponents,JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext)">
            <summary>
            Erases the given key, as well as its whole subtree.
            Pass in an empty list of key components to erase the whole storage contents.
            </summary>
            <param name="root"></param>
            <param name="transaction"></param>
        </member>
        <member name="P:JetBrains.Application.Settings.Storage.ISettingsStorage.Name">
            <summary>
            Gets the user-friendly storage name. This is used for telling storages apart in the mount points list
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageEntriesSerialization">
            <summary>
            The basic serialization interface for the default storage implementation.
            Works right on in-memory representation of the storage entries.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon.GetInMemoryChangesDiffCopy">
            <summary>
            Gets the list of entries changed in-memory (<c>Null</c> value means it should be reset).
            Used mostly for diagnostics needs.
            Creates a copy of the dictionary (so use sparingly), because the actual dictionary access is lock-protected.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon.Name">
            <summary>
            Gets the user-friendly storage name. This is used for telling storages apart in the mount points list
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon.IsDirty">
            <summary>
            Gets whether the storage has any dirty (in-memory) changes pending for save. Free-threaded.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon.IsEmpty">
            <summary>
            Gets if there're no entries in the storage. This includes both entries-from-stream and dirty entries.
            This allows for optimized behavior if we've got nothing to save.
            Yields <c>Null</c> when it's a bit too expensive to calculate the result.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageEntriesSerialization.Load(JetBrains.Application.Settings.Storage.SettingsStorageLoadFlag,System.Func{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            Loads entries into the storage.
            If the storage has any in-memory changes, they remain intact.
            </summary>
            <param name="flag"></param>
            <param name="FReadEntries">Storage calls this function when it needs to read the entries. This makes sure it sets any applicable locks around the read operation.</param>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageEntriesSerialization.Save(System.Func{System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean})">
            <summary>
            Saves the entries from the storage.
            </summary>
            <param name="FSave">Storage calls this function on the exact entries to be saved. The return value indicates whether the save succeeds (if the storage can assume in-memory diff applied).</param>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.SettingsStorageFlat.myDiffToStream">
            <summary>
            <para><see cref="F:JetBrains.Application.Settings.Storage.SettingsStorageFlat.myEntriesInStream"/> diff: what should be applied to the settings storage on save to ensure merging of the conflicts.</para>
            <para>Protected with <see cref="F:JetBrains.Application.Settings.Storage.SettingsStorageFlat.myLockDiffToStream"/>.</para>
            <para>Set to <c>Null</c> when empty to enabled lock-free checks for the “no-dirty” state.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.SettingsStorageFlat.myEntriesInStream">
            <summary>
            <para>The settings storage entries, as read from the persistent storage.</para>
            <para>Maps keys to values.</para>
            <para>In-memory changes are stored in <see cref="F:JetBrains.Application.Settings.Storage.SettingsStorageFlat.myDiffToStream"/> until persisted to the storage.</para>
            <para>Protected with the <see cref="F:JetBrains.Application.Settings.Storage.SettingsStorageFlat.myLockEntriesInStream"/>.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.SettingsStorageFlat.myLockSerialization">
            <summary>
            Held while a save or load process is in progress to avoid runnnig one more in parallel.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.SettingsStorageFlat.myInterned">
            <summary>
            Interns string contents of the path components.
            Locked with <see cref="F:JetBrains.Application.Settings.Storage.SettingsStorageFlat.myLockDiffToStream"/> (rational: we write-access diff-to-stream more often than entries-in-stream, and we do not need interneds apart from writing anyting =&gt; better reuse that lock).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.SettingsStorageFlat.myCacheChildLevel2Enumerations">
            <summary>
            <para>Caches enumeration of level-2 children (Enum() with nTakeChildLevelOnly=2, which is a common case for enumerating settings store indexed keys/entries).</para>
            <para>Locked with <see cref="F:JetBrains.Application.Settings.Storage.SettingsStorageFlat.myLockCacheChildLevel2Enumerations"/>.</para>
            <para>Invalidated by any write to the second level or any massive change to storage, filled by Enum() when it encounters a cache miss.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.SettingsStorageFlat.myLockCacheChildLevel2Enumerations">
            <summary>
            Locks access to the dictionary only, its member classes have their own locking.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.SettingsStorageFlat.CommitDiffToStream(System.Collections.Generic.Dictionary{JetBrains.Application.Settings.Storage.KeyPathComponents,System.Object},System.Collections.Generic.Dictionary{JetBrains.Application.Settings.Storage.KeyPathComponents,System.Object})">
            <summary>
            <para>Commits the diffs dictionary to the main dictionary, respecting recorded adds and removes.</para>
            <para>Normally is non-throwing.</para>
            </summary>
            <param name="main">Main dictionary. Will be overwritten by commit with changes from <paramref name="diff"/>.</param>
            <param name="diff">Might be <c>Null</c> if there's no diff yet.</param>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.SettingsStorageFlat.SetBatchWithDiffWriteLocked(System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{JetBrains.Application.Settings.Storage.KeyPathComponents,System.Object}},System.Collections.Generic.List{JetBrains.Application.Settings.Storage.KeyPathComponents})">
            <summary>
            Does a batch-set to the out-of-transaction storage when committing a transaction.
            Writer lock on diff-to-stream must be held by the caller.
            </summary>
            <param name="items">Transaction changes to apply.</param>
            <param name="keysChanged">Keys which were changed by the batch-change must be written here.</param>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.ISettingsStorageTransactionData">
            <summary>
            An interface for settings storage transaction to talk to the storage in its transaction.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.ISettingsStorageTransactionData.Commit">
            <summary>
            Commits all of the in-transaction modifications.
            The transaction remains operable until its lifetime terminates.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.ISettingsStorageTransactionData.Revert">
            <summary>
            Reverts all of the in-transaction modifications.
            The transaction remains operable until its lifetime terminates.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.Storage.ISettingsStorageTransactionData.Storage">
            <summary>
            <para>Gets the storage this transaction has been created for.</para>
            <para>Note that even though new <see cref="T:JetBrains.Application.Settings.Storage.ISettingsStorage"/> objects might be created to server the transaction, this is always the same object as the out-of-all-transactions storage.</para>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:JetBrains.Application.Settings.Storage.SettingsStorageFlat.TransactionData.InTransactionStorage" -->
        <member name="F:JetBrains.Application.Settings.Storage.SettingsStorageFlat.TransactionData.OuterTransactionStorage">
            <summary>
            In case of nested transaction, the nearest outer storage (storage from the parent transaction). Otherwise, <see cref="F:JetBrains.Application.Settings.Storage.SettingsStorageFlat.TransactionData.OutOfTransactionStorage"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.SettingsStorageFlat.TransactionData.OutOfTransactionStorage">
            <summary>
            The same storage, but outside all transaction. That's the interface which the outer world uses for accessing the storage.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.SettingsStorageLoadFlag">
            <summary>
            When storage is loaded from the external source, varies its behavior.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.SettingsStorageLoadFlag.FirstTime">
            <summary>
            The storage contents is dropped, no events are fired for newly-loaded items.
            Good for first-time loading of the storage.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.SettingsStorageLoadFlag.SecondTime">
            <summary>
            Applies diff from the source, fires all of the events appropriate.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.DefaultFileStorages.GlobalPerProductStorage">
            <summary>
            User settings: the storage serving the Global context, specific to the current product.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.FileSettingsStorageProviderBase">
            <summary>
            Helper class for registering a single file-based storage and a single mounting point with the Settings Store.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.FileSettingsStorageProviderBase.XmlFileStorage">
            <summary>
            The file-based storage (along with serialization) created by this component. Its <see cref="F:JetBrains.Application.Settings.Storage.Persistence.XmlFileSettingsStorage.Storage"/> property is promoted to the <see cref="T:JetBrains.Application.Settings.Store.Implementation.SettingsStore"/> under the <see cref="F:JetBrains.Application.Settings.Storage.FileSettingsStorageProviderBase.MountPoint"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.FileSettingsStorageProviderBase.MountPoint">
            <summary>
            The mounting point for the storage created by this component and promoted to the <see cref="T:JetBrains.Application.Settings.Store.Implementation.SettingsStore"/>.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.DefaultFileStorages.GlobalAllProductsStorage">
            <summary>
            User settings: the storage serving the Global context, for all the products.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.DefaultFileStorages.GlobalSettings">
            <summary>
            Helpers for working with global settings layers (per-product and all-products).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.DefaultFileStorages.GlobalSettings.AllProductsLayerId">
            <summary>
            <para>Identifies the Defaults-for-All-Products <see cref="T:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer">user-friendly settings layer</see>.</para>
            <para>To get the layer, obtain or create a <see cref="T:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayers"/> instance and ask it for the layer by its ID.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.DefaultFileStorages.GlobalSettings.ProductGlobalLayerId">
            <summary>
            <para>Identifies the This-Product-Global-Settings <see cref="T:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer">user-friendly settings layer</see>.</para>
            <para>To get the layer, obtain or create a <see cref="T:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayers"/> instance and ask it for the layer by its ID.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.DefaultFileStorages.GlobalSettings.BindForWritingToAllProducts">
            <summary>
            Binds <see cref="T:JetBrains.Application.Settings.Store.Implementation.SettingsStore"/> to the application-wide context so that writes were SmartSaved to the All-Products Settings layer (affecting any higher-priority writable layers if they contain conflicting values).
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.DefaultFileStorages.GlobalSettings.BindForSmartWritingToReadonlyContext(JetBrains.Application.Settings.ISettingsStore,JetBrains.Application.Settings.ISettingsStorageMountPoint,JetBrains.Application.Settings.ContextRange)">
            <summary>
            Helper function for binding to a smart-save context which turns the specified readonly mount into a writable one and specifies it as the last-wide-context-mount (which means that no writes will go to lower-priority layers, and higher-priority layers will be updated to agree to the setting being written).
            </summary>
            <param name="store"></param>
            <param name="mountReadonly"></param>
            <param name="contextrangeWithReadonlyMount"></param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.ContentSubstring">
            <summary>
            Packs character ranges in string content of a <see cref="T:JetBrains.Application.Settings.Storage.KeyPathComponent"/> into a single DWORD.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.ContentSubstring.RawOffset">
            <summary>
            Offset of content.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.ContentSubstring.RawLengthPlus1">
            <summary>
            Length of content, plus <c>1</c>, if defined.
            If <c>0</c>, then the content length is unlimied (take up to the end). This is the default value in the structure.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.ContentSubstring.RawValue">
            <summary>
            The union of offset and length.
            <c>0</c> means the substring is not limited and the content should be taken as the whole string.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.Storage.ContentSubstring.IsWhole">
            <summary>
            Whether the whole content should be taken.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.Storage.ContentSubstring.Whole">
            <summary>
            Gets a content substring for getting whole content.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.KeyPathComponent">
            <summary>
            A single entry in the storage key path contained in <see cref="T:JetBrains.Application.Settings.Storage.KeyPathComponents"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.KeyPathComponent.Content">
            <summary>
            String content providing the path component as a substring.
            If <c>Null</c>, then this object is in an uninitialized state (semantically <c>Null</c>).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.KeyPathComponent.ContentSubstring">
            <summary>
            Defines which substring of the <see cref="F:JetBrains.Application.Settings.Storage.KeyPathComponent.Content"/> should be used.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.KeyPathComponent.ContentPrefix">
            <summary>
            Optional character prefix of the path component, prepended to the substring of <see cref="F:JetBrains.Application.Settings.Storage.KeyPathComponent.Content"/>.
            <c>0</c> for no prefix.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.KeyPathComponent.GetPathComponentSlow">
            <summary>
            Renders the content substring and the prefix as a string. Might do substrings and concatenation, so is possibly slow.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.KeyPathComponent.Write(System.Text.StringBuilder)">
            <summary>
            Writes self into a stringbuilder. Does not create any intermediate strings, but writing to a stringbuilder is not too good in mem/perf anyway.
            </summary>
            <param name="sb"></param>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.KeyPathComponent.AsNormalized(JetBrains.Application.Settings.Storage.KeyPathComponent)">
            <summary>
            Normalizes the component for interning, so that the optimal representation of the component were stored.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.KeyPathComponents">
            <summary>
            A list of <see cref="T:JetBrains.Application.Settings.Storage.KeyPathComponent"/> objects which constitute a settings storage key path.
            The path is operated as splitted into <see cref="F:JetBrains.Application.Settings.Storage.KeyPathComponents.PathSeparatorChar"/>-splitted components because in most use cases it's composed from such components based on the context of access.
            When path originates as components, this allows to avoid concatenating strings for lookup.
            When path originates as a whole string, the components are pointing into character ranges within that string instead of actually creating substrings, so this scenario does not have memory penalty anyway.
            This class is a typed wrapper for a list of components.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.KeyPathComponents.Components">
            <summary>
            The list of components. Might be <c>Null</c> when this struct is just created, so take care.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.KeyPathComponents.Parse(System.String)">
            <summary>
            Parses a set of components over a string.
            There is always at least one component.
            Leading and trailing slashes are ignored, any other slashes separate components, even if zero-length.
            Components are pointing into character ranges within <paramref name="s"/> instead of creating substrings.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.KeyPathComponents.ParseInterned(System.String,JetBrains.Util.DataStructures.ChunkHashSet{JetBrains.Application.Settings.Storage.KeyPathComponent})">
            <summary>
            Parses a set of components over a string following some invariants: certain chars are prefetched into prefix, and the strings are interned.
            There is always at least one component.
            Leading and trailing slashes are ignored, any other slashes separate components, even if zero-length.
            Components are created over individual strings, which are interned.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.KeyPathComponents.RenderToStringSlow(System.Boolean)">
            <summary>
            The reverse to <see cref="M:JetBrains.Application.Settings.Storage.KeyPathComponents.Parse(System.String)"/>, should not be using in practice because it actually writes everything into a string-builder.
            Leading slash is an option, trailing slash is never added.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.KeyPathComponents.Intern(JetBrains.Util.DataStructures.ChunkHashSet{JetBrains.Application.Settings.Storage.KeyPathComponent})">
            <summary>
            Interns strings in all path components.
            </summary>
            <param name="interneds"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.KeyPathComponents.Clone">
            <summary>
            Even though this wrapper is a structure (to save on allocating an object), the list of path components inside is a reference object, so it will be shared when this value is passed along.
            If you'd like to persist the value you have received, you have to clone the list.
            </summary>
            <returns></returns>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.Substring">
            <summary>
            A structure which adds one DWORD to the string pointer to identify a substring within a string without acyually producing the truncated string.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Substring.CommitToString">
            <summary>
            Applies offset and length to get the substring.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.Persistence.FileSettingsStorageBehavior">
            <summary>
            Modifies behavior of the settings storages on the filesystem.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.FileSettingsStorageBehavior.SaveToDiskSuppression">
            <summary>
            Add a token here to prevent file settings storages from being saved to disk.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.FileSettingsStorageBehavior.DiskOperationSuppression">
            <summary>
            Add a token here to prevent file settings storages from being loaded from disk.
            This also suppresses save because saving a non-loaded storage would destroy the data.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.FileSettingsStorageBehavior.IsDiskOperationAllowed">
            <summary>
            You should not be loading from disk or saving to disk if this is <c>False</c>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.FileSettingsStorageBehavior.IsSaveToDiskAllowed">
            <summary>
            You should not be saving to disk if this is <c>False</c>. Note that when <see cref="F:JetBrains.Application.Settings.Storage.Persistence.FileSettingsStorageBehavior.IsDiskOperationAllowed"/> gets <c>False</c>, this property also gets <c>False</c> automatically.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.FileSettingsStorageBehavior.Logger">
            <summary>
            All settings-related logging should go into this logger.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.FileSettingsStorageBehavior.QueryEditFile(JetBrains.Util.FileSystemPath)">
            <summary>
            <para>Request environment (like integrated SCC in the VS) if the file can be modified.</para>
            <para>Can only be called on the main thread.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.Persistence.FileSettingsStorageBehavior.IFileSettingsStorageBehaviorProvider">
            <summary>
            Allows to publish behavior flag from your component instead of adding them to <see cref="T:JetBrains.Application.Settings.Storage.Persistence.FileSettingsStorageBehavior"/>. This way, your class is implicitly imported into <see cref="T:JetBrains.Application.Settings.Storage.Persistence.FileSettingsStorageBehavior"/> rather than the other way, which guarantees that all other clients of <see cref="T:JetBrains.Application.Settings.Storage.Persistence.FileSettingsStorageBehavior"/> get your all-time suppressions from the very beginning.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.FileSettingsStorageBehavior.IFileSettingsStorageBehaviorProvider.Bind(JetBrains.DataFlow.Lifetime,JetBrains.Application.Settings.Storage.Persistence.FileSettingsStorageBehavior)">
            <summary>
            Do the modifications to the behavior in this method, or remember the value to manipulate further on your state changes.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.FileSettingsStorageBehavior.IFileSettingsStorageBehaviorProvider.QueryEditFile(JetBrains.Util.FileSystemPath)">
            <summary>
            <para>Request environment (like integrated SCC in the VS) if the file can be modified.</para>
            <para>Can only be called on the main thread.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext">
            <summary>
            <para>Denotes a transaction opened over a group of <see cref="T:JetBrains.Application.Settings.Storage.ISettingsStorage"/> objects.</para>
            <para>To create a new transaction, you create an instance of this interface and add storages to it (or access storages passing them the new context, which also adds them to the transaction).</para> 
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext.AttachStorages(System.Collections.Generic.IEnumerable{JetBrains.Application.Settings.Storage.ISettingsStorage})">
            <summary>
            <para>Adds storages to the transaction. It's OK to pass storages which are already in this transaction, or to pass the same storage multiple times.</para>
            <para>Calling storage APIs with this transaction context without adding them to the transaction first is also OK, but in such a case the read-repeatable isolation starts working upon the fist call. Invoking this method on all the storages of interest begins read-repeatable on them.</para>
            </summary>
            <param name="storages"></param>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext.RevertAllStorages">
            <summary>
            Reverts all of the in-transaction modifications.
            The transaction remains operable until its lifetime terminates.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext.CommitAllStorages">
            <summary>
            Commits all of the in-transaction modifications.
            The transaction remains operable until its lifetime terminates.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext.GetTransactionData``1(JetBrains.Application.Settings.Storage.ISettingsStorage)">
            <summary>
            Helper method for the storages themselves. Gives them the per-storage-per-transaction data associated with this transaction.
            </summary>
            <typeparam name="TData"></typeparam>
            <param name="storage"></param>
            <returns></returns>
        </member>
        <member name="P:JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext.Name">
            <summary>
            A name to tell transactions apart.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.SettingsStorageProvidersCollection">
            <summary>
            <para>Normally, you should export <see cref="T:JetBrains.Application.Settings.IProvider`1"/> interfaces of <see cref="T:JetBrains.Application.Settings.Storage.ISettingsStorage"/> and <see cref="T:JetBrains.Application.Settings.ISettingsStorageMountPoint"/> on your component so that they became available to the Settings Store.</para>
            <para>In case this is undesirable, those storages and mounts can be added to the items collections on this class to be exposed on behalf of this class.</para>
            </summary>
            <remarks>Currently, this is the only way to expose storages/mounts from child containers (like Solution/Project) to the shell-level container, because child containers won't be traversed for interfaces.</remarks>
        </member>
        <member name="P:JetBrains.Application.Settings.Storage.SettingsStorageProvidersCollection.Storages">
            <summary>
            Live collection of storages. Exposed to the shell-level component container.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.Storage.SettingsStorageProvidersCollection.MountPoints">
            <summary>
            Live collection of mounting points. Exposed to the shell-level component container.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.SettingsStorageTransactionContext">
            <summary>
            Default implementation for <see cref="T:JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.SettingsStorageTransactionContext.#ctor(JetBrains.DataFlow.Lifetime,System.String,JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext,JetBrains.Util.ILogger)">
            <summary>
            Creates a new empty transaction context without storages in it. You may call <see cref="M:JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext.AttachStorages(System.Collections.Generic.IEnumerable{JetBrains.Application.Settings.Storage.ISettingsStorage})"/> then (see method documentation).
            </summary>
            <param name="lifetime">Transaction lifetime. All of the uncommitted changes will be reverted. It's not necessary to call <see cref="M:JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext.RevertAllStorages"/> explicitly.</param>
            <param name="name"><see cref="P:JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext.Name"/>.</param>
            <param name="transactionOuter">If this is a nested transaction, identifies the outer transaction.</param>
            <param name="logger"></param>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.SettingsStorageTransactionContext.myMapStorageToTransactionData">
            <summary>
            Copy-on-write, so has lock-free read access.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.SettingsStorageHelpers.AssertValidLocalName(System.String)">
            <summary>
            The storage key string (full name) is a slash-separated list of local names. Each local name must comply with the identified rules (Ll,Lu,Lt,Lo,Lm,Nd,Pc).
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.SettingsStorageHelpers.IsValidLocalName(System.String,JetBrains.Util.OnError)">
            <summary>
            The storage key string (full name) is a slash-separated list of local names. Each local name must comply with the identified rules (Ll,Lu,Lt,Lo,Lm,Nd,Pc).
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.SettingsStorageHelpers.ValueEquals(System.Object,System.Object)">
            <summary>
            <para>Value “equals” to take possible byte arrays into account.</para>
            <para>Possible raw storage value types include a few primitive POD types, strings, and byte arrays. The latter need some special Equals handling.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.SettingsStorageHelpers.ResolveAutoSerializer(JetBrains.Application.Settings.SettingsStoreSerializerType,System.String)">
            <summary>
            If the serializer choice (<paramref name="serializer"/>) is <see cref="F:JetBrains.Application.Settings.SettingsStoreSerializerType.Auto"/>, picks a specific serializer based on the actual value type (<paramref name="sTypeFullName"/>). Otherwise, returns the serializer choice AS IS.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.SettingsStorageHelpers.GetSettingsStorageSerializedType(System.String,JetBrains.Application.Settings.SettingsStoreSerializerType)">
            <summary>
            <para>Gets the type by which this entry would be represented in the settings key-value storage.</para>
            <para>The settings store only supports primitive types; complex ones are serialized, and their storage type depends on the particular serializer used.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.SettingsStorageHelpers.CoerceEntryDefaultValueToRuntimeType(System.Object,System.Type,JetBrains.Util.ILogger)">
            <summary>
            <para>When a value has to be specified on an attribute, its type is limited to primitive types. Also, the primitive types might not match if an integer is specified where a floating-point type is expected.</para>
            <para>Conversion logic: basically, it's the <see cref="M:JetBrains.Extension.TypeEx.CoercePrimitiveValueToType(System.Object,System.Type,JetBrains.Util.ILogger)"/>, but with the addition that the default value for a string is <c>""</c> instead of <c>NULL</c> (because generally settings entries only store non-<c>NULL</c> values).</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.SettingsStorageHelpers.GetStorageDefaultValue(JetBrains.Application.Settings.Storage.SettingsStorageHelpers.StorageValueTypeId)">
            <summary>
            Gets an object with a default non-<c>Null</c> value for the given storage type (e.g. it'd be an empty string and an empty blob instead of <c>Null</c>s).
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Logging.ISettingsLogger">
            <summary>
            <para>Gets the logger to be used within the Settings subsystem.</para>
            <para>Assertions and algorithm consistency failures are reported to the central logging system immediately, while the outer-world and user-data exceptions are considered nonfatal and somewhat not quite unexpected in the real life, so they're stored for reading on request.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.Logging.ISettingsLogger.Logger">
            <summary>
            <para>Gets the logger to be used within the Settings subsystem.</para>
            <para>Assertions and algorithm consistency failures are reported to the central logging system immediately, while the outer-world and user-data exceptions are considered nonfatal and somewhat not quite unexpected in the real life, so they're stored for reading on request.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Logging.SettingsLogging">
            <summary>
            Intercepts all of the exceptions in the Settings subsystem and treats them specially.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.Logging.SettingsLogging.CollectedSettingsExceptions">
            <summary>
            <para>Gets the logger which is collecting outer-world failures in exceptions (like invalid data file format). </para>
            <para>Note that, unlike <see cref="P:JetBrains.Application.Settings.Logging.ISettingsLogger.Logger"/>, this member is not overridable. If an inheritor is replacing the logger, its exceptions will not be tracked by this object.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Logging.WrapLoggerForSettings">
            <summary>
            When you're passing your own logger to the Settings subsystem, wraps it and exposes as the proper interface.
            </summary>
        </member>
        <member name="T:JetBrains.Application.src.Settings.ContextBoundSettingsStore">
            <summary>
            <para>Provides access to the <see cref="P:JetBrains.Application.src.Settings.ContextBoundSettingsStore.SettingsStore"/> in terms of <see cref="T:JetBrains.Application.Settings.SettingsEntry"/>/<see cref="T:JetBrains.Application.Settings.SettingsKey"/> API idioms, and in a specific context (global, per-solution, etc).</para>
            <para>Read operations consider settings coming from all of the “parent” contexts (for example, solution context includes global settings).</para>
            <para>Write operations would always contribute to the shallowest context possible. In most cases you should use the SmartSave feature through the <see cref="!:IBiContextBoundSettingsStore"/> interface.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.IContextBoundSettingsStore">
            <summary>
            Operates the same <see cref="T:JetBrains.Application.Settings.SettingsEntry"/>/<see cref="T:JetBrains.Application.Settings.SettingsKey"/> API idioms as <see cref="P:JetBrains.Application.Settings.IContextBoundSettingsStore.SettingsStore"/>, but is bound to the specific context (which is defined by <see cref="T:JetBrains.Application.Settings.Store.Implementation.SettingsStorageOnMountPoints"/> with specific mounts selected).
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.IContextBoundSettingsStore.GetValue(JetBrains.Application.Settings.SettingsScalarEntry,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>
            <para>Gets the value of a non-indexed settings entry.</para>
            <para>Note that you will always get a meaningful value (the entry default value), even if the entry value has not been set, or if the entry parent key does not exist (if there's no instance for such indexed key index). If you're reading entries of an indexed key or its ancestors, verify that key instance exists first.</para>
            </summary>
            <param name="entry">The settigs entry whose value is to be read.</param>
            <param name="keyIndices">If this entry is parented by one or more indexed keys, the indices to those keys. It is an error to have an index omitted for an indexed key.</param>
            <returns>The value, as set in the highest-priority storage which is not restricted for overriding. The settings entry default value otherwise (<c>Null</c> if not available).</returns>
        </member>
        <member name="M:JetBrains.Application.Settings.IContextBoundSettingsStore.GetValues(System.Collections.Generic.IList{JetBrains.Application.Settings.SettingsScalarEntry},System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>
            Executes <see cref="M:JetBrains.Application.Settings.IContextBoundSettingsStore.GetValue(JetBrains.Application.Settings.SettingsScalarEntry,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})"/> for a series of entries in a row, which has performance benefits over getting them one by one.
            All of the entries must belong to the same key.
            For all details, see <see cref="M:JetBrains.Application.Settings.IContextBoundSettingsStore.GetValue(JetBrains.Application.Settings.SettingsScalarEntry,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})"/>.
            </summary>
            <param name="entries">Entries of the single key.</param>
            <param name="keyIndices">If this entry is parented by one or more indexed keys, the indices to those keys. It is an error to have an index omitted for an indexed key.</param>
            <returns>An array of values of the same length as <see cref="!:entries"/> where each value corresponds to the entry at the same index. See <see cref="M:JetBrains.Application.Settings.IContextBoundSettingsStore.GetValue(JetBrains.Application.Settings.SettingsScalarEntry,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})"/> for details on the entry values returned.</returns>
        </member>
        <member name="M:JetBrains.Application.Settings.IContextBoundSettingsStore.SetValue(JetBrains.Application.Settings.SettingsScalarEntry,System.Object,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>
            <para>Sets the value of a non-indexed settings entry.</para>
            </summary>
            <param name="entry">The settigs entry whose value is to be written.</param>
            <param name="value">The value to be written. Must be of the CLR type specified in the settings entry.</param>
            <param name="keyIndices">If this entry is parented by one or more indexed keys, the indices to those keys. It is an error to have an index omitted for an indexed key.</param>
        </member>
        <member name="M:JetBrains.Application.Settings.IContextBoundSettingsStore.ResetValue(JetBrains.Application.Settings.SettingsScalarEntry,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>
            <para>Resets the value of a non-indexed settings entry in the highest-priority storage. It will have the value in the next storage or the entry default value.</para>
            </summary>
            <param name="entry">The settigs entry whose value is to be read.</param>
            <param name="keyIndices">If this entry is parented by one or more indexed keys, the indices to those keys. It is an error to have an index omitted for an indexed key.</param>
        </member>
        <member name="M:JetBrains.Application.Settings.IContextBoundSettingsStore.GetIndexedValue(JetBrains.Application.Settings.SettingsIndexedEntry,System.Object,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>
            <para>Gets the value of an indexed settings entry.</para>
            </summary>
            <param name="entry">The settigs entry, the value of whose indexed instance is to be read.</param>
            <param name="entryIndex">An index to the indexed entry instance.</param>
            <param name="keyIndices">If this entry is parented by one or more indexed keys, the indices to those keys. It is an error to have an index omitted for an indexed key.</param>
            <returns>The value, as set in the highest-priority storage which is not restricted for overriding. The settings entry default value otherwise (<c>Null</c> if not available).</returns>
        </member>
        <member name="M:JetBrains.Application.Settings.IContextBoundSettingsStore.SetIndexedValue(JetBrains.Application.Settings.SettingsIndexedEntry,System.Object,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object},System.Object)">
            <summary>
            <para>Sets the value of an indexed settings entry.</para>
            </summary>
            <param name="entry">The settigs entry, the value of whose indexed instance is to be written.</param>
            <param name="entryIndex">An index to the indexed entry instance.</param>
            <param name="keyIndices">If this entry is parented by one or more indexed keys, the indices to those keys. It is an error to have an index omitted for an indexed key.</param>
            <param name="value">The value to be written. Must be of the CLR type specified in the settings entry.</param>
        </member>
        <member name="M:JetBrains.Application.Settings.IContextBoundSettingsStore.RemoveIndexedValue(JetBrains.Application.Settings.SettingsIndexedEntry,System.Object,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>
            <para>Removes the value of an indexed settings entry.</para>
            </summary>
            <param name="entry">The settigs entry, whose indexed instance is to be removed.</param>
            <param name="entryIndex">An index to the indexed entry instance.</param>
            <param name="keyIndices">If this entry is parented by one or more indexed keys, the indices to those keys. It is an error to have an index omitted for an indexed key.</param>
        </member>
        <member name="M:JetBrains.Application.Settings.IContextBoundSettingsStore.CreateIndexedKey(JetBrains.Application.Settings.SettingsIndexedKey,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>
            <para>Ensures that the instance of an indexed key is marked as created in the highest-priority storage of the current context.</para>
            <para>This accounts for these two basic scenarios:</para>
            <para>• Create an instance of the key which has all of its entries in their default values (without setting any entries on the key).</para>
            <para>• Mark an instance of an indexed key inherited from a lower-priority storage as defined in this higher-priority storage so that it were available even when the lower-priority storage is removed.</para>
            <para>In most other cases, like when you're setting entries on an indexed key, the indexed key instance will be reported as existing in the current combination of layers (the existence status might be coming from a lower-priority storage).</para>
            </summary>
            <param name="key">Indexed settings key to create an instance of.</param>
            <param name="keyIndices">An index to the <paramref name="key"/> to be created, as well as indices to any parent indexed keys of <paramref name="key"/>.</param>
        </member>
        <member name="M:JetBrains.Application.Settings.IContextBoundSettingsStore.DeleteIndexedKey(JetBrains.Application.Settings.SettingsIndexedKey,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>
            <para>Ensures that the instance of an indexed key does not exist anymore in the current layered context.</para>
            <para>All data for this key index is wiped from the highest-priority storage.</para>
            <para>If the key still remains defined because of some lower-priority storage, a special revocation flag is written to the highest-priority storage.</para>
            </summary>
            <param name="key">Indexed settings key to delete an instance of.</param>
            <param name="keyIndices">An index to the <paramref name="key"/> to be deleted, as well as indices to any parent indexed keys of <paramref name="key"/>.</param>
        </member>
        <member name="M:JetBrains.Application.Settings.IContextBoundSettingsStore.IsIndexedKeyDefined(JetBrains.Application.Settings.SettingsKey,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>
            <para>Gets whether the instance of an indexed key for particular index is defined in the current layered context.</para>
            <para>Also checks all possible parent indexed keys of this key, and their indices in <paramref name="keyIndices"/>.</para>
            <para>It is valid to pass in a non-indexed key as <paramref name="key"/>, in which case its indexed ancestor keys will be checked. If there are none, the key is always assumed as defined.</para>
            </summary>
            <param name="key">Indexed settings key to check. Might be a non-indexed key iteself to check its possible indexed parents.</param>
            <param name="keyIndices">An index to the <paramref name="key"/> to be deleted, as well as indices to any parent indexed keys of <paramref name="key"/>. Note that this can be <c>Null</c> if you're testing an arbitrary settings key without checking if it's indexed or not first.</param>
        </member>
        <member name="M:JetBrains.Application.Settings.IContextBoundSettingsStore.GetSnapshot(JetBrains.Application.Settings.SettingsKey,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>
            Gets the snapshot of the Settings Store content in a form of Settings Key and Settings Entry instances.
            </summary>
            <param name="keyRoot">Optional. If <c>Null</c>, the whole store available in this context is dumped. If non-<c>Null</c>, only those values under the given schema key are included.</param>
            <param name="keyIndices">Optional. Indices to <paramref name="keyRoot"/>, if it's specified.</param>
            <returns>Delta with extracted settings store values.</returns>
        </member>
        <member name="M:JetBrains.Application.Settings.IContextBoundSettingsStore.EnumIndexedValues(JetBrains.Application.Settings.SettingsIndexedEntry,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>Enumerates all of the indices of the defined entry indexed value instances, and those values.</summary>
            <param name="entry">Identifies the indexed entry.</param>
            <param name="keyIndices">If this entry is parented by one or more indexed keys, the indices to those keys. It is an error to have an index omitted for an indexed key.</param>
            <returns>An enumeration of the index objects. The CLR type of these objects is defined by the settings entry declaration.</returns>
        </member>
        <member name="M:JetBrains.Application.Settings.IContextBoundSettingsStore.EnumIndexedKey(JetBrains.Application.Settings.SettingsIndexedKey,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>
            <para>Gives out all of the indexed key indices currently present in the store.</para>
            <para>Note that checking <see cref="M:JetBrains.Application.Settings.IContextBoundSettingsStore.IsIndexedKeyDefined(JetBrains.Application.Settings.SettingsKey,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})"/> by some of these indices might actually return <c>False</c> due to:</para> 
            <para>• Multithreaded access to the setings store.</para>
            </summary>
            <param name="key">Identifies the indexed key.</param>
            <param name="parentKeyIndices">If this key is parented by one or more indexed keys, the indices to those keys. It is an error to have an index omitted for an indexed key. Note that this should not include the index to the <paramref name="key"/> itself because its possible indices are to be enumerated, but it's not an error if it's present.</param>
            <returns>An enumeration of the index objects. The CLR type of these objects is defined in the settings key attribute.</returns>
        </member>
        <member name="P:JetBrains.Application.Settings.IContextBoundSettingsStore.InvolvedMountPoints">
            <summary>
            Enumerates the mount points which take part in this context.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.IContextBoundSettingsStore.IsIgnoringReadonlyFlag">
            <summary>
            Set to <c>True</c> to write to just any mounts, without looking for one which is <see cref="P:JetBrains.Application.Settings.ISettingsStorageMountPoint.Flags"/>.
            The default is <c>False</c>.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.IContextBoundSettingsStore.SettingsStore">
            <summary>
            Gets the parent Settings Store which has been bound to the context.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.IContextBoundSettingsStore.Schema">
            <summary>
            Gets the Settings Schema of the parent settings store.
            </summary>
        </member>
        <member name="M:JetBrains.Application.src.Settings.ContextBoundSettingsStore.#ctor(JetBrains.DataFlow.Lifetime,JetBrains.Application.Settings.Store.Implementation.SettingsStorageOnMountPoints,JetBrains.Application.Settings.ISettingsStore,JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext)">
            <summary>
            Ctor.
            </summary>
            <param name="lifetimeLimit">This is not the lifetime of this object. It's rather a limiting lifetime to check that we're not operational after it terminates.</param>
            <param name="storageLayered">Mounts selected for the current context.</param>
            <param name="store">Parent settings store.</param>
            <param name="transaction"></param>
        </member>
        <member name="M:JetBrains.Application.src.Settings.ContextBoundSettingsStore.GetValue(JetBrains.Application.Settings.SettingsScalarEntry,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>
            <para>Gets the value of a non-indexed settings entry.</para>
            <para>Note that you will always get a meaningful value (the entry default value), even if the entry value has not been set, or if the entry parent key does not exist (if there's no instance for such indexed key index). If you're reading entries of an indexed key or its ancestors, verify that key instance exists first.</para>
            </summary>
            <param name="entry">The settigs entry whose value is to be read.</param>
            <param name="keyIndices">If this entry is parented by one or more indexed keys, the indices to those keys. It is an error to have an index omitted for an indexed key.</param>
            <returns>The value, as set in the highest-priority storage which is not restricted for overriding. The settings entry default value otherwise (<c>Null</c> if not available).</returns>
        </member>
        <member name="M:JetBrains.Application.src.Settings.ContextBoundSettingsStore.SetValue(JetBrains.Application.Settings.SettingsScalarEntry,System.Object,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>
            <para>Sets the value of a non-indexed settings entry.</para>
            </summary>
            <param name="entry">The settigs entry whose value is to be written.</param>
            <param name="value">The value to be written. Must be of the CLR type specified in the settings entry.</param>
            <param name="keyIndices">If this entry is parented by one or more indexed keys, the indices to those keys. It is an error to have an index omitted for an indexed key.</param>
        </member>
        <member name="M:JetBrains.Application.src.Settings.ContextBoundSettingsStore.ResetValue(JetBrains.Application.Settings.SettingsScalarEntry,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>
            <para>Resets the value of a non-indexed settings entry in the highest-priority storage. It will have the value in the next storage or the entry default value.</para>
            </summary>
            <param name="entry">The settigs entry whose value is to be read.</param>
            <param name="keyIndices">If this entry is parented by one or more indexed keys, the indices to those keys. It is an error to have an index omitted for an indexed key.</param>
        </member>
        <member name="M:JetBrains.Application.src.Settings.ContextBoundSettingsStore.GetIndexedValue(JetBrains.Application.Settings.SettingsIndexedEntry,System.Object,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>
            <para>Gets the value of an indexed settings entry.</para>
            </summary>
            <param name="entry">The settigs entry, the value of whose indexed instance is to be read.</param>
            <param name="entryIndex">An index to the indexed entry instance.</param>
            <param name="keyIndices">If this entry is parented by one or more indexed keys, the indices to those keys. It is an error to have an index omitted for an indexed key.</param>
            <returns>The value, as set in the highest-priority storage which is not restricted for overriding. The settings entry default value otherwise (<c>Null</c> if not available).</returns>
        </member>
        <member name="M:JetBrains.Application.src.Settings.ContextBoundSettingsStore.SetIndexedValue(JetBrains.Application.Settings.SettingsIndexedEntry,System.Object,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object},System.Object)">
            <summary>
            <para>Sets the value of an indexed settings entry.</para>
            </summary>
            <param name="entry">The settigs entry, the value of whose indexed instance is to be written.</param>
            <param name="entryIndex">An index to the indexed entry instance.</param>
            <param name="keyIndices">If this entry is parented by one or more indexed keys, the indices to those keys. It is an error to have an index omitted for an indexed key.</param>
            <param name="value">The value to be written. Must be of the CLR type specified in the settings entry.</param>
        </member>
        <member name="M:JetBrains.Application.src.Settings.ContextBoundSettingsStore.RemoveIndexedValue(JetBrains.Application.Settings.SettingsIndexedEntry,System.Object,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>
            <para>Removes the value of an indexed settings entry.</para>
            </summary>
            <param name="entry">The settigs entry, whose indexed instance is to be removed.</param>
            <param name="entryIndex">An index to the indexed entry instance.</param>
            <param name="keyIndices">If this entry is parented by one or more indexed keys, the indices to those keys. It is an error to have an index omitted for an indexed key.</param>
        </member>
        <member name="M:JetBrains.Application.src.Settings.ContextBoundSettingsStore.EnumEntryIndices(JetBrains.Application.Settings.SettingsIndexedEntry,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>
            <para>Gives out all of the indexed entry indices currently present in the store.</para>
            <para>Note that reading indexed entry values by some of these indices might actually return <c>Null</c> due to:</para> 
            <para>• Multithreaded access to the setings store.</para>
            <para>• Some technical info leftovers present in the store under this index, but not the actual value.</para>
            <para>• The entry indexed value is set in a base layer and then removed in a higher-priority layer, in which case the removal technical entry will report the index as present, but the actual value will be missing.</para>
            </summary>
            <param name="entry">Identifies the indexed entry.</param>
            <param name="keyIndices">If this entry is parented by one or more indexed keys, the indices to those keys. It is an error to have an index omitted for an indexed key.</param>
            <returns>An enumeration of the index objects. The CLR type of these objects is defined by the settings entry declaration.</returns>
        </member>
        <member name="M:JetBrains.Application.src.Settings.ContextBoundSettingsStore.EnumKeyIndices(JetBrains.Application.Settings.SettingsIndexedKey,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>
            <para>Gives out all of the indexed key indices currently present in the store.</para>
            <para>Note that checking <see cref="M:JetBrains.Application.src.Settings.ContextBoundSettingsStore.IsIndexedKeyDefined(JetBrains.Application.Settings.SettingsKey,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})"/> by some of these indices might actually return <c>False</c> due to:</para> 
            <para>• Multithreaded access to the setings store.</para>
            <para>• Some technical info leftovers present in the store under this index, but not the actual value.</para>
            <para>• The key indexed instance is defined in a base layer and then removed in a higher-priority layer, in which case the removal technical record will report the index as present, but the actual key instance will be missing.</para>
            <para>• You're enumerating indices to an indexed key which is a descendant of another indexed key instance which is not defined itself.</para>
            </summary>
            <param name="key">Identifies the indexed key.</param>
            <param name="parentKeyIndices">If this key is parented by one or more indexed keys, the indices to those keys. It is an error to have an index omitted for an indexed key. Note that this should not include the index to the <paramref name="key"/> itself because its possible indices are to be enumerated, but it's not an error if it's present.</param>
            <returns>An enumeration of the index objects. The CLR type of these objects is defined in the settings key attribute.</returns>
        </member>
        <member name="M:JetBrains.Application.src.Settings.ContextBoundSettingsStore.CreateIndexedKey(JetBrains.Application.Settings.SettingsIndexedKey,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>
            <para>Ensures that the instance of an indexed key is marked as created in the highest-priority storage of the current context.</para>
            <para>This accounts for these two basic scenarios:</para>
            <para>• Create an instance of the key which has all of its entries in their default values (without setting any entries on the key).</para>
            <para>• Mark an instance of an indexed key inherited from a lower-priority storage as defined in this higher-priority storage so that it were available even when the lower-priority storage is removed.</para>
            <para>In most other cases, like when you're setting entries on an indexed key, the indexed key instance will be reported as existing in the current combination of layers (the existence status might be coming from a lower-priority storage).</para>
            </summary>
            <param name="key">Indexed settings key to create an instance of.</param>
            <param name="keyIndices">An index to the <paramref name="key"/> to be created, as well as indices to any parent indexed keys of <paramref name="key"/>.</param>
        </member>
        <member name="M:JetBrains.Application.src.Settings.ContextBoundSettingsStore.DeleteIndexedKey(JetBrains.Application.Settings.SettingsIndexedKey,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>
            <para>Ensures that the instance of an indexed key does not exist anymore in the current layered context.</para>
            <para>All data for this key index is wiped from the highest-priority storage.</para>
            <para>If the key still remains defined because of some lower-priority storage, a special revocation flag is written to the highest-priority storage.</para>
            </summary>
            <param name="key">Indexed settings key to delete an instance of.</param>
            <param name="keyIndices">An index to the <paramref name="key"/> to be deleted, as well as indices to any parent indexed keys of <paramref name="key"/>.</param>
        </member>
        <member name="M:JetBrains.Application.src.Settings.ContextBoundSettingsStore.IsIndexedKeyDefined(JetBrains.Application.Settings.SettingsKey,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>
            <para>Gets whether the instance of an indexed key for particular index is defined in the current layered context.</para>
            <para>Also checks all possible parent indexed keys of this key, and their indices in <paramref name="keyIndices"/>.</para>
            <para>It is valid to pass in a non-indexed key as <paramref name="key"/>, in which case its indexed ancestor keys will be checked. If there are none, the key is always assumed as defined.</para>
            </summary>
            <param name="key">Indexed settings key to check. Might be a non-indexed key iteself to check its possible indexed parents.</param>
            <param name="keyIndices">An index to the <paramref name="key"/> to be deleted, as well as indices to any parent indexed keys of <paramref name="key"/>. Note that this can be <c>Null</c> if you're testing an arbitrary settings key without checking if it's indexed or not first.</param>
        </member>
        <member name="T:JetBrains.Application.src.Settings.ContextBoundSettingsStore.IndexedEntryAccess">
            <summary>
            Algorithms for indexed entry/key operations.
            </summary>
        </member>
        <member name="M:JetBrains.Application.src.Settings.ContextBoundSettingsStore.IndexedEntryAccess.EnumChildIndicesSerialized(System.String,JetBrains.Application.Settings.Store.Implementation.SettingsStorageOnMountPoints,JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext)">
            <summary>
            Helper for enumerating mapping keys of map-entry or mapped-key.
            Given the storage key of the mapping, parses out the serialized values of the mapping keys (queries for child keys, strips off '=', removes duplicates).
            </summary>
        </member>
        <member name="M:JetBrains.Application.src.Settings.ContextBoundSettingsStore.IndexedEntryAccess.GetIndexedEntryValue(JetBrains.Application.Settings.SettingsIndexedEntry,JetBrains.Application.Settings.Store.Implementation.SettingsStorageOnMountPoints,JetBrains.Application.src.Settings.ContextBoundSettingsStore.IndexedEntryAccess.StorageKeyPrefixForIndexedValueAttrs,JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext,JetBrains.Util.ILogger)">
            <summary>
            Indexed entry value reader (gets come storage key info precached).
            Supports indexed entry values removal in higher-priority layers.
            </summary>
        </member>
        <member name="M:JetBrains.Application.src.Settings.ContextBoundSettingsStore.IndexedEntryAccess.SetIndexedValue(JetBrains.Application.Settings.SettingsIndexedEntry,System.Object,System.Object,JetBrains.Application.Settings.Store.Implementation.SettingsStorageOnMountPoints,System.Boolean,JetBrains.Application.src.Settings.ContextBoundSettingsStore.IndexedEntryAccess.StorageKeyPrefixForIndexedValueAttrs,System.Boolean,JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext)">
            <summary>
            Indexed entry value writer (gets come storage key info precached).
            Supports indexed entry values removal in higher-priority layers.
            </summary>
        </member>
        <member name="M:JetBrains.Application.src.Settings.ContextBoundSettingsStore.IndexedEntryAccess.RemoveIndexedValue(JetBrains.Application.Settings.SettingsIndexedEntry,System.Object,JetBrains.Application.Settings.Store.Implementation.SettingsStorageOnMountPoints,JetBrains.Application.src.Settings.ContextBoundSettingsStore.IndexedEntryAccess.StorageKeyPrefixForIndexedValueAttrs,System.Boolean,JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext,JetBrains.Util.ILogger)">
            <summary>
            Indexed entry instance eraser (gets come storage key info precached).
            Supports indexed entry values removal in higher-priority layers.
            </summary>
        </member>
        <member name="T:JetBrains.Application.src.Settings.ContextBoundSettingsStore.IndexedEntryAccess.StorageKeyPrefixForIndexedValueAttrs">
            <summary>
            Prepares the storage key prefix for addressing settings storage attributes of an indexed entry.
            This includes path to the entry storage key plus serialized index in the special format plus an at sign which begins the attribute local name.
            </summary>
        </member>
        <member name="F:JetBrains.Application.src.Settings.ContextBoundSettingsStore.IndexedEntryAccess.StorageKeyPrefixForIndexedValueAttrs.Prefix">
            <summary>
            Append attribute name => you got storage key to attribute on an indexed entry instance.
            </summary>
        </member>
        <member name="M:JetBrains.Application.src.Settings.ContextBoundSettingsStore.IndexedEntryAccess.StorageKeyPrefixForIndexedValueAttrs.#ctor(JetBrains.Application.Settings.SettingsIndexedEntry,System.Object,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>
            Prepares the storage key prefix for addressing settings storage attributes of an indexed entry.
            This includes path to the entry storage key plus serialized index in the special format plus an at sign which begins the attribute local name.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.IIndexedEntry`2.SnapshotAndFreeze">
            <summary>
            Prefetches all indexed values from the store (=snapshot) and stops reading from the actual store (=freeze).
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:JetBrains.Application.Settings.Store.IndexedEntry`2.myStore" -->
        <member name="F:JetBrains.Application.Settings.Store.IndexedEntry`2.mySnapshot">
            <summary>
            <c>Null</c> until we do a snapshot.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.IndexedEntry`2.SnapshotAndFreeze">
            <summary>
            Prefetches all indexed values from the store (=snapshot) and stops reading from the actual store (=freeze).
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.ISettingsOptimization">
            <summary>
            Attaches key getting/setting to the instance of this object to enable caching of some data required for speedup.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.ISettingsOptimization.GetKey(JetBrains.Application.Settings.IContextBoundSettingsStore,JetBrains.Application.Settings.SettingsKey,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>
            <para>Gets the values of all of the settings key's entries and returns them in a settings key class.</para>
            <para>This is always non-<c>Null</c> for a simple (non-indexed) key whose parents are also all simple. If there's no data on that key in the storage, default values will be returned for all of its entries.</para>
            <para>For an indexed key, or a key with an indexed ancestor, this will be <c>Null</c> if no instance is defined for the particular index value specified in <see cref="!:keyIndices"/>.</para>
            </summary>
            <param name="store"></param>
            <param name="key">The settigs key to be read.</param>
            <param name="keyIndices">If this key is parented by one or more indexed keys or is indexed itself, the indices to those keys. It is an error to have an index omitted for an indexed key.</param>
            <returns>An instance of the key class with non-indeexed entries read with <see cref="M:JetBrains.Application.Settings.IContextBoundSettingsStore.GetValue(JetBrains.Application.Settings.SettingsScalarEntry,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})"/> and indexed entries exposed as with <see cref="M:JetBrains.Application.Settings.SettingsStoreEx.CreateIndexedEntryAccess(JetBrains.Application.Settings.IContextBoundSettingsStore,JetBrains.Application.Settings.SettingsIndexedEntry,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object},JetBrains.Util.ILogger)"/>.</returns>
        </member>
        <member name="M:JetBrains.Application.Settings.ISettingsOptimization.SetKey(JetBrains.Application.Settings.IContextBoundSettingsStore,JetBrains.Application.Settings.SettingsKey,System.Object,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>
            <para> Stores the values of all of the settings key's scalar entries.</para>
            <para> It's semantic is equivalent to calling <see cref="M:JetBrains.Application.Settings.IContextBoundSettingsStore.SetValue(JetBrains.Application.Settings.SettingsScalarEntry,System.Object,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})"/> for each scalar entry of the key. </para>
            <param name="key">The settigs key to be written.</param>
            <param name="value">The value to be written. Must be of the CLR type specified in the settings entry</param>
            <param name="keyIndices">If <paramref name="key"/> is indexed itself or is parented by one or more indexed keys, the indices to those keys. It is an error to have an index omitted for an indexed key.</param>
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.ISettingsStorageMountPointEx.MountGetObsolete(JetBrains.Application.Settings.ISettingsStorageMountPoint,System.String,JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext)">
            <summary>
            Accesses the mounted settings storage taking its mounting path into account.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.ISettingsStorageMountPointEx.MountGetRaw(JetBrains.Application.Settings.ISettingsStorageMountPoint,JetBrains.Application.Settings.Storage.KeyPathComponents,JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext,JetBrains.Util.ILogger)">
            <summary>
            Accesses the mounted settings storage taking its mounting path into account.
            <paramref name="keyPathComponentsWithEmptySlot"/> must be specifically prepared for calling this method.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.ISettingsStorageMountPointEx.MountGetSlow(JetBrains.Application.Settings.ISettingsStorageMountPoint,JetBrains.Application.Settings.Storage.KeyPathComponents,JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext,JetBrains.Util.ILogger)">
            <summary>
            Accesses the mounted settings storage taking its mounting path into account.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.ISettingsStorageMountPointEx.MountSetObsolete(JetBrains.Application.Settings.ISettingsStorageMountPoint,System.String,System.Object,JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext)">
            <summary>
            Accesses the mounted settings storage taking its mounting path into account.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.ISettingsStorageMountPointEx.MountSetRaw(JetBrains.Application.Settings.ISettingsStorageMountPoint,JetBrains.Application.Settings.Storage.KeyPathComponents,System.Object,JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext,JetBrains.Util.ILogger)">
            <summary>
            Accesses the mounted settings storage taking its mounting path into account.
            <paramref name="keyPathComponentsWithEmptySlot"/> must be specifically prepared for calling this method.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.ISettingsStorageMountPointEx.MountEraseRaw(JetBrains.Application.Settings.ISettingsStorageMountPoint,JetBrains.Application.Settings.Storage.KeyPathComponents,JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext,JetBrains.Util.ILogger)">
            <summary>
            Accesses the mounted settings storage taking its mounting path into account.
            <paramref name="keyPathComponentsWithEmptySlot"/> must be specifically prepared for calling this method.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.ISettingsStorageMountPointEx.MountSetSlow(JetBrains.Application.Settings.ISettingsStorageMountPoint,JetBrains.Application.Settings.Storage.KeyPathComponents,System.Object,JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext,JetBrains.Util.ILogger)">
            <summary>
            Accesses the mounted settings storage taking its mounting path into account.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.ISettingsStorageMountPointEx.MountEnumKeysObsolete(JetBrains.Application.Settings.ISettingsStorageMountPoint,System.String,JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext)">
            <summary>
            Accesses the mounted settings storage taking its mounting path into account.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.ISettingsStorageMountPointEx.MountEnumRaw(JetBrains.Application.Settings.ISettingsStorageMountPoint,JetBrains.Application.Settings.Storage.KeyPathComponents,System.Int32,System.Action{JetBrains.Application.Settings.Storage.KeyPathComponents,System.Object},JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext,JetBrains.Util.ILogger)">
            <summary>
            Accesses the mounted settings storage taking its mounting path into account.
            NOTE: for enumerating the whole mount, your key path must contain exactly the first NULL component
            NOTE: the key MIGHT contain mountpaht in the first component when your callback is invoked.
            <paramref name="keyPathComponentsWithEmptySlot"/> must be specifically prepared for calling this method.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.ISettingsStorageMountPointEx.MountEnumSlow(JetBrains.Application.Settings.ISettingsStorageMountPoint,JetBrains.Application.Settings.Storage.KeyPathComponents,System.Int32,System.Action{JetBrains.Application.Settings.Storage.KeyPathComponents,System.Object},JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext,JetBrains.Util.ILogger)">
            <summary>
            Accesses the mounted settings storage taking its mounting path into account.
            NOTE: for enumerating the whole mount, your key path must contain exactly the first NULL component
            NOTE: the key MIGHT contain mountpaht in the first component when your callback is invoked.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.ISettingsStorageMountPointEx.MountCopyTo(JetBrains.Application.Settings.ISettingsStorageMountPoint,JetBrains.Application.Settings.ISettingsStorageMountPoint,JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext,JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext,JetBrains.Util.ILogger,System.String)">
            <summary>
            Copies the contents of the mounting point as raw storage physical data (the part of the storage mounted under this mount point).
            </summary>
            <param name="transactionTarget"></param>
            <param name="logger"></param>
            <param name="sRootKey">Optional. If only a part of the mounting point's contents should be copied, specifies the root key of the data to copy. If <c>Null</c> or an empty string, the whole storage under the mounting path will be copied.</param>
            <param name="thіs"></param>
            <param name="target"></param>
            <param name="transactionThis"></param>
        </member>
        <member name="M:JetBrains.Application.Settings.ISettingsStorageMountPointEx.MountErase(JetBrains.Application.Settings.ISettingsStorageMountPoint,JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext,JetBrains.Util.ILogger)">
            <summary>
            Erases all of the storage contents under the mounting point.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.ISettingsStorageMountPointEx.MountEraseSubtreeSlow(JetBrains.Application.Settings.ISettingsStorageMountPoint,JetBrains.Application.Settings.Storage.KeyPathComponents,JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext,JetBrains.Util.ILogger)">
            <summary>
            Erases all of the storage contents under the mounting point.
            </summary>
            <param name="mount"></param>
            <param name="keyPathComponentsExact">NULL or empty to erase the whole mounted content. A specific path to erase all the content under it.</param>
            <param name="transaction"></param>
            <param name="logger"></param>
        </member>
        <member name="M:JetBrains.Application.Settings.ISettingsStorageMountPointEx.MountEraseSubtreeRaw(JetBrains.Application.Settings.ISettingsStorageMountPoint,JetBrains.Application.Settings.Storage.KeyPathComponents,JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext,JetBrains.Util.ILogger)">
            <summary>
            Erases all of the storage contents under the mounting point.
            </summary>
            <param name="mount"></param>
            <param name="keyPathComponentsWithEmptySlot">Empty (but for the placeholder) to erase the whole mounted content. A specific path to erase all the content under it.</param>
            <param name="transaction"></param>
            <param name="logger"></param>
        </member>
        <member name="T:JetBrains.Application.Settings.ListWithoutPrefix`1">
            <summary>
            Wraps the list so that it appears as if missing one first item.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.ListWithPrefix`1">
            <summary>
            Wraps the list so that it appears as if having one extra first item.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsOptimization.DoMeSlowly">
            <summary>
            <para>Gets the dummy implementation which does not do any optimizations.</para>
            <para>This is a placeholder. In performance-critical real-life uses, import <see cref="T:JetBrains.Application.Settings.ISettingsOptimization"/> from your container and use this instance in place of this parameter.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsOptimization.OptimizeDefault">
            <summary>
            Gets the default static optimization cache.
            It is still preferrable to import the optimization as a component.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.SettingsStoreChangeArgsEx_Visit.VisitContext">
            <summary>
            Pass params thru hierarchy in a special class to save stack space when recursing.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsStoreEx.ResetValue``2(JetBrains.Application.Settings.IContextBoundSettingsStore,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>
            Resets the value in the most concrete store of the given context.
            The local value in the store will be removed. A value from one of the underlying stores, if any, will be used. If none, the default value will be used.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsStoreEx.ResetValue``1(JetBrains.Application.Settings.ISettingsStore,JetBrains.Application.DataContext.IDataContext,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>
            Resets the value in the most concrete store of the given context.
            The local value in the store will be removed. A value from one of the underlying stores, if any, will be used. If none, the default value will be used.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsStoreEx.ResetValue``1(JetBrains.Application.Settings.ISettingsStore,System.Func{JetBrains.DataFlow.Lifetime,JetBrains.Application.DataContext.DataContexts,JetBrains.Application.DataContext.IDataContext},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>
            Resets the value in the most concrete store of the given context.
            The local value in the store will be removed. A value from one of the underlying stores, if any, will be used. If none, the default value will be used.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsStoreEx.ResetValue(JetBrains.Application.Settings.ISettingsStore,JetBrains.Application.DataContext.IDataContext,JetBrains.Application.Settings.SettingsScalarEntry,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>
            Resets the value in the most concrete store of the given context.
            The local value in the store will be removed. A value from one of the underlying stores, if any, will be used. If none, the default value will be used.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsStoreEx.CreateIndexedEntryAccess(JetBrains.Application.Settings.IContextBoundSettingsStore,JetBrains.Application.Settings.SettingsIndexedEntry,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object},JetBrains.Util.ILogger)">
            <summary>
            Creates a dictionary-like object for reading indexed entry values by index.
            </summary>
            <param name="thіs"></param>
            <param name="entry">The settigs entry, the value of whose indexed instance is to be read.</param>
            <param name="keyIndices">If this entry is parented by one or more indexed keys, the indices to those keys. It is an error to have an index omitted for an indexed key.</param>
            <param name="logger"></param>
            <returns>An <see cref="T:JetBrains.Application.Settings.Store.IIndexedEntry`2"/> object.</returns>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsStoreEx.BoundToContextForTemporaryChanges(JetBrains.Application.Settings.ISettingsStore,JetBrains.DataFlow.Lifetime,JetBrains.Application.DataContext.IDataContext)">
            <summary>
            Creates Settings store binded to the provided context and adds extra mount point with highest priority for handling write operations.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsStoreEx.CreateIndexedKey``1(JetBrains.Application.Settings.IContextBoundSettingsStore,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>
            <para>Ensures that the instance of an indexed key is marked as created in the highest-priority storage of the current context.</para>
            <para>This accounts for these two basic scenarios:</para>
            <para>• Create an instance of the key which has all of its entries in their default values (without setting any entries on the key).</para>
            <para>• Mark an instance of an indexed key inherited from a lower-priority storage as defined in this higher-priority storage so that it were available even when the lower-priority storage is removed.</para>
            <para>In most other cases, like when you're setting entries on an indexed key, the indexed key instance will be reported as existing in the current combination of layers (the existence status might be coming from a lower-priority storage).</para>
            </summary>
            <param name="thіs"></param>
            <param name="keyIndices">An index to the key to be created, as well as indices to any parent indexed keys of that key.</param>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsStoreEx.IsIndexedKeyDefined``1(JetBrains.Application.Settings.IContextBoundSettingsStore,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>
            <para>Checks whether the instance of an indexed key is marked as created in any mounted storage of the current context.</para>
            </summary>
            <param name="thіs"></param>
            <param name="keyIndices">An index to the key to be checked, as well as indices to any parent indexed keys of that key.</param>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsStoreEx.GetValueLive``2(JetBrains.Application.Settings.ISettingsStore,JetBrains.DataFlow.Lifetime,System.Func{JetBrains.DataFlow.Lifetime,JetBrains.Application.DataContext.DataContexts,JetBrains.Application.DataContext.IDataContext},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Gets the live value of the setting in the given context.
            </summary>
            <typeparam name="TEntryMemberType">Value type.</typeparam>
            <typeparam name="TKeyClass">Settings key class owning the settings entry.</typeparam>
            <param name="thіs"></param>
            <param name="lifetime">Duration.</param>
            <param name="FDataContext">Identifies the context in which the retained-state value should be maintained. As the data context is lifetime-bound and expires on guard release, needs a function to produce the context at need. This function is guaranteed to be called on the primary thread under a guard.</param>
            <param name="lambdaexpression">The entry whose value is to be monitored.</param>
            <returns>A property that changes live as the setting changes.</returns>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsStoreEx.GetValueLive``1(JetBrains.Application.Settings.ISettingsStore,JetBrains.DataFlow.Lifetime,System.Func{JetBrains.DataFlow.Lifetime,JetBrains.Application.DataContext.DataContexts,JetBrains.Application.DataContext.IDataContext},JetBrains.Application.Settings.SettingsScalarEntry)">
            <summary>
            Gets the live value of the setting in the given context.
            </summary>
            <typeparam name="TEntryMemberType">Value type.</typeparam>
            <param name="thіs"></param>
            <param name="lifetime">Duration.</param>
            <param name="FDataContext">Identifies the context in which the retained-state value should be maintained. As the data context is lifetime-bound and expires on guard release, needs a function to produce the context at need. This function is guaranteed to be called on the primary thread under a guard.</param>
            <param name="entry">The entry whose value is to be monitored.</param>
            <returns>A property that changes live as the setting changes.</returns>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsStoreEx.GetValueProperty``2(JetBrains.Application.Settings.IContextBoundSettingsStoreLive,JetBrains.DataFlow.Lifetime,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>
            <para>Gets the value of a non-indexed settings entry as a live property.</para>
            <para>The property will change its value (and fire change events) on the main thread when the entry value changes in this context. If you change property value externally, the new value will be applied to the entry in this context using the SmartSave strategy.</para>
            <para>Note that you will always get a meaningful value (the entry default value), even if the entry value has not been set, or if the entry parent key does not exist (if there's no instance for such indexed key index). If you're reading entries of an indexed key or its ancestors, verify that key instance exists first.</para>
            </summary>
            <param name="thіs"></param>
            <param name="lifetime"></param>
            <param name="lambdaexpression">The settigs entry whose value is to be read.</param>
            <param name="keyIndices">If this entry is parented by one or more indexed keys, the indices to those keys. It is an error to have an index omitted for an indexed key.</param>
            <returns>The value, as set in the highest-priority storage which is not restricted for overriding. The settings entry default value otherwise (<c>Null</c> if not available).</returns>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsStoreEx.AdviseChange(JetBrains.Application.Settings.ISettingsChangedEventSource,JetBrains.DataFlow.Lifetime,JetBrains.Application.Settings.SettingsEntry,System.Action)">
            <summary>
            <para>Advises the settings entry change event.</para>
            <para>Fires on any change in settings entries in any child key, in any settings context.</para>
            <para>To sink changes in a specific context only, <see cref="M:JetBrains.Application.Settings.ISettingsStore.BindToContextLive(JetBrains.DataFlow.Lifetime,JetBrains.Application.Settings.ContextRange,JetBrains.Application.Settings.Store.Implementation.BindToContextFlags)">bind the store to that context</see> and use its <see cref="M:JetBrains.Application.Settings.SettingsStoreEx.AdviseChange(JetBrains.Application.Settings.ISettingsChangedEventSource,JetBrains.DataFlow.Lifetime,JetBrains.Application.Settings.SettingsEntry,System.Action)"/> method.</para>
            </summary>
            <param name="thіs"></param>
            <param name="lifetime">Duration.</param>
            <param name="entry">Entity to be watched for possible changes.</param>
            <param name="FOnChange">Executes when the change is detected.</param>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsStoreEx.AdviseChange(JetBrains.Application.Settings.ISettingsChangedEventSource,JetBrains.DataFlow.Lifetime,JetBrains.Application.Settings.SettingsKey,System.Action)">
            <summary>
            <para>Advises the settings key change event.</para>
            <para>Fires on any change in settings entries in any child key, in any settings context.</para>
            <para>To sink changes in a specific context only, <see cref="M:JetBrains.Application.Settings.ISettingsStore.BindToContextLive(JetBrains.DataFlow.Lifetime,JetBrains.Application.Settings.ContextRange,JetBrains.Application.Settings.Store.Implementation.BindToContextFlags)">bind the store to that context</see> and use its <see cref="M:JetBrains.Application.Settings.SettingsStoreEx.AdviseChange(JetBrains.Application.Settings.ISettingsChangedEventSource,JetBrains.DataFlow.Lifetime,JetBrains.Application.Settings.SettingsEntry,System.Action)"/> method.</para>
            </summary>
            <param name="thіs"></param>
            <param name="lifetime">Duration.</param>
            <param name="key">Entity to be watched for possible changes.</param>
            <param name="FOnChange">Executes when the change is detected.</param>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsStoreEx.CopyTo(JetBrains.Application.Settings.IContextBoundSettingsStore,JetBrains.Application.Settings.IContextBoundSettingsStore,JetBrains.Util.ILogger,JetBrains.Application.Settings.SettingsKey,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>
            Copies all of the settings defined in the current context into the given context.
            </summary>
            <param name="thіs">Source context.</param>
            <param name="target">Target context to copy the settings into.</param>
            <param name="logger">Handles errors in this specific routine. Note that any of the store access errors will still go to the logger of that store.</param>
            <param name="keyRoot">Optional. If <c>Null</c>, the whole store available in this context is dumped. If non-<c>Null</c>, only those values under the given schema key are included.</param>
            <param name="keyIndices">Optional. Indices to <paramref name="keyRoot"/>, if it's specified.</param>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsStoreEx.EnumEntryIndices(JetBrains.Application.Settings.IContextBoundSettingsStore,JetBrains.Application.Settings.SettingsIndexedEntry,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>
            <para>Gives out all of the indexed entry indices currently present in the store.</para>
            <para>Note that reading indexed entry values by some of these indices might actually return <c>Null</c> due to:</para> 
            <para>• Multithreaded access to the setings store.</para>
            <para>• Some technical info leftovers present in the store under this index, but not the actual value.</para>
            <para>• The entry indexed value is set in a base layer and then removed in a higher-priority layer, in which case the removal technical entry will report the index as present, but the actual value will be missing.</para>
            </summary>
            <param name="thіs"></param>
            <param name="entry">Identifies the indexed entry.</param>
            <param name="keyIndices">If this entry is parented by one or more indexed keys, the indices to those keys. It is an error to have an index omitted for an indexed key.</param>
            <returns>An enumeration of the index objects. The CLR type of these objects is defined by the settings entry declaration.</returns>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsStoreEx.EnumKeyIndices(JetBrains.Application.Settings.IContextBoundSettingsStore,JetBrains.Application.Settings.SettingsIndexedKey,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>
            <para>Gives out all of the indexed key indices currently present in the store.</para>
            <para>Note that checking <see cref="M:JetBrains.Application.Settings.IContextBoundSettingsStore.IsIndexedKeyDefined(JetBrains.Application.Settings.SettingsKey,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})"/> by some of these indices might actually return <c>False</c> due to:</para> 
            <para>• Multithreaded access to the setings store.</para>
            <para>• Some technical info leftovers present in the store under this index, but not the actual value.</para>
            <para>• The key indexed instance is defined in a base layer and then removed in a higher-priority layer, in which case the removal technical record will report the index as present, but the actual key instance will be missing.</para>
            <para>• You're enumerating indices to an indexed key which is a descendant of another indexed key instance which is not defined itself.</para>
            </summary>
            <param name="thіs"></param>
            <param name="key">Identifies the indexed key.</param>
            <param name="parentKeyIndices">If this key is parented by one or more indexed keys, the indices to those keys. It is an error to have an index omitted for an indexed key. Note that this should not include the index to the <paramref name="key"/> itself because its possible indices are to be enumerated, but it's not an error if it's present.</param>
            <returns>An enumeration of the index objects. The CLR type of these objects is defined in the settings key attribute.</returns>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsStoreEx.GetKey(JetBrains.Application.Settings.IContextBoundSettingsStore,JetBrains.Application.Settings.SettingsKey,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object},JetBrains.Application.Settings.ISettingsOptimization)">
            <summary>
            <para>Gets the values of all of the settings key's entries and returns them in a settings key class.</para>
            <para>This is always non-<c>Null</c> for a simple (non-indexed) key whose parents are also all simple. If there's no data on that key in the storage, default values will be returned for all of its entries.</para>
            <para>For an indexed key, or a key with an indexed ancestor, this will be <c>Null</c> if no instance is defined for the particular index value specified in <see cref="!:keyIndices"/>.</para>
            </summary>
            <param name="thіs"></param>
            <param name="key">The settigs key to be read.</param>
            <param name="keyIndices">If this key is parented by one or more indexed keys or is indexed itself, the indices to those keys. It is an error to have an index omitted for an indexed key.</param>
            <param name="optimization">Allows to operate whole settings keys faster by applying object-specific optimizations.</param>
            <returns>An instance of the key class with non-indeexed entries read with <see cref="M:JetBrains.Application.Settings.IContextBoundSettingsStore.GetValue(JetBrains.Application.Settings.SettingsScalarEntry,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})"/> and indexed entries exposed as with <see cref="M:JetBrains.Application.Settings.SettingsStoreEx.CreateIndexedEntryAccess(JetBrains.Application.Settings.IContextBoundSettingsStore,JetBrains.Application.Settings.SettingsIndexedEntry,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object},JetBrains.Util.ILogger)"/>.</returns>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsStoreEx.SetKey(JetBrains.Application.Settings.IContextBoundSettingsStore,JetBrains.Application.Settings.SettingsKey,System.Object,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object},JetBrains.Application.Settings.ISettingsOptimization)">
            <summary>
            <para> Stores the values of all of the settings key's scalar entries.</para>
            <para> It's semantic is equivalent to calling <see cref="M:JetBrains.Application.Settings.IContextBoundSettingsStore.SetValue(JetBrains.Application.Settings.SettingsScalarEntry,System.Object,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})"/> for each scalar entry of the key. </para>
            </summary>
            <param name="key">The settigs key to be written.</param>
            <param name="value">The value to be written. Must be of the CLR type specified in the settings entry</param>
            <param name="keyIndices">If <paramref name="key"/> is indexed itself or is parented by one or more indexed keys, the indices to those keys. It is an error to have an index omitted for an indexed key.</param>
            <param name="optimization">Allows to operate whole settings keys faster by applying object-specific optimizations.</param>
        </member>
        <member name="T:JetBrains.Application.Settings.Store.Implementation.ContextBoundSettingsStoreTransient">
            <summary>
            Default implementation of a non-lifetimed (transient) context-bound settings store.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.Implementation.ContextBoundSettingsStoreTransient.FillKeyPathComponentsAndCheckIsDefined(JetBrains.Application.Settings.Storage.KeyPathComponents,JetBrains.Application.Settings.SettingsKey,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>
            <para>Builds storage keypath for the settings key, and checks that all the indexed keys in the path are marked as defined in the store.</para>
            <para>NOTE: this function is used in much less cases now in favor of <see cref="M:JetBrains.Application.Settings.Store.Implementation.ContextBoundSettingsStoreTransient.FillKeyPathComponentsAndCheckIsDefined_NotActuallyCheckingAnymore(JetBrains.Application.Settings.Storage.KeyPathComponents,JetBrains.Application.Settings.SettingsKey,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})"/>, see NP-624.</para>
            </summary>
            <param name="keyPathComponents"></param>
            <param name="key"></param>
            <param name="keyIndices"></param>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.Implementation.ContextBoundSettingsStoreTransient.FillKeyPathComponentsAndCheckIsDefined_NotActuallyCheckingAnymore(JetBrains.Application.Settings.Storage.KeyPathComponents,JetBrains.Application.Settings.SettingsKey,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>
            <para>Builds storage keypath for the settings key, and checks that all the indexed keys in the path are marked as defined in the store.</para>
            <para>NOTE: this function actually always returns <c>True</c> , but marks the places which used to check for the key to be defined before the design was changed to always read the actual entry value, see NP-624.</para>
            </summary>
            <param name="keyPathComponents"></param>
            <param name="key"></param>
            <param name="keyIndices"></param>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.Implementation.ContextBoundSettingsStoreTransient.FillKeyPathComponentsAndCheckIsDefined(JetBrains.Application.Settings.Storage.KeyPathComponents,JetBrains.Application.Settings.SettingsEntry,System.Object,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>
            <para>Builds storage keypath for the settings key, and checks that all the indexed keys in the path are marked as defined in the store.</para>
            <para>NOTE: this function is not used anymore in favor of <see cref="M:JetBrains.Application.Settings.Store.Implementation.ContextBoundSettingsStoreTransient.FillKeyPathComponentsAndCheckIsDefined_NotActuallyCheckingAnymore(JetBrains.Application.Settings.Storage.KeyPathComponents,JetBrains.Application.Settings.SettingsKey,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})"/>, see NP-624.</para>
            </summary>
            <param name="keyPathComponents"></param>
            <param name="entry"></param>
            <param name="indexToEntry"></param>
            <param name="keyIndices"></param>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.Implementation.ContextBoundSettingsStoreTransient.FillKeyPathComponentsAndCheckIsDefined_NotActuallyCheckingAnymore(JetBrains.Application.Settings.Storage.KeyPathComponents,JetBrains.Application.Settings.SettingsEntry,System.Object,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>
            <para>Builds storage keypath for the settings key. Does not check that all the indexed keys in the path are marked as defined in the store (but checks that all the key indices are supplied with <paramref name="keyIndices"/>).</para>
            <para>NOTE: this function is identical to <see cref="M:JetBrains.Application.Settings.Store.Implementation.ContextBoundSettingsStoreTransient.FillKeyPathComponentsWithoutChecking(JetBrains.Application.Settings.Storage.KeyPathComponents,JetBrains.Application.Settings.SettingsEntry,System.Object,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})"/>, but marks the places which used to check for the key to be defined before the design was changed to always read the actual entry value, see NP-624.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.Implementation.ContextBoundSettingsStoreTransient.FillKeyPathComponentsWithoutChecking(JetBrains.Application.Settings.Storage.KeyPathComponents,JetBrains.Application.Settings.SettingsEntry,System.Object,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>
            Builds storage keypath for the settings key. Does not check that all the indexed keys in the path are marked as defined in the store (but checks that all the key indices are supplied with <paramref name="keyIndices"/>).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Store.Implementation.ContextBoundSettingsStoreTransient.myFFillKeyPathComponentsAndCheckIsDefined_CheckKey">
            <summary>
            Cached delegate.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.Implementation.ContextBoundSettingsStoreTransient.SetIndexedValueCore(JetBrains.Application.Settings.Storage.KeyPathComponents,JetBrains.Application.Settings.SettingsIndexedEntry,System.Object,System.Object,System.Boolean)">
            <summary>
            Indexed entry value writer (gets come storage key info precached).
            Supports indexed entry values removal in higher-priority layers.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Store.Implementation.ContextBoundSettingsStoreTransient.myFCreateIndexedKey_DefineKey">
            <summary>
            Cached delegate.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Store.Implementation.ContextBoundSettingsStoreTransient.IndexedValues.ValueSerialized">
            <summary>
            <para>Value serialized to a primitive storage type, as residing in the storage.</para>
            <para>Must be non-<c>Null</c> for a correct value record after the layer is processed. Can only be <c>Null</c> if we have encountered a value-removal record before the actual value record (<see cref="F:JetBrains.Application.Settings.Store.Implementation.ContextBoundSettingsStoreTransient.IndexedValues.IsRemoved"/> is <c>True</c>). Such a situation after the layer is fully processed means the record should be ignored.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Store.Implementation.ContextBoundSettingsStoreTransient.IndexedValues.LayerIndex">
            <summary>
            Layer idetity to combine entry deletion records with entry values.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Store.Implementation.ContextBoundSettingsStoreTransient.IndexedValues.IsRemoved">
            <summary>
            <c>True</c> if we've seen a removal record for this index.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.Implementation.ContextBoundSettingsStoreTransient.IContextBoundMountsInfo.GetDataSync(JetBrains.Application.Settings.ISettingsStorageMountPoint[]@,JetBrains.Application.Settings.ISettingsStorageMountPoint@)">
            <summary>
            Gets <see cref="P:JetBrains.Application.Settings.Store.Implementation.ContextBoundSettingsStoreTransient.IContextBoundMountsInfo.Mounts"/> and <see cref="P:JetBrains.Application.Settings.Store.Implementation.ContextBoundSettingsStoreTransient.IContextBoundMountsInfo.LastWideMount"/> which are synchronized with each other, with one call.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.Store.Implementation.ContextBoundSettingsStoreTransient.IContextBoundMountsInfo.Mounts">
            <summary>
            Gets the mounting points present in the context at the moment.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.Store.Implementation.ContextBoundSettingsStoreTransient.IContextBoundMountsInfo.LastWideMount">
            <summary>
            <para>Gets the mounting point out of <see cref="P:JetBrains.Application.Settings.Store.Implementation.ContextBoundSettingsStoreTransient.IContextBoundMountsInfo.Mounts"/> outside of which (with lower priority) writes are not allowed.</para>
            <para>Note that in case of a live context you cannot guarantee the property values are in sync, use <see cref="M:JetBrains.Application.Settings.Store.Implementation.ContextBoundSettingsStoreTransient.IContextBoundMountsInfo.GetDataSync(JetBrains.Application.Settings.ISettingsStorageMountPoint[]@,JetBrains.Application.Settings.ISettingsStorageMountPoint@)"/> when this is critical.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.Implementation.ContextBoundSettingsStoreTransient.ContextBoundMountsInfoTransient.FromContextRange(JetBrains.Application.Settings.ContextRange,JetBrains.Application.Settings.ISettingsStore,JetBrains.Application.Settings.Store.Implementation.BindToContextFlags,JetBrains.Util.ILogger)">
            <summary>
            Convert ContextRange into the mounts list — non-live.
            </summary>
            <param name="contextRange"></param>
            <param name="store"></param>
            <param name="flags"></param>
            <param name="logger"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.Implementation.ContextBoundSettingsStoreTransient.ContextBoundMountsInfoTransient.FromContextRangeCore(JetBrains.Application.Settings.ContextRange,JetBrains.Application.Settings.ISettingsStore,JetBrains.Application.Settings.Store.Implementation.BindToContextFlags,System.Boolean,JetBrains.Util.ILogger,JetBrains.Application.Settings.ISettingsStorageMountPoint[]@,JetBrains.Application.Settings.ISettingsStorageMountPoint@)">
            <summary>
            Convert ContextRange into the mounts list — non-live.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.IContextBoundSettingsStoreLive">
            <summary>
            <para>Live version of the context-bound store.</para>
            <para>Is bound to a lifetime, watches for newly-appearing mounting points, retranslates change events.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.ISettingsChangedEventSource">
            <summary>
            <para>Can fire events on changes in settings.</para>
            <para>Applies to the Settings Store in the whole, and to its live context bindings.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.ISettingsChangedEventSource.Changed">
            <summary>
            Listens to changes in the settings store.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.IContextBoundSettingsStoreLive.GetValueProperty``1(JetBrains.DataFlow.Lifetime,JetBrains.Application.Settings.SettingsScalarEntry,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>
            <para>Gets the value of a non-indexed settings entry as a live property.</para>
            <para>The property will change its value (and fire change events) on the main thread when the entry value changes in this context. If you change property value externally, the new value will be applied to the entry in this context using the SmartSave strategy.</para>
            <para>Note that you will always get a meaningful value (the entry default value), even if the entry value has not been set, or if the entry parent key does not exist (if there's no instance for such indexed key index). If you're reading entries of an indexed key or its ancestors, verify that key instance exists first.</para>
            </summary>
            <param name="lifetime"></param>
            <param name="entry">The settigs entry whose value is to be read.</param>
            <param name="keyIndices">If this entry is parented by one or more indexed keys, the indices to those keys. It is an error to have an index omitted for an indexed key.</param>
            <returns>The value, as set in the highest-priority storage which is not restricted for overriding. The settings entry default value otherwise (<c>Null</c> if not available).</returns>
        </member>
        <member name="P:JetBrains.Application.Settings.IContextBoundSettingsStoreLive.InvolvedMountPointsLive">
            <summary>
            Adds to the base interface's <see cref="P:JetBrains.Application.Settings.IContextBoundSettingsStore.InvolvedMountPoints"/> property: as the live context might see its mount points set change, fires when this happens so that any consumers could update on the new <see cref="P:JetBrains.Application.Settings.IContextBoundSettingsStore.InvolvedMountPoints"/>.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.Store.Implementation.ContextBoundSettingsStoreLive.IContextBoundMountsInfoLive.MountsLive">
            <summary>
            <para>Live version of the mounting points set of this context.</para>
            <para>Used for watching mount changes and notifying of coming/going settings.</para>
            <para>The order is guaranteed to be correct.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.Implementation.ContextBoundSettingsStoreLive.ContextBoundMountsInfoLiveOnContextRange.OnMountSetChangeDispatched">
            <summary>
            Deferred notification on change in set of applicable mounts, update the <see cref="F:JetBrains.Application.Settings.Store.Implementation.ContextBoundSettingsStoreLive.ContextBoundMountsInfoLiveOnContextRange.myMountsLive"/>.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Store.Implementation.ContextBoundSettingsStoreLive.ValuePropertiesSupport">
            <summary>
            Creates and manages live value properties for <see cref="T:JetBrains.Application.Settings.Store.Implementation.ContextBoundSettingsStoreLive"/>.
            Allows free-threaded property creation, so there's an object per each thread (<see cref="T:JetBrains.Application.Settings.Store.Implementation.ContextBoundSettingsStoreLive.ValuePropertiesSupport.ValuePropertiesSupportThread"/>) managing that thread's proeprties.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Store.Implementation.ContextBoundSettingsStoreLive.ValuePropertiesSupport.myLockSynchronizeShutdown">
            <summary>
            Has async threads. This lock makes sure the threads are all in a determinate state when the object is terminated on its home thread.
            Background threads take the reader lock when they're busy and cannot have the lifetime terminated.
            Foreground thread terminates the lifetime under a writer lock.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.Implementation.ContextBoundSettingsStoreLive.ValuePropertiesSupport.GetValueProperty``1(JetBrains.DataFlow.Lifetime,JetBrains.Application.Settings.SettingsScalarEntry,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>
            Gets cached value property, or creates a new one.
            The property is bound to your <paramref name="lifetime"/> and not limited by the lifetime of the <see cref="T:JetBrains.Application.Settings.Store.Implementation.ContextBoundSettingsStoreLive.ValuePropertiesSupport"/> object because the latter might be terminated on any thread which would fire acknowledgement events on a thread not expected by your code. The property will live to the lifetime you pass in here. In all correct scenarios, this is not wider than <see cref="T:JetBrains.Application.Settings.Store.Implementation.ContextBoundSettingsStoreLive.ValuePropertiesSupport"/>.
            </summary>
            <typeparam name="TValue"></typeparam>
            <param name="lifetime"></param>
            <param name="entry"></param>
            <param name="keyIndices"></param>
            <returns></returns>
        </member>
        <member name="F:JetBrains.Application.Settings.Store.Implementation.ContextBoundSettingsStoreLive.ValuePropertiesSupport.myPerThread">
            <summary>
            Per-thread props (within each thread there're no problems with threading issues).
            A thread must be pumping.
            Protected with <see cref="F:JetBrains.Application.Settings.Store.Implementation.ContextBoundSettingsStoreLive.ValuePropertiesSupport.myLockThreadList"/>.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Store.Implementation.ContextBoundSettingsStoreLive.ValuePropertiesSupport.ValuePropertiesSupportThread">
            <summary>
            Creates and manages properties on a single thread on behalf of <see cref="T:JetBrains.Application.Settings.Store.Implementation.ContextBoundSettingsStoreLive.ValuePropertiesSupport"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Store.Implementation.ContextBoundSettingsStoreLive.ValuePropertiesSupport.ValuePropertiesSupportThread.Dispatcher">
            <summary>
            Identifies the home thread of this object.
            Can only be used-accessed on home thread.
            The only exception is <see cref="M:JetBrains.Application.Settings.Store.Implementation.ContextBoundSettingsStoreLive.ValuePropertiesSupport.ValuePropertiesSupportThread.ExecuteChange(JetBrains.Application.Settings.SettingsStoreChangeArgs)"/> which is called on the change-dispatching background thread.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Store.Implementation.ContextBoundSettingsStoreLive.ValuePropertiesSupport.ValuePropertiesSupportThread.myActiveProperties">
            <summary>
            Properties which are alive.
            Protected with <see cref="F:JetBrains.Application.Settings.Store.Implementation.ContextBoundSettingsStoreLive.ValuePropertiesSupport.ValuePropertiesSupportThread.myLock"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.Implementation.ContextBoundSettingsStoreLive.ValuePropertiesSupport.ValuePropertiesSupportThread.GetValueProperty``1(JetBrains.DataFlow.Lifetime,JetBrains.Application.Settings.SettingsScalarEntry,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>
            Gets or creates the property (in responce to a user's call to <see cref="M:JetBrains.Application.Settings.IContextBoundSettingsStoreLive.GetValueProperty``1(JetBrains.DataFlow.Lifetime,JetBrains.Application.Settings.SettingsScalarEntry,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})"/>).
            Must be called on home thread of this object.
            NOTE: synchronization lock must be held by the caller.
            </summary>
            <typeparam name="TValue"></typeparam>
            <param name="lifetime"></param>
            <param name="entry"></param>
            <param name="keyIndices"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.Implementation.ContextBoundSettingsStoreLive.ValuePropertiesSupport.ValuePropertiesSupportThread.GetValueProperty_Create``1(JetBrains.Application.Settings.SettingsScalarEntry,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object},JetBrains.Application.Settings.Storage.KeyPathComponents)">
            <summary>
            Works when the property has to be created.
            Must be called on home thread of this object.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.Implementation.ContextBoundSettingsStoreLive.ValuePropertiesSupport.ValuePropertiesSupportThread.ExecuteChange(JetBrains.Application.Settings.SettingsStoreChangeArgs)">
            <summary>
            This function is called on an arbitrary thread so that this object analyzed possible changes for its properties (on that thread) and then marshalled to the destination thread to update the property value, as appropriate.
            NOTE: owner calls this function under synchronization which makes sure the lifetime won't be terminated while we're here.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Store.Implementation.ContextBoundSettingsStoreLive.ValuePropertiesSupport.ValuePropertiesSupportThread.ValueProperty">
            <summary>
            Base untyped nongeneric property class to enable managing properties of all types in a loop.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Store.Implementation.ContextBoundSettingsStoreLive.ValuePropertiesSupport.ValuePropertiesSupportThread.ValueProperty.FGetItemKey">
            <summary>
            Cached key getter for dictionary-like bin-search arrays.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Store.Implementation.ContextBoundSettingsStoreLive.ValuePropertiesSupport.ValuePropertiesSupportThread.ValueProperty.TokenUpdateFromSettingsStore">
            <summary>
            When a property change is annotated with this token, then it's due to a sync to the settings store change.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.Implementation.ContextBoundSettingsStoreLive.ValuePropertiesSupport.ValuePropertiesSupportThread.ValueProperty.Cast``1">
            <summary>
            Returns the typed version: casts if it's really the proper type, or thows if this is a property of some other type.
            </summary>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.Implementation.ContextBoundSettingsStoreLive.ValuePropertiesSupport.ValuePropertiesSupportThread.ValueProperty.AttachToLifetime(JetBrains.DataFlow.Lifetime)">
            <summary>
            Adds one more user request for this property to keep it alive.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.Implementation.ContextBoundSettingsStoreLive.ValuePropertiesSupport.ValuePropertiesSupportThread.ValueProperty.ReadValueFromStore">
            <summary>
            Re-reads property value from the Settings Store.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Store.Implementation.ContextBoundSettingsStoreLive.ValuePropertiesSupport.ValuePropertiesSupportThread.ValueProperty`1">
            <summary>
            Wraps functioning of a single SettingsStore bidi-bound property.
            </summary>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.Implementation.ContextBoundSettingsStoreLive.ValuePropertiesSupport.ValuePropertiesSupportThread.ValueProperty`1.AttachToLifetime(JetBrains.DataFlow.Lifetime)">
            <summary>
            Property is attached to each of the user's lifetimes, to be terminated when there're no clients for the property.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Store.Implementation.DefaultIsAvailableOptimizedGroup">
            <summary>
            Default optimized group hosts just one item for which there was never ever a fitting group found.
            It does not accept any other items so that not to steal good items from their specialized groups.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.IIsAvailableOptimizedGroup">
            <summary>
            Optimizes querying availability of a group of items with one call.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.IIsAvailableOptimizedGroup.TryAddItem(JetBrains.DataFlow.Lifetime,System.Object,JetBrains.Application.Settings.IIsAvailable)">
            <summary>
            <para>Tells whether the given item belongs to this availability group, and will be returned from <see cref="M:JetBrains.Application.Settings.IIsAvailableOptimizedGroup.EvaluateItems(System.Collections.IList,JetBrains.Application.DataContext.IDataContext)"/> when it fits.</para>
            <para>If yes, adds the item to the group for the duration of the <paramref name="lifetime"/>.</para>
            <para>Must be thread-safe.</para>
            </summary>
            <param name="lifetime">If the item fits, it should be managed by the group for the duration of the lifetime. If the item does not fit, this function MUST NOT add actions to the lifetime.</param>
            <param name="item">The item to try adding to the group.</param>
            <param name="availability">Availability object of the item being added to the group. Validate it for being fit for management by this group.</param>
            <returns><c>True</c> if item is added and tied to the lifetime, <c>False</c> otherwise.</returns>
        </member>
        <member name="M:JetBrains.Application.Settings.IIsAvailableOptimizedGroup.EvaluateItems(System.Collections.IList,JetBrains.Application.DataContext.IDataContext)">
            <summary>
            <para>Evaluates items in the group for availability.</para>
            <para>Must be thread-safe.</para>
            </summary>
            <param name="items">Target list to which the fitting items of this group should be added (to the end, in an undefined order).</param>
            <param name="context">The context against which the availability of the items in the group should be checked.</param>
        </member>
        <member name="P:JetBrains.Application.Settings.IIsAvailableOptimizedGroup.Items">
            <summary>
            <para>Gets the list of items currently in the group (such that were submitted to <see cref="M:JetBrains.Application.Settings.IIsAvailableOptimizedGroup.TryAddItem(JetBrains.DataFlow.Lifetime,System.Object,JetBrains.Application.Settings.IIsAvailable)"/> with <c>True</c> result, and whose lifetime has not been terminated).</para>
            <para>Mostly used for reclaiming groups in which no items remain.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Store.Implementation.DefaultIsAvailableOptimizedGroup.myItemArrayWhenPresent">
            <summary>
            Caches the item array when it's actually present.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Store.Implementation.DefaultSettingsMountPoints">
            <summary>
            Helps with mounting your storages representing the default settings of the product: you cannot specify default values for indexed entries and keys, you have to mount a storage which provides them at the lowest-priortity level.
            You could use this component to load them from resources and such.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.Implementation.DefaultSettingsMountPoints.LoadFromResources(JetBrains.DataFlow.Lifetime,System.Reflection.Assembly,System.String)">
            <summary>
            Loads a settings storage from an XML resource and mounts into the settings store into the global context at a low priority.
            NOTE: you SHOULD rather implement <see cref="T:JetBrains.Application.Settings.IHaveDefaultSettingsStream"/> for pull-providing the default settings storage instead of calling this method push-style.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.Implementation.DefaultSettingsMountPoints.LoadFromStream(JetBrains.DataFlow.Lifetime,System.String,System.IO.Stream)">
            <summary>
            Loads a settings storage from an XML stream and mounts into the settings store into the global context at a low priority.
            NOTE: you SHOULD rather implement <see cref="T:JetBrains.Application.Settings.IHaveDefaultSettingsStream"/> for pull-providing the default settings storage instead of calling this method push-style.
            </summary>
            <param name="lifetime">Lifetime for the storage.</param>
            <param name="name">Storage name.</param>
            <param name="stream">The stream in Storage XML format to read the storage contents from. You can dispose of the stream immediately after calling this method.</param>
        </member>
        <member name="F:JetBrains.Application.Settings.Store.Implementation.DefaultSettingsMountPoints.DefaultSettingsComposedStorage.myMountsCurrentlyComposed">
            <summary>
            What currently takes part in composition.
            Read/write access under <see cref="F:JetBrains.Application.Settings.Store.Implementation.DefaultSettingsMountPoints.DefaultSettingsComposedStorage.myLockData"/> only.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Store.Implementation.DefaultSettingsMountPoints.DefaultSettingsComposedStorage.myMountsDesiredComposition">
            <summary>
            What should take part in composition after a Compose call.
            Read/write access under <see cref="F:JetBrains.Application.Settings.Store.Implementation.DefaultSettingsMountPoints.DefaultSettingsComposedStorage.myLockData"/> only.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Store.Implementation.DefaultSettingsMountPoints.DefaultSettingsComposedStorage.myStorageComposed">
            <summary>
            We recompose this from time to time taking all of the <see cref="F:JetBrains.Application.Settings.Store.Implementation.DefaultSettingsMountPoints.DefaultSettingsComposedStorage.myMountsAwaitingComposition"/> into it.
            NULL when no valid storage composed yet.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Store.Implementation.DefaultSettingsMountPoints.DefaultSettingsComposedStorage.myMountsAwaitingComposition">
            <summary>
            When new mounts are added, before next recomposition they're pending in this list.
            Write access udner <see cref="F:JetBrains.Application.Settings.Store.Implementation.DefaultSettingsMountPoints.DefaultSettingsComposedStorage.myLockData"/>.
            Read access (e.g. when accessing not-yet-composed layers) is lock-free.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.Implementation.DefaultSettingsMountPoints.DefaultSettingsComposedStorage.AddMount(JetBrains.DataFlow.Lifetime,JetBrains.Application.Settings.ISettingsStorageMountPoint)">
            <summary>
            Adds/removes a mount.
            The changes are not quite applied until you call <see cref="M:JetBrains.Application.Settings.Store.Implementation.DefaultSettingsMountPoints.DefaultSettingsComposedStorage.Compose"/>.
            </summary>
            <param name="lifetime"></param>
            <param name="mount"></param>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.Implementation.DefaultSettingsMountPoints.DefaultSettingsComposedStorage.Compose">
            <summary>
            Composes pending things.
            Free-threaded.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.Implementation.DefaultSettingsMountPoints.DefaultSettingsComposedStorage.Compose_Add(JetBrains.Application.Settings.ISettingsStorageMountPoint)">
            <summary>
            New mountpoint in composition.
            Just add its data to the composed storage.
            </summary>
            <param name="mount"></param>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.Implementation.DefaultSettingsMountPoints.DefaultSettingsComposedStorage.Compose_Remove(JetBrains.Application.Settings.ISettingsStorageMountPoint,JetBrains.Application.Settings.ISettingsStorageMountPoint[])">
            <summary>
            Mountpoint being removed.
            Enum its values and see if any of the remaining mounts still provides a value for the same key.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.IHaveDefaultSettingsStream">
            <summary>
            If you got default settings to be always preloaded into the Settings Store, you can either push them into the <see cref="T:JetBrains.Application.Settings.Store.Implementation.DefaultSettingsMountPoints"/> (NOT recommended) or expose by implementing this interface. In the latter case, they will be available immediately upon composition, and the composition will be more performant.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.IHaveDefaultSettingsStream.GetDefaultSettingsStream(JetBrains.DataFlow.Lifetime)">
            <summary>
            Requests your settings for loading into the system as default settings.
            </summary>
            <param name="lifetime">Lifetime of caller's use of the returned stream.</param>
            <returns>The stream which can be loaded into an <see cref="T:JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageStreamSerialization"/>. It is the callee's responsibility to dispose of the stream correctly if needed, according to the lifetime provided by the caller. Returning a NULL is a valid case if you SUDDENLY discovered you would not like to provide settings in this environment.</returns>
        </member>
        <member name="P:JetBrains.Application.Settings.IHaveDefaultSettingsStream.Name">
            <summary>
            The name for the mounting point which will be mounting your settings stream into the settings store.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Store.Implementation.IsAvailable">
            <summary>
            Availability function which tells whether the owner is avwailable in the given <see cref="T:JetBrains.Application.DataContext.IDataContext"/>.
            Default implementation.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.IIsAvailable">
            <summary>
            Availability function which tells whether the owner is avwailable in the given <see cref="T:JetBrains.Application.DataContext.IDataContext"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.IIsAvailable.IsAvailable(JetBrains.Application.DataContext.IDataContext)">
            <summary>
            Gets whether the owner is available in the given <see cref="T:JetBrains.Application.DataContext.IDataContext"/>.
            </summary>
            <param name="context">The data context which defines the availability.</param>
            <returns>Availability.</returns>
        </member>
        <member name="F:JetBrains.Application.Settings.Store.Implementation.IsAvailable.Always">
            <summary>
            Always available.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Store.Implementation.IsAvailable.Never">
            <summary>
            Never available.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.Implementation.IsAvailable.Create(System.Func{JetBrains.Application.DataContext.IDataContext,System.Boolean})">
            <summary>
            Constructor wrapper for smart completion.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.IIsAvailableOptimization">
            <summary>
            Availability function which allows to group a set of items and calculate their availability in one action (<see cref="T:JetBrains.Application.Settings.IIsAvailableOptimizedGroup"/>).
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.IIsAvailableOptimization.CreateEmptyGroup">
            <summary>
            Creates a new empty optimization group might be optimizing this item. This group MUST accept the item it was created from when it is passed to <see cref="M:JetBrains.Application.Settings.IIsAvailableOptimizedGroup.TryAddItem(JetBrains.DataFlow.Lifetime,System.Object,JetBrains.Application.Settings.IIsAvailable)"/>.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Store.Implementation.IsAvailable.Everavailable.OptimizationGroup">
            <summary>
            Groups all of the items that are always available. Just pours them into the list.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Store.Implementation.IsAvailable.Neveravailable.OptimizationGroup">
            <summary>
            Groups all of the items that are never available. Just skips them all off the output.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Store.Implementation.IsAvailableByDataConstant`1">
            <summary>
            Checks availability by comparing a dataconstant in the datacontext to the predefined value.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.Implementation.IsAvailableByDataConstant`1.#ctor(JetBrains.DataFlow.Lifetime,JetBrains.Application.DataContext.DataConstant{`0},`0,JetBrains.Application.IShellLocks)">
            <summary>
            Checks availability by comparing a dataconstant in the datacontext to the predefined value.
            </summary>
            <param name="lifetime">The limiting lifetime for the <paramref name="value"/> you supplied. The value will not be used after the lifetime terminates.</param>
            <param name="constant">The data constant to get from the data context.</param>
            <param name="value">The value of <paramref name="constant"/> in the datacontext must be equal to this <paramref name="value"/> for the availability to be <c>True</c>.</param>
            <param name="locks">Optional locks. If specified, data context access will be protected with a reader lock.</param>
        </member>
        <member name="T:JetBrains.Application.Settings.Store.Implementation.IsAvailableByDataConstant`1.OptimizedGroup">
            <summary>
            Hashmap of available items set by data constant value.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Store.Implementation.ISettingsChangeDispatch">
            <summary>
            Defines the strategy for dispatching changes in settings.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.Implementation.ISettingsChangeDispatch.RegisterForDispatch(JetBrains.DataFlow.Lifetime,System.Action)">
            <summary>
            Registers with a grouping-event-like interface for doing the dispatch.
            Call the returned function when you want to schedule a dispatch, and your <paramref name="FDispatch"/> will be called on an undefined thread when it's time to (in the same manner as grouping event's incoming-outgoing).
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.Implementation.ISettingsChangeDispatch.SuppressThreadDispatch">
            <summary>
            Prevents changes from being dispatched on this thread.
            You must thoroughly balance <see cref="M:JetBrains.Application.Settings.Store.Implementation.ISettingsChangeDispatch.SuppressThreadDispatch"/> and <see cref="M:JetBrains.Application.Settings.Store.Implementation.ISettingsChangeDispatch.ResumeThreadDispatch"/> calls.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.Implementation.ISettingsChangeDispatch.ResumeThreadDispatch">
            <summary>
            Resumes changes dispatch on this thread.
            You must thoroughly balance <see cref="M:JetBrains.Application.Settings.Store.Implementation.ISettingsChangeDispatch.SuppressThreadDispatch"/> and <see cref="M:JetBrains.Application.Settings.Store.Implementation.ISettingsChangeDispatch.ResumeThreadDispatch"/> calls.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Store.Implementation.Provider`1">
            <summary>
            Default implementation of the <see cref="T:JetBrains.Application.Settings.IProvider`1"/> interface.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.Implementation.ReadonlyXmlStreamSettingsStorage.ReadFromXmlStream(JetBrains.DataFlow.Lifetime,System.String,System.IO.Stream,JetBrains.Util.ILogger)">
            <summary>
            Creates a new storage and reads XML stream contents into it.
            </summary>
            <param name="lifetime">Lifetime for the storage.</param>
            <param name="name">Storage name.</param>
            <param name="stream">The stream in Storage XML format to read the storage contents from. You can dispose of the stream immediately after calling this method.</param>
            <param name="logger"></param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.Application.Settings.Store.Implementation.ScalarSettingsStoreAccess">
            <summary>
            Simple interface for accessing the Settings Store on a single mounting point only.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.Implementation.ScalarSettingsStoreAccess.FillKeyPathComponentsAndCheckIsDefined(JetBrains.Application.Settings.Storage.KeyPathComponents,JetBrains.Application.Settings.ISettingsStorageMountPoint,JetBrains.Application.Settings.SettingsEntry,System.Object,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object},JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext,JetBrains.Util.ILogger)">
            <summary>
            Builds storage keypath for the settings key, and checks that all the indexed keys in the path are marked as defined in the store.
            </summary>
            <param name="keyPathComponents"></param>
            <param name="mount"> </param>
            <param name="entry"></param>
            <param name="indexToEntry"></param>
            <param name="keyIndices"></param>
            <param name="transaction"> </param>
            <param name="logger"> </param>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.Implementation.ScalarSettingsStoreAccess.FillKeyPathComponentsAndCheckIsDefined(JetBrains.Application.Settings.Storage.KeyPathComponents,JetBrains.Application.Settings.ISettingsStorageMountPoint,JetBrains.Application.Settings.SettingsKey,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object},JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext,JetBrains.Util.ILogger)">
            <summary>
            Builds storage keypath for the settings key, and checks that all the indexed keys in the path are marked as defined in the store.
            </summary>
            <param name="keyPathComponents"></param>
            <param name="mount"> </param>
            <param name="key"></param>
            <param name="keyIndices"></param>
            <param name="transaction"> </param>
            <param name="logger"> </param>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.Implementation.ScalarSettingsStoreAccess.FillKeyPathComponentsWithoutChecking(JetBrains.Application.Settings.Storage.KeyPathComponents,JetBrains.Application.Settings.SettingsEntry,System.Object,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object},JetBrains.Util.ILogger)">
            <summary>
            Builds storage keypath for the settings key. Does not check that all the indexed keys in the path are marked as defined in the store (but checks that all the key indices are supplied with <paramref name="keyIndices"/>).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Store.Implementation.SettingsChangeDispatch.myDelegateComparer">
            <summary>
            <para>The current implementation of delegate's hash code in &gt;NET yields the same value for *all* the <see cref="T:System.Action"/> delegates, turning a hashset into a list. Differentiate over methods and targets.</para>
            <para>Our equality: don't allow implicit delegate equality because we're not doing “<c>-=</c>” on new method group delegates, so we're checking equality on references.</para>
            <para>Our hashcode: don't ask for method-info because it might be slow in getting out of the delegate, just check the closure instance; NOTE: now calling <c>Object::GetHashCode</c> nonvirtually on the instance to get its default instance-specific hashcode.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.Implementation.SettingsChangeDispatch.GroupingEventDispatchChanges">
            <summary>
            Async case: grouping event's outgoing action has fired.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Store.Implementation.SettingsEntryToSettingsStorageSerialization">
            <summary>
            Runtime settings store values are freehand CLR types, while writing them as settings storage values or as parts of settings storage keys (as indices) requires serializing them to primitive types.
            Here are common accessors, and the <see cref="T:JetBrains.Application.Settings.Store.Implementation.SettingsEntryToSettingsStorageSerialization.CoreStorageSerialization"/> class contains raw serialization routines.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.Implementation.SettingsEntryToSettingsStorageSerialization.DeserializeStorageValueToEntryValue(JetBrains.Application.Settings.SettingsScalarEntry,System.Object,JetBrains.Util.ILogger)">
            <summary>
            Settings Storage value serialized to a primitive type => settings store settings entry value of a CLR type.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.Implementation.SettingsEntryToSettingsStorageSerialization.DeserializeStorageValueToEntryValue(JetBrains.Application.Settings.SettingsIndexedEntry,System.Object,JetBrains.Util.ILogger)">
            <summary>
            Settings Storage value serialized to a primitive type => settings store settings entry (indexed) value of a CLR type.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.Implementation.SettingsEntryToSettingsStorageSerialization.SerializeEntryValueToStorageValue(JetBrains.Application.Settings.SettingsScalarEntry,System.Object,JetBrains.Util.ILogger)">
            <summary>
            Settings Store settings entry value of a CLR type => Settings Storage value serialized to a primitive type.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.Implementation.SettingsEntryToSettingsStorageSerialization.SerializeEntryValueToStorageValue(JetBrains.Application.Settings.SettingsIndexedEntry,System.Object,JetBrains.Util.ILogger)">
            <summary>
            Settings Store settings entry (indexed) value of a CLR type => Settings Storage value serialized to a primitive type.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.Implementation.SettingsEntryToSettingsStorageSerialization.SerializeEntryIndexToStorageValue(JetBrains.Application.Settings.SettingsIndexedEntry,System.Object,JetBrains.Util.ILogger)">
            <summary>
            Serializes an index to an indexed entry or an indexed ket for storing as a settings storage value (for info only; useful form of indices is within the settings storage key).
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.Implementation.SettingsEntryToSettingsStorageSerialization.DeserializeStorageKeyToEntryIndex(JetBrains.Application.Settings.SettingsIndexedEntry,System.String,JetBrains.Util.ILogger)">
            <summary>
            Settings Storage key part serialized to a string => settings store indexed settings entry index of a CLR type.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.Implementation.SettingsEntryToSettingsStorageSerialization.DeserializeStorageKeyToKeyIndex(JetBrains.Application.Settings.SettingsIndexedKey,System.String,JetBrains.Util.ILogger)">
            <summary>
            Settings Storage key part serialized to a string => settings store indexed settings key index of a CLR type.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.Implementation.SettingsEntryToSettingsStorageSerialization.SerializeEntryIndexToStorageKey(JetBrains.Application.Settings.SettingsIndexedEntry,System.Object,JetBrains.Util.ILogger)">
            <summary>
            Settings Store indexed settings entry index of a CLR type => part of the Settings Storage key serialized to a string.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.Implementation.SettingsEntryToSettingsStorageSerialization.SerializeKeyIndexToStorageKey(JetBrains.Application.Settings.SettingsIndexedKey,System.Object,JetBrains.Util.ILogger)">
            <summary>
            Settings Store indexed settings key index of a CLR type => part of the Settings Storage key serialized to a string.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Store.Implementation.SettingsEntryToSettingsStorageSerialization.CoreStorageSerialization">
            <summary>
            Contains raw serialization routines.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.Implementation.SettingsEntryToSettingsStorageSerialization.CoreStorageSerialization.DeserializeStorageValue(JetBrains.Application.Settings.SettingsStoreSerializerType,System.Object,System.Type,JetBrains.Util.ILogger)">
            <summary>
            <para>Deserializes a value in the settings storage back into the CLR type.</para>
            </summary>
            <returns>Note: serialization for taking part in a settings storage key has much more limitations than serializing for storing in the settings storage value, that's why there're two sets of serialization functions.</returns>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.Implementation.SettingsEntryToSettingsStorageSerialization.CoreStorageSerialization.SerializeStorageValue(JetBrains.Application.Settings.SettingsStoreSerializerType,System.Object,System.Type,JetBrains.Util.ILogger)">
            <summary>
            <para>Serializes a runtime CLR object for storing the value in the settings storage.</para>
            </summary>
            <returns>Note: serialization for taking part in a settings storage key has much more limitations than serializing for storing in the settings storage value, that's why there're two sets of serialization functions.</returns>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.Implementation.SettingsEntryToSettingsStorageSerialization.CoreStorageSerialization.DeserializeStorageKey(JetBrains.Application.Settings.SettingsStoreSerializerType,System.String,System.Type,JetBrains.Util.ILogger)">
            <summary>
            <para>Deserializes a value taken out of a settings storage key part back into the CLR type for use as an index to indexed keys/entries.</para>
            </summary>
            <returns>Note: serialization for taking part in a settings storage key has much more limitations than serializing for storing in the settings storage value, that's why there're two sets of serialization functions.</returns>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.Implementation.SettingsEntryToSettingsStorageSerialization.CoreStorageSerialization.SerializeStorageKey(JetBrains.Application.Settings.SettingsStoreSerializerType,System.Object,JetBrains.Util.ILogger)">
            <summary>
            <para>Serializes a runtime CLR index to indexed keys/entries object for using as a local name part of a settings storage key.</para>
            </summary>
            <returns>Note: serialization for taking part in a settings storage key has much more limitations than serializing for storing in the settings storage value, that's why there're two sets of serialization functions.</returns>
        </member>
        <member name="T:JetBrains.Application.Settings.Store.Implementation.SettingsEntryToSettingsStorageSerialization.CoreStorageSerialization.StringToLocalNameSerializer">
            <summary>
            <para>Serializes an arbitrary string so that it fit the charset of a local name within a storage key.</para>
            <para>The secondary objective is to retain “good” strings unmangled, i.e. if a string fits the charset already, it should be written as is to save space, speed, and human-readability.</para>
            <para>Currently the algorithm lets latin alphanumerics through, and all other characters are encoded similar to QuotedPrintable, but with an underscore as a designator instead of an equality sign.</para>
            <para>To ensure identity on all serializations of the same key, we state that <c>[0-9A-Za-z]</c> are always let thru AS IS, and all others are encoded with an <see cref="F:JetBrains.Application.Settings.Store.Implementation.SettingsEntryToSettingsStorageSerialization.CoreStorageSerialization.StringToLocalNameSerializer.EscapeCharacter">underscore</see> followed by four uppercase hex digits of the UTF-16 character code, starting with the most significant one.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Store.Implementation.SettingsEntryToSettingsStorageSerialization.CoreStorageSerialization.StringToLocalNameSerializer.EscapeCharacter">
            <summary>
            The char which leads the quoted-printable escape sequence. Followed by four uppercase hex digits.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.Implementation.SettingsEntryToSettingsStorageSerialization.CoreStorageSerialization.StringToLocalNameSerializer.Serialize(System.String)">
            <summary>
            Serializes an arbitrary strings into a localname-fitting form.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.Implementation.SettingsEntryToSettingsStorageSerialization.CoreStorageSerialization.StringToLocalNameSerializer.Deserialize(System.String)">
            <summary>
            Deserializes a previously serialized string back into the original string.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.Implementation.SettingsEntryToSettingsStorageSerialization.CoreStorageSerialization.StringToLocalNameSerializer.IsLetThruChar(System.Char)">
            <summary>
            If the char could be let thru.
            Note that even though an underscore is allowed within a local name, we reserve it for an escaping character and do not let thru.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Store.Implementation.SettingsStorageMountPoint">
            <summary>
            Default implementation for a mountpoint.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.ISettingsStorageMountPoint">
            <summary>
            To make a physical settings storage available for use with the Settings Store access, it must be mounted into the Settings Store using this interface.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.ISettingsStorageMountPoint.Name">
            <summary>
            Gets the name of the mouting point. Usually, this is the same as the storage name. However, it is possible to mount different subpaths of a storage separately, in which case individual mount names should be provided.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.ISettingsStorageMountPoint.IsAvailable">
            <summary>
            Gets whether the mounting point is available in specific contexts.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.ISettingsStorageMountPoint.Priority">
            <summary>
            Gets the priority of this mounting point.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.ISettingsStorageMountPoint.Flags">
            <summary>
            Basic characteristics of the mounting point.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.ISettingsStorageMountPoint.Metadata">
            <summary>
            Custom metadata to provide extensive information on the mounting point.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.ISettingsStorageMountPoint.Storage">
            <summary>
            Gets the underlying storage of the mounting point.
            All of the storage operations should go under <see cref="P:JetBrains.Application.Settings.ISettingsStorageMountPoint.PathInStorage"/>.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.ISettingsStorageMountPoint.PathInStorage">
            <summary>
            The mounting path in the storage under which all of the data accessible through this mounting point resides.
            This allows to mount several subparts of the same storage individually.
            </summary>
            <remarks>The type of this property is essentially a string, but it is strongly-typed to enable smart-completing typical default values when a new mounting point is created.</remarks>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.Implementation.SettingsStorageMountPoint.#ctor(JetBrains.Application.Settings.Storage.ISettingsStorage,JetBrains.Application.Settings.Store.Implementation.SettingsStorageMountPoint.MountPath,JetBrains.Application.Settings.MountPointFlags,System.Double,JetBrains.Application.Settings.IIsAvailable,System.String)">
            <summary>
            
            </summary>
            <param name="storage"></param>
            <param name="pathInStorage"></param>
            <param name="priority"></param>
            <param name="isAvailable"></param>
            <param name="name">
            <para>The name of the mouting point. Usually, this is the same as the storage name. However, it is possible to mount different subpaths of a storage separately, in which case individual mount names should be provided.</para>
            <para><c>Null</c> to use the storage name automatically.</para>
            </param>
        </member>
        <member name="T:JetBrains.Application.Settings.Store.Implementation.SettingsStorageMountPoint.MountPath">
            <summary>
            A special typed wrapper for the mounted path.
            Its main goal is to provide a convenient shortcut to the default value for the mounting path.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Store.Implementation.SettingsStorageMountPoint.MountPath.Default">
            <summary>
            The default value to be used in most cases.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.Store.Implementation.SettingsStorageMountPoint.MountPath.Value">
            <summary>
            Value inside the typed wrapper.
             TODO: minimize use of this value, because its behavior around slashes is inconsistent
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.Store.Implementation.SettingsStorageMountPoint.MountPath.KeyPathComponent">
            <summary>
            Value inside the typed wrapper.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Store.Implementation.SettingsStorageMountPoints">
            <summary>
            Accumulates all advertised settings storage mount points and optimizes typical access to them.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Store.Implementation.SettingsStorageMountPoints.myMountsGroupedByAvailabilityLocked">
            <summary>
            <para>Same mounts as in <see cref="F:JetBrains.Application.Settings.Store.Implementation.SettingsStorageMountPoints.MountPoints"/> and <see cref="F:JetBrains.Application.Settings.Store.Implementation.SettingsStorageMountPoints.EnumMountPointsLiveOrdered"/>, but here they're gathered into groups of the same priority and same availability, with an option to quickly calculate availability of the whole group.</para>
            <para>The groups (all items in group of the same priority) are sorted by priority, ascending.</para>
            <para>For access for modification and when the <see cref="F:JetBrains.Application.Settings.Store.Implementation.SettingsStorageMountPoints.myMountsGroupedByAvailabilityLockFree"/> is outdated only.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Store.Implementation.SettingsStorageMountPoints.myLockMountsGroupedByAvailabilityLocked">
            <summary>
            Locks access to <see cref="F:JetBrains.Application.Settings.Store.Implementation.SettingsStorageMountPoints.myMountsGroupedByAvailabilityLocked"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Store.Implementation.SettingsStorageMountPoints.myMountsGroupedByAvailabilityLockFree">
            <summary>
            <para>A lock-free cache of <see cref="F:JetBrains.Application.Settings.Store.Implementation.SettingsStorageMountPoints.myMountsGroupedByAvailabilityLocked"/>. When <c>Null</c>, should be recalculated from source.</para>
            <para>Recalculation is not performed on every modification because there might be many modifications in a row and here we get a chance to realloc the array only once.</para>
            <para>Reads are lock-free, writes are protected with the same lock as reads of <see cref="F:JetBrains.Application.Settings.Store.Implementation.SettingsStorageMountPoints.myMountsGroupedByAvailabilityLocked"/>.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Store.Implementation.SettingsStorageMountPoints.Empty">
            <summary>
            Gets an instance without any mountpoints at all.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.Implementation.SettingsStorageMountPoints.AssertConsistentSlow">
            <summary>
            Self-check for calling only in consistency-checking mode.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Store.Implementation.SettingsStorageMountPoints.SelfCheckControl">
            <summary>
            Whether the owning class should be doing slow self-checks on any modification to ensure consistent modification of the optimization groups.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Store.Implementation.SettingsStorageMountPoints.SelfCheckControlOffForNormalRuntime">
            <summary>
            Constructed by Shell to run the real product without this slow self-check.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Store.Implementation.SettingsStorageMountPoints.SelfCheckControlOn">
            <summary>
            Constructed by Shell to run the real product without this slow self-check.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Store.Implementation.SettingsStorageOnMountPoints">
            <summary>
            Emulates settings-storage-like API on a group of settings storages mounted with mounting points.
            This involves:
            (1) Dispatching access to mounting points favoring storage key translation against the mounting path of each mounting point.
            (2) When reading: looking thru the stack of the mounting points, along their priority, for the highest-priority defined value.
            (3) When writing: either writing to the highest possible mounting point, or implementing the SmartSave strategy.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.Implementation.SettingsStorageOnMountPoints.GetExObsolete(System.String,JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext)">
            <summary>
            Gets the value along with the exact storage in which the value was found.
            If the value is not found in either storage, the whole return value is <c>Null</c>, not only the tuple components.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.Implementation.SettingsStorageOnMountPoints.GetExRaw(JetBrains.Application.Settings.Storage.KeyPathComponents,JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext,JetBrains.Util.ILogger)">
            <summary>
            Gets the value along with the exact storage in which the value was found.
            If the value is not found in either storage, the whole return value is <c>Null</c>, not only the tuple components.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.Implementation.SettingsStorageOnMountPoints.SetSmartRaw(JetBrains.Application.Settings.Storage.KeyPathComponents,System.Object,JetBrains.Application.Settings.Store.Implementation.SettingsStorageOnMountPoints.SetFlags,JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext)">
            <summary>
            A shortcut to <see cref="M:JetBrains.Application.Settings.Store.Implementation.SettingsStorageOnMountPoints.SetSmartRaw(JetBrains.Application.Settings.Storage.KeyPathComponents,System.Object,JetBrains.Application.Settings.Store.Implementation.SettingsStorageOnMountPoints.SetFlags,JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext)"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.Implementation.SettingsStorageOnMountPoints.SetSmartRaw(JetBrains.Application.Settings.Storage.KeyPathComponents,System.Object,JetBrains.Application.Settings.Store.Implementation.SettingsStorageOnMountPoints.SetFlags,JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext,JetBrains.Application.Settings.Storage.KeyPathComponent@,System.Object)">
            <summary>
            Sets a value, according with the SmartSave strategy.
            </summary>
            <remarks>
            <para>Here's a detailed description of what SmartSave startegy is about.</para>
            <para>We operate on a layered structure of settings mount points, ordered by priority, some of them writable and some not. A typical picture (as per specific context of a project file) would be:</para>
            <para>• Global User Settings (writable, lowest priority)</para>
            <para>• Solution Shared Settings (R/O)</para>
            <para>• Solution User Settings (writable)</para>
            <para>• Project Shared Settings (R/O)</para>
            <para>• Project User Settings (writable, highest priority)</para>
            <para>Besides that, non-indexed entries have default values defined for them in the Schema, which take effect when neither of this layers has a value defined for the entry.</para>
            <para>SmartSave follows the policy:</para>
            <para><b>(1)</b> As we set the value, the effective value of this context must be read from the deepest layer possible (Defaults is the best choice).</para>
            <para><b>(2)</b> The value assigned must also be effective in all the “parent” contexts of this context.</para>
            <para>These rules guarantee that if user changes a setting here he will also see the effect in other files/projects/solutions, unless explicitly overridden there.</para>
            <para>To fullfill rule 1, we shouldn't be writing into more-specific layers unless we really have to. By default we're writing to the global layer, wiping out all of the more specific overrides. If there're any readonly overrides, we also set the desired value into the lowest availavble writable layer above which there're no overrides for this setting in readonly layers.</para>
            <para>To fullfill rule 2, we're covering each override defined in a readonly layer with a higher-priority override in the nearest writable layer. Even though of all such overrides only the highest one can bee “seen” in exactly this context, overriding intermediate ones guarantees the new value is consistent through all contexts.</para>
            <para>Extension for the secondary value smart-set simultaneousely: this allows to smart-set the primary value almost as usual plus some additional value to have the desired value on all of the mounts which have the primary value assigned, if possible. This is to implement the indexed value removal flag: it's queried for only on the same mount as the value itself, and when setting/removing an indexed value it must take the correct true/false form. In our algorithm, besides writing one more value, this affects the detection of whether we have to cover an override in a readonly layer: the primary value might be OK but the secondary one is bad =&gt; both must be written to a higher-priority writable layer for correct behavior.</para>
            </remarks>
            <param name="keyPathComponentsWithEmptySlot">Storage key to the value (with the first empty slot for MountGet/MountSet).</param>
            <param name="valuePrimary">A non-<c>Null</c> value to set. You cannot set value to <c>Null</c> in terms of the SmartSave strategy (but setting to default value is likely to have such an effect), the set-to-<c>Null</c> operation is only applicable when writing to specific mounting points.</param>
            <param name="flags"></param>
            <param name="transaction"></param>
            <param name="componentSecondary">If we're co-setting the secondary value (<see cref="!:valueSecondary"/> is non-<c>Null</c>), specifies the replacement key path component for the last path component of the primary value (<see cref="!:keyPathComponentsWithEmptySlot"/>). Hence, the secondary value can differ in the last path component only. Passed byref to save on params stack.</param>
            <param name="valueSecondary">If we're co-setting the secondary value, gives the non-<c>Null</c> secondary value (<paramref name="flags"/> define whether it's the default value). If <c>Null</c>, we're not co-setting.</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.Implementation.SettingsStorageOnMountPoints.EnumKeysObsolete(System.String,JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext)">
            <summary>
            Enums keys from all the mounts. Duplicates are removed.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.Implementation.SettingsStorageOnMountPoints.CopyToObsolete(JetBrains.Application.Settings.ISettingsStorageMountPoint,JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext,JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext,JetBrains.Util.ILogger,System.String)">
            <summary>
            Copies the contents of this layered storage to the target mounting point.
            </summary>
            <param name="mountTarget"></param>
            <param name="transactionThis"></param>
            <param name="transactionTarget"></param>
            <param name="logger">Reports outer errors with copying. Note that in-storage failures will go to the logging facility of the respective storage.</param>
            <param name="sRootKey">Optional. If only a part of the mounting point's contents should be copied, specifies the root key of the data to copy. If <c>Null</c> or an empty string, the whole storage under the mounting path will be copied.</param>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.Implementation.SettingsStorageOnMountPoints.EraseObsolete(System.String,System.Boolean,JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext)">
            <summary>
            Erases all of the data in all the [writable] layers under the given key.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.Implementation.SettingsStorageOnMountPoints.IsMountWritable(JetBrains.Application.Settings.ISettingsStorageMountPoint,System.Boolean)">
            <summary>
            Gets whether we should be writing into the mounting point, favoring its writeability flags and whether we're in the ignore-readonly-flag mode.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.Implementation.SettingsStorageOnMountPoints.EnumRaw(JetBrains.Application.Settings.Storage.KeyPathComponents,System.Int32,System.Action{JetBrains.Application.Settings.Storage.KeyPathComponents,System.Object},JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext)">
            <summary>
            Enumerates all of the mounted storages, either under a specific key, or the whole mounted section.
            </summary>
            <param name="keyPathComponentsWithEmptySlot">Storage key to the root to be enumerated (with the first empty slot for MountEnum).</param>
            <param name="nTakeChildLevelOnly"></param>
            <param name="FCallback">Calls you back on each encountered storage key. Includes the mountpath in the first component (whatever it is, not necessarily default/empty). Might call multuple times for the same path if it's present in more than one mountpoint.</param>
            <param name="transaction"></param>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.Implementation.SettingsStorageOnMountPoints.JetBrains#Application#Settings#Storage#ISettingsStorage#Enum(JetBrains.Application.Settings.Storage.KeyPathComponents,System.Int32,System.Action{JetBrains.Application.Settings.Storage.KeyPathComponents,System.Object},JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext)">
            <summary>
            Warning! This method is slower than calling <see cref="M:JetBrains.Application.Settings.ISettingsStorageMountPointEx.MountEnumRaw(JetBrains.Application.Settings.ISettingsStorageMountPoint,JetBrains.Application.Settings.Storage.KeyPathComponents,System.Int32,System.Action{JetBrains.Application.Settings.Storage.KeyPathComponents,System.Object},JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext,JetBrains.Util.ILogger)"/> manually because here it has to cut the first path component out of the mount-enummed data.
            </summary>
            <param name="root"></param>
            <param name="nTakeChildLevelOnly"></param>
            <param name="FCallback"></param>
            <param name="transaction"></param>
        </member>
        <member name="T:JetBrains.Application.Settings.Store.Implementation.SettingsStorageOnMountPoints.SetSmartResult">
            <summary>
            The replacement dummy empty <see cref="T:JetBrains.Application.Settings.Store.Implementation.SettingsStorageOnMountPoints.SetSmartResult"/> ('cause we don't need its data at the moment and want to keep the stack memory low, and don't want to drop all of the code yet, it's useful for debug and such).
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Store.Implementation.SettingsStorageOnMountPoints.SetSmartResult_ReplacedWithDummy">
            <summary>
            This is the real <see cref="T:JetBrains.Application.Settings.Store.Implementation.SettingsStorageOnMountPoints.SetSmartResult"/>.
            Has been replaced by a dummy to save on stack traffic because right now we seemingly do not need the thing.
            If it's ever required again, just rename it back.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Store.Implementation.SettingsStorageOnMountPoints.SetSmartResult_ReplacedWithDummy.EffectiveReadMountPoint">
            <summary>
            The mount which provides the newly-set value.
            Returned non-<c>Null</c> in SmartSave case if succeeded to set the value (can fail if writing to writables only and another value is set in a higher-priority readonly mount), <c>Null</c> otherwise (because direct-write does not read any values).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Store.Implementation.SettingsStorageOnMountPoints.SetSmartResult_ReplacedWithDummy.WrittenTo">
            <summary>
            The list of mounting points we've written to.
            In non-smart-save case, just the highest-priority [writable] mounting point.
            In smart-save case, when setting a <c>Null</c> value, all of the mounting points we've removed value from.
            In smart-save case, when setting a non-<c>Null</c> value: could be empty if non-must-write, or just the wide mounting point, or wide than narrow (if writing to wide didn't have effect for layered reading).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Store.Implementation.SettingsStorageOnMountPoints.SetSmartResult_ReplacedWithDummy.IsSuccessful">
            <summary>
            Whether we succeeded to make the given value the effective value of the context.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Store.Implementation.SettingsStorageOnMountPoints.SetSmartResult_ReplacedWithDummy.EffectiveReadLayerIndex">
            <summary>
            Index of the <see cref="F:JetBrains.Application.Settings.Store.Implementation.SettingsStorageOnMountPoints.SetSmartResult_ReplacedWithDummy.EffectiveReadMountPoint"/> as a layer in the layered structure.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.Implementation.SettingsStorageOnMountPoints.SetSmartResult_ReplacedWithDummy.SetResult(System.Boolean,System.Int32,JetBrains.Application.Settings.ISettingsStorageMountPoint)">
            <summary>
            Assigns the result-outlining properties.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Store.Implementation.SettingsStorageOnMountPoints.SetSmartResult_ReplacedWithDummy.WriteData.MountPoint">
            <summary>
            The mounting point the write was performed into.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Store.Implementation.SettingsStorageOnMountPoints.SetSmartResult_ReplacedWithDummy.WriteData.Action">
            <summary>
            Why this layer is listed.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Store.Implementation.SettingsStorageOnMountPoints.SetSmartResult_ReplacedWithDummy.WriteData.LayerIndex">
            <summary>
            Index of the <see cref="F:JetBrains.Application.Settings.Store.Implementation.SettingsStorageOnMountPoints.SetSmartResult_ReplacedWithDummy.WriteData.MountPoint"/> as a layer in the layered structure.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Store.Implementation.SettingsStorageOnMountPoints.SetFlags.IgnoreReadonlyFlag">
            <summary>
            Set: does not favor <see cref="F:JetBrains.Application.Settings.MountPointFlags.IsWritable"/> when looking for the mount to write to.
            Not set: writes only to <see cref="F:JetBrains.Application.Settings.MountPointFlags.IsWritable"/> mounts.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Store.Implementation.SettingsStorageOnMountPoints.SetFlags.IsNullValueOk">
            <summary>
            Some values have implicit defaults which take effect when a value is not set on any layers. When we're setting a value which is the same as the defaults, the preferrable behavior for SmartSave is toIf during SmartSave we're able to wipe out all of the values set in layers so that reading the storage returns <c>Null</c>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Store.Implementation.SettingsStorageOnMountPoints.SetFlags.IsSecondaryNullValueOk">
            <summary>
            Same as <see cref="F:JetBrains.Application.Settings.Store.Implementation.SettingsStorageOnMountPoints.SetFlags.IsNullValueOk"/>, but applies to the secondary value of the <see cref="M:JetBrains.Application.Settings.Store.Implementation.SettingsStorageOnMountPoints.SetSmartRaw(JetBrains.Application.Settings.Storage.KeyPathComponents,System.Object,JetBrains.Application.Settings.Store.Implementation.SettingsStorageOnMountPoints.SetFlags,JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext)"/> method.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Store.Implementation.SettingsStorageOnMountPoints.SmartWriteAction.PassedReadonlyOk">
            <summary>
            Encountered a value in a readonly layer which was equal to the desired value.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Store.Implementation.SettingsStorageOnMountPoints.SmartWriteAction.PassedReadonlyConflicting">
            <summary>
            Encountered a value in a readonly layer which was not equal to the desired value.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Store.Implementation.SettingsStorageOnMountPoints.SmartWriteAction.ValueAlreadyWritten">
            <summary>
            Was about to write a value to a writable layer (to cover defaults or readonlies), but the layer is already set to the desired value.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Store.Implementation.SettingsStorageOnMountPoints.SmartWriteAction.WroteValue">
            <summary>
            Wrote the desired value to a writable layer.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Store.Implementation.SettingsStorageOnMountPoints.SmartWriteAction.ErasedValue">
            <summary>
            Erased a value from a writable layer.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Store.Implementation.SettingsStore">
            <summary>
            Main implementation of the Settings Store.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.ISettingsStoreInTransaction">
            <summary>
            An interface to the settings store that has been created as a child transaction to some other settings store.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:JetBrains.Application.Settings.ISettingsStore" -->
        <member name="M:JetBrains.Application.Settings.ISettingsStore.BindToContextLive(JetBrains.DataFlow.Lifetime,JetBrains.Application.Settings.ContextRange,JetBrains.Application.Settings.Store.Implementation.BindToContextFlags)">
            <summary>
            <para>Binds Settings Store for reading and writing values in a specific context.</para>
            <para>The resulting object is live, which means it will see the newly-added mounting points (if they fit the context) and can fire events when settings change in this context.</para>
            </summary>
            <param name="lifetime">Lifetime for the live context.</param>
            <param name="contextrange">Range of the contexts for reading and writing.</param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.Settings.ISettingsStore.BindToContextTransient(JetBrains.Application.Settings.ContextRange,JetBrains.Application.Settings.Store.Implementation.BindToContextFlags)">
            <summary>
            <para>A lightweight method which binds Settings Store for reading and writing values in a specific context.</para> 
            <para>Do not store the resulting objects because they will not see any newly-added mounts. Does not require a lifetime.</para>
            </summary>
            <param name="contextrange">Range of the contexts for reading and writing.</param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.Settings.ISettingsStore.CreateNestedTransaction(JetBrains.DataFlow.Lifetime,System.String)">
            <summary>
            <para>Creates a nested transaction in the current Settings Store.</para>
            <para>All of the changes to the transacted Settings Store are not visible outside the transaction until you commit them.</para>
            <para>You have the same interface to the transacted Settings Store as to the normal one, with addition of a few methods for committing and reverting its transaction.</para>
            </summary>
            <param name="lifetime">Lifetime of the transaction. The transaction is automatically reverted when this lifetime ends. If you would like to commit the changes, call <see cref="M:JetBrains.Application.Settings.ISettingsStoreInTransaction.CommitTransaction"/> before terminating the transaction lifetime.</param>
            <param name="name"></param>
        </member>
        <member name="M:JetBrains.Application.Settings.ISettingsStore.GetOrderedMountPointsInContext(JetBrains.Application.DataContext.IDataContext)">
            <summary>
            Returns the sequence of mounting points applicable to the specified context, sorted by priority ascending.
            </summary>
            <param name="context">Filtering context.</param>
            <returns>Sequence.</returns>
        </member>
        <member name="M:JetBrains.Application.Settings.ISettingsStore.BindToMountPoints(System.Collections.Generic.IEnumerable{JetBrains.Application.Settings.ISettingsStorageMountPoint},JetBrains.Application.Settings.ISettingsStorageMountPoint,JetBrains.Application.Settings.Store.Implementation.BindToContextFlags)">
            <summary>
            Binds the context to the explicitly specified mount points.
            With non-transacted settings store, this means just creating a new bound store on the mount points.
            In transacted stores, the current implementation of the transactions means adding a new overlay mounting point per each orignal mounting point. That's why we need to pipe context creation thru the transacted store object: to add the overlay mounts correctly.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.ISettingsStore.BindToMountPoints(JetBrains.DataFlow.Lifetime,JetBrains.DataFlow.IListEvents{JetBrains.Application.Settings.ISettingsStorageMountPoint},JetBrains.DataFlow.IProperty{JetBrains.Application.Settings.ISettingsStorageMountPoint},JetBrains.Application.Settings.Store.Implementation.BindToContextFlags)">
            <summary>
            Binds the context to the explicitly specified mount points.
            With non-transacted settings store, this means just creating a new bound store on the mount points.
            In transacted stores, the current implementation of the transactions means adding a new overlay mounting point per each orignal mounting point. That's why we need to pipe context creation thru the transacted store object: to add the overlay mounts correctly.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.ISettingsStore.Schema">
            <summary>
            Gets the settings schema which describes possible Keys and Entries which can be read or written on the Settings Store.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.ISettingsStore.DataContexts">
            <summary>
            <para>Gets the helper object which creates the data contexts to define the contexts in which settings are read or written.</para>
            <para>For example, two project files might have different settings because different mounting points are available in their contexts.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.ISettingsStore.MountPoints">
            <summary>
            <para>Gets the total list of mounting points available for storing the settings.</para>
            <para>Binding the store to a context filters this list down to those mounting points available in a specific context.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.ISettingsStore.MountingPointsTransaction">
            <summary>
            <para>Gets the transaction object which this settings store uses for accessing the underlying mounted storages.</para>
            <para>This is always non-<c>Null</c> if this settings store is running within a transaction (and is <see cref="T:JetBrains.Application.Settings.ISettingsStoreInTransaction"/> actually).</para>
            <para>If this settings store is not in a transaction, then this is <c>Null</c>.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.ISettingsStoreInTransaction.CommitTransaction">
            <summary>
            <para>Commits the changes accumulated within this transaction to the parent context (to the real Settings Store if this is not a nested transaction).</para>
            <para>You can continue using the transaction after it's committed.</para>
            </summary>
            <remarks>The operation is thread-safe in that the Settings Store will be running consistently, but you might encounter side-effects if you are working on another thread with the transaction being committed.</remarks>
        </member>
        <member name="M:JetBrains.Application.Settings.ISettingsStoreInTransaction.RevertTransaction">
            <summary>
            <para>Reverts all of the changes performed within the transaction.</para>
            <para>You can continue using the transaction after it's reverted.</para>
            <para>Terminating the transaction lifetime also terminates the transaction, so it's not required to call <see cref="M:JetBrains.Application.Settings.ISettingsStoreInTransaction.RevertTransaction"/> before dropping the obhect.</para>
            </summary>
            <remarks>The operation is thread-safe in that the Settings Store will be running consistently, but you might encounter side-effects if you are working on another thread with the transaction being reverted.</remarks>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.Implementation.SettingsStore.#ctor(JetBrains.DataFlow.Lifetime,JetBrains.Application.Settings.ISettingsSchema,JetBrains.Application.Settings.Store.Implementation.SettingsStorageMountPoints,JetBrains.Application.DataContext.DataContexts,JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext,JetBrains.Application.Settings.Logging.ISettingsLogger,JetBrains.Application.Settings.Store.Implementation.ISettingsChangeDispatch)">
            <summary>
            Creates a new store instance.
            </summary>
            <param name="lifetime"></param>
            <param name="schema">This schema must include all of the keys and entries you intend to access thru this store.</param>
            <param name="mountpoints">The list of mounting points which are layers with settings, filtered for availability when you bind to a context.</param>
            <param name="dataContexts">Helper for creating data contexts. The store itself does not quite need it, but it's required by helper APIs for binding to the context conveniently.</param>
            <param name="transaction">Non-<c>Null</c> if this store is accessing settings within a transaction. New transactions must be opened by the calling party (e.g. <see cref="M:JetBrains.Application.Settings.Store.Implementation.SettingsStore.CreateNestedTransaction(JetBrains.DataFlow.Lifetime,System.String)"/> method).</param>
            <param name="logging">Logging facility of the Settings subsystem.</param>
            <param name="changedispatch"></param>
        </member>
        <member name="F:JetBrains.Application.Settings.Store.Implementation.BindToContextFlags.IgnoreReadonlyFlag">
            <summary>
            Writes into readonly mounting points.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Store.Implementation.SettingsStoreChangeSink">
            <summary>
            Implements sinking changes in mount point storages for the <see cref="T:JetBrains.Application.Settings.Store.Implementation.SettingsStore"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.Implementation.SettingsStoreChangeSink.RegisterMount(JetBrains.DataFlow.Lifetime,JetBrains.Application.Settings.Store.Implementation.SettingsStoreChangeSink.ClientInfo,JetBrains.Application.Settings.ISettingsStorageMountPoint,System.Boolean)">
            <summary>
            Called when a client wants to register one more mount for it, for the lifetime specified. Also called for initial lifetimes, <see cref="!:isWithAddAcknowledgement"/> is <c>False</c> for such mounts.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.Implementation.SettingsStoreChangeSink.DispatchChanges">
            <summary>
            Does processing the recorded changes (storage keys and mountpoints set) on a background thread when the grouping event ticks.
            NOTE: threading policy depends on the <see cref="T:JetBrains.Application.Settings.Store.Implementation.ISettingsChangeDispatch"/> strategy.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Store.Implementation.SettingsStoreChangeSink.myMapClientsToSimpleChanges">
            <summary>
            Individual changed keys, as should be dispatched to clients.
            The key path components of the change contain a placeholder for the mounting path.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Store.Implementation.SettingsStoreChangeSink.myMapClientsToWholeMountChanges">
            <summary>
            Whole mount contents change, as should be dispatched to clients.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Store.Implementation.SettingsStoreChangeSink.myMapMountToClients">
            <summary>
            Maps mounts to the clients which are listening for those mounts at the moment.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.Implementation.SettingsStoreChangeSink.RegisterClientForMounts(JetBrains.DataFlow.Lifetime,System.Collections.Generic.IEnumerable{JetBrains.Application.Settings.ISettingsStorageMountPoint})">
            <summary>
            Entry point for sinking any changes.
            </summary>
            <param name="lifetime">Your client lifetime.</param>
            <param name="mountsInitial">The mounts you got initially. This is a static snapshot.</param>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.Implementation.SettingsStoreChangeSink.RegisterClientForMountsLive(JetBrains.DataFlow.Lifetime,JetBrains.DataFlow.ICollectionEvents{JetBrains.Application.Settings.ISettingsStorageMountPoint})">
            <summary>
            Entry point for sinking any changes.
            </summary>
            <param name="lifetime">Your client lifetime.</param>
            <param name="mountsLive">The mounts you got initially, and any further changes to the mounts set. Changes will be fired for contents of any mounts not present initially.</param>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.Implementation.SettingsStoreChangeSink.SinkMountChanges(JetBrains.DataFlow.Lifetime,JetBrains.Application.Settings.ISettingsStorageMountPoint,JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext,JetBrains.Util.ILogger)">
            <summary>
            For each known mount, sinks its changes while its known.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.Implementation.SettingsStoreChangeSink.ClientInfo.#ctor(JetBrains.DataFlow.Lifetime,System.Collections.Generic.IEnumerable{JetBrains.Application.Settings.ISettingsStorageMountPoint},System.Action{JetBrains.DataFlow.Lifetime,JetBrains.Application.Settings.Store.Implementation.SettingsStoreChangeSink.ClientInfo,JetBrains.Application.Settings.ISettingsStorageMountPoint,System.Boolean},JetBrains.Util.ILogger)">
            <summary>
            
            </summary>
            <param name="lifetime"></param>
            <param name="mountsInitial">Enumerable, for a static collection. A <see cref="T:JetBrains.DataFlow.ICollectionEvents`1"/>, for a live collection.</param>
            <param name="FRegisterMount"></param>
            <param name="logger"></param>
        </member>
        <member name="T:JetBrains.Application.Settings.Store.Implementation.StoreToStorageTranslation">
            <summary>
            <para>Defines translation between <see cref="T:JetBrains.Application.Settings.SettingsSchema"/> in terms of end-user Settings Store entities (<see cref="T:JetBrains.Application.Settings.SettingsEntry"/>, <see cref="T:JetBrains.Application.Settings.SettingsKey"/>) to string keys in the Settings Storage which physically holds the values.</para>
            </summary>
            <remarks>
            <h1>Schema</h1>
            <para><see cref="T:JetBrains.Application.Settings.SettingsSchema">The schema</see> is the logical schema on <see cref="T:JetBrains.Application.Settings.SettingsKey">settings keys</see> / <see cref="T:JetBrains.Application.Settings.SettingsEntry">settings entries</see>, exposed to the application for getting/setting values of arbitrary user types.</para>
            <para>It is collected by reading classes with <see cref="T:JetBrains.Application.Settings.SettingsKeyAttribute"/> (which produces hierarchy of keys) and inspecting their members for <see cref="T:JetBrains.Application.Settings.SettingsEntryAttribute"/> (which produces key entries).</para>
            
            <h1>Physical Storage</h1>
            <para>Physically, all of the data is stored in the settings storage, which is a key-value store with string keys and values of a few primitive types.</para>
            <para>The logical schema maps into the settings storage keys. For each settings key or settings entry there might be zero or more metadata values written into the storage under a storage key corresponding to one of the metadata items of the key/entry. Some metadata items are required for storing/reading the value, and others are purely informational and might be used for storage browsers and human-readability.</para>
            
            <h1>Storage Keys</h1>
            <para><i>(note: there are Settings Keys, which are logical entities of the Settings Schema and which contain Settings Entries; and there are Settings Storage keys which are string values keying the physical key-value storage actually holding raw values, which is actually written to disk)</i></para>
            <para>Storage keys are slash-separated strins: <c>/one/two/three/four/@metadata</c>.</para>
            <para>The format of the storage keys strings vaguely resembles that of an XPath request. Speaking in terms of XPath, we're only addressing “xml attribute values” in the physical storage. In the storage key string, this means it always ends with “/@metadataname” (a path-separating slash, metadata prefix and name of some <see cref="T:JetBrains.Application.Settings.Store.Implementation.StoreToStorageTranslation.Metadata">metadata</see>).</para>
            <para>Here are syntax definitions of valid settings storage keys pointing to some schema-originating metadata.</para>
            <para>Settings Key metadata:</para>
            <code>
               KeyPathSeparator MountPointPathInStorage 
            
               (
                   KeyPathSeparator KeyLocalName
                   [ KeyPathSeparator ValueInLocalNamePrefix SerializedIndex ]  // Indexed keys only
               )+                                                               // Each key in parent keys chain
            
               KeyPathSeparator MetadataPrefix MetadataName
            </code>
            <para>Settings Entry metadata:</para>
            <code>
               KeyPathSeparator MountPointPathInStorage 
            
               (
                   KeyPathSeparator KeyLocalName
                   [ KeyPathSeparator ValueInLocalNamePrefix SerializedIndex ]  // Indexed keys only
               )+                                                               // Each key in parent keys chain
            
               KeyPathSeparator EntryLocalName
               [ KeyPathSeparator ValueInLocalNamePrefix SerializedIndex ]      // Indexed entries only
            
               KeyPathSeparator MetadataPrefix MetadataName
            </code>
            <para>Legend:</para>
            <list type="table">
            <listheader><term>Keyword</term><description>Meaning</description></listheader>
            <item><term><c>KeyPathSeparator</c></term><description><para><c>“/”</c>. Constant. Defined in <see cref="T:JetBrains.Application.Settings.Store.Implementation.StoreToStorageTranslation.PathComposition"/> as <see cref="F:JetBrains.Application.Settings.Store.Implementation.StoreToStorageTranslation.PathComposition.KeyPathSeparator"/>.</para><para>Separates local names of settings keys and entries, index values on indexed keys and entries, and tailing metadata name in the path making the settings storage key. Analogous to the XPath separator.</para></description></item>
            <item><term><c>ValueInLocalNamePrefix</c></term><description><para><c>“=”</c>. Constant. Defined in <see cref="T:JetBrains.Application.Settings.Store.Implementation.StoreToStorageTranslation.PathComposition"/> as <see cref="F:JetBrains.Application.Settings.Store.Implementation.StoreToStorageTranslation.PathComposition.ValueInLocalNamePrefix"/>.</para><para>When one of the storage key path components are formed from a user-supplied value (for example, indices of indexed keys or entries), denotes such keys for telling them apart from key path components coming from keys/entries' local names.</para><para>If this prefix appears after a settings key or entry local name component in the storage key path, means the key or entry is indexed rather than simple.</para></description></item>
            <item><term><c>MetadataPrefix</c></term><description><para><c>“@”</c>. Constant. Defined in <see cref="T:JetBrains.Application.Settings.Store.Implementation.StoreToStorageTranslation.PathComposition"/> as <see cref="F:JetBrains.Application.Settings.Store.Implementation.StoreToStorageTranslation.PathComposition.MetadataPrefix"/>.</para><para>The last component of the settings storage key on which actual data is stored is a metadata name, which is denoted by this prefix to tell apart from other key components.</para></description></item>
            <item><term><c>MountPointPathInStorage</c></term><description><para>This is not in the scope of this class.</para><para>This path is added by the <see cref="T:JetBrains.Application.Settings.ISettingsStorageMountPoint">mounting point</see> when it mounts a path of a physical storage for access in a specific context.</para><para>As the single storage file might host several independent mount points, they're designated with a prefix on the storage key actually written to the file.</para><para>The mounting point handles appending/removing of this prefix when exposing the storage, so store-to-storage translation does not have to deal with this prefx.</para></description></item>
            <item><term><c>KeyLocalName</c></term><description>Local name of the Settings Key. Defined by <see cref="F:JetBrains.Application.Settings.SettingsKey.LocalName"/>.</description></item>
            <item><term><c>EntryLocalName</c></term><description>Local name of the Settings Entry. Defined by <see cref="F:JetBrains.Application.Settings.SettingsEntry.LocalName"/>.</description></item>
            <item><term><c>SerializedIndex</c></term><description>An index to a particular instance of an indexed key or an indexed entry, in a serialized form. Defined by the actual index value passed to the key/entry access functions.</description></item>
            <item><term><c>MetadataName</c></term><description>Name of the metadata on this key or entry. Possible names defined in <see cref="T:JetBrains.Application.Settings.Store.Implementation.StoreToStorageTranslation.Metadata"/>, see descriptions and possible usages below.</description></item>
            </list>
            
            <h1>Settings Key</h1>
            <para>There is no required metadata for a Settings Store <see cref="T:JetBrains.Application.Settings.SettingsKey">Settings Key</see> because keys themselves have no values in Settings Store. Only entry values are written to the storage. A key is just an organizational unit in the logical schema which helps with early-bound key values and typed deserialization.</para>
            <para>A <see cref="T:JetBrains.Application.Settings.SettingsKey">Settings Key</see> maps to the storage key formed by concatenating local names of it and all of the parent keys. For example, WebProxy under Internet under Environment under root makes the <c>/Environment/Internet/WebProxy</c> settings storage key.</para>
            
            <para><b>Common Settings Key</b> metadata:</para>
            <para>Metadata stored for a settings key, supposing <c>/K/E/Y</c> is its key path:</para>
            <para><i>(note: these are not settings entries of the key yet, just optional metadata for the logical settings key in the physical storage)</i></para>
            <list type="table">
            <listheader><term>Key</term><description>Meaning</description></listheader>
            <item><term><c>/K/E/Y/@KeyDescription</c></term><description><para>(<c>String</c>) Description of the key, as specified in <see cref="!:SettingsKeyAttribute.Description"/>.</para> <para>Optional, non-vital, written when setting value, could be used by settings storage browsers.</para></description></item>
            </list>
            <para><b>Non-indexed Settings Key</b> metadata:</para>
            <para>No special metadata on a non-indexed key — just the all-keys common items.</para>
            <para><b>Indexed Settings Key</b> metadata:</para>
            <para>The storage key for an indexed key includes the serialized form of a particular index which defines the specific instance of an indexed key: <c>/K/E/Y/=IndexSerialized</c>.</para>
            <para>This applies to all of the indexed keys in the parent keys path. For example, if key <c>K</c> is also indexed, the sample path would look like <c>/K/=KIndexSerialized/E/Y/=YIndexSerialized</c>. When reading samples for entry storage keys below, take into account that any indexed key in entrie's parents has also to include its index value.</para>
            <list type="table">
            <listheader><term>Key</term><description>Meaning</description></listheader>
            <item><term><c>/K/E/Y/=IndexSerialized/@KeyIndexDefined</c></term><description><para>(<c>Boolean</c>) <c>True</c> means there is an instance of an indexed key defined for this index. Note that there might be no entry values written to the storage for this key instance if they're all in their default values, still the key instance will be marked as existent.</para><para><c>False</c> means the key might be defined on some of the lower-priority layers, but has been revoked at a higher-priority layer and all of its entries must be ignored.</para><para>{no value} means the key instance is not defined for this index (even though there might be some leftovers of settings entry values in the storage). </para><para>If this value is undefined in all the layers, the key instance will not be present in the logical Settings Store. However, if it's defined to <c>True</c> on at least one layer's storage, all of the entry values on all the storages on any layers, even those without the <c>KeyIndexDefined</c> set, will take part in entry values composition.</para> <para><b>Required.</b> Vital, an indexed key instance will be treated as non-existent without this value.</para></description></item>
            <item><term></term><description></description></item>
            </list>
            
            <h1>Settings Entry</h1>
            
            <para>All information on a <see cref="T:JetBrains.Application.Settings.SettingsEntry">Settings Entry</see> is stored under the key path of its parent Settings Key, plus the local name of the settings entry. Example settings storage key: <c>/K/E/Y/EntryLocalName</c></para>
            
            <para>Common metadata for indexed and non-indexed settings entries (all optional and non-vital):</para>
            <list type="table">
            <listheader><term>Key</term><description>Meaning</description></listheader>
            <item><term><c>/K/E/Y/EntryLocalName/@EntryDescription</c></term><description><para>(<c>String</c>) Description of the entry, as specified in <see cref="!:SettingsEntryAttribute.Description"/>.</para> <para>Optional, non-vital, written when setting value, could be used by settings storage browsers.</para></description></item>
            <item><term></term><description></description></item>
            </list>
            
            <para><b>Non-indexed Settings Entry</b> metadata:</para>
            <list type="table">
            <listheader><term>Key</term><description>Meaning</description></listheader>
            <item><term><c>/K/E/Y/EntryLocalName/@EntryValue</c></term><description><para>(any type) The serialized value of the entry.</para> <para><b>Required.</b> Vital for reading the entry value.</para></description></item>
            <item><term><c>/K/E/Y/EntryLocalName/@EntryType</c></term><description><para>(<c>String</c>) Full name of the <see cref="T:System.Type">CLR type</see> of the settings entry member which was serialized into the settings storage primitive type.</para> <para>Optional, non-vital.</para></description></item>
            <item><term><c>/K/E/Y/EntryLocalName/@EntrySerializer</c></term><description><para>(<c>String</c>) <see cref="T:JetBrains.Application.Settings.SettingsStoreSerializerType"/> enum member name representing the value serializer used when writing the value.</para> <para>Optional, non-vital.</para></description></item>
            </list>
            
            <para><b>Indexed Settings Entry</b> metadata:</para>
            <para>Indexed entries are mapping a simple index to a simple value.</para>
            <para>The following metadata is added to the entry itself, stored under the <c>/K/E/Y/EntryLocalName</c> storage key:</para>
            <list type="table">
            <listheader><term>Key</term><description>Meaning</description></listheader>
            <item><term><c>/K/E/Y/EntryLocalName/@EntryIndexType</c></term><description><para>(<c>String</c>) Full name of the <see cref="T:System.Type">CLR type</see> of the indexed settings entry index.</para> <para>Optional, non-vital.</para></description></item>
            <item><term><c>/K/E/Y/EntryLocalName/@EntryIndexSerializer</c></term><description><para>(<c>String</c>) <see cref="T:JetBrains.Application.Settings.SettingsStoreSerializerType"/> enum member name representing the value serializer used when writing the index.</para> <para>Optional, non-vital.</para></description></item>
            <item><term><c>/K/E/Y/EntryLocalName/@EntryIndexedValueType</c></term><description><para>(<c>String</c>) Full name of the <see cref="T:System.Type">CLR type</see> of the indexed settings entry value.</para> <para>Optional, non-vital.</para></description></item>
            <item><term><c>/K/E/Y/EntryLocalName/@EntryIndexedValueSerializer</c></term><description><para>(<c>String</c>) <see cref="T:JetBrains.Application.Settings.SettingsStoreSerializerType"/> enum member name representing the value serializer used when writing the indexed value.</para> <para>Optional, non-vital.</para></description></item>
            </list>
            <para>An indexed entry is a set of (index, value) pairs, which should have fast lookup by index. Such pairs are units of storage.</para>
            <para>For each pair, its data is stored under the <c>/K/E/Y/EntryLocalName/=IndexSerialized</c> storage key.</para>
            <list type="table">
            <listheader><term>Key</term><description>Meaning</description></listheader>
            <item><term><c>/K/E/Y/EntryLocalName/=IndexSerialized/@EntryIndexedValue</c></term><description><para>(any type) The serialized indexed value of the (index, value) pair.</para> <para><b>Required.</b> <b>Vital</b> for reading the indexed value stored for a specific index.</para></description></item>
            <item><term><c>/K/E/Y/EntryLocalName/=IndexSerialized/@EntryIndex</c></term><description><para>(any type) The serialized index of the (index, value) pair.</para> <para>Optional. Non-vital. Useful for reading the storage because the "IndexSerialized" representation is serialized into a restricted charset and is often unreadable with a bare eye, while in this place a more permissive regular entry value serializer is put to use.</para></description></item>
            <item><term><c>/K/E/Y/EntryLocalName/=IndexSerialized/@EntryIndexRemoved</c></term><description><para>(<c>Boolean</c>) <c>True</c> to force removing the indexed value from the indexed entry values set.</para> <para>This has an effect when a stack of storages is merged, and the indexed entry has has a value for this index in some lower-priority storage, which a higher-priority storage wants to remove altogether as if it has never been set.</para><para>Note that for <c>EntryIndexRemoved</c> to work as intended, <c>EntryIndexedValue</c> must also be set to some (dummy) value on the same storage. For performance reasons, storage lookup through layers is only done for <c>EntryIndexedValue</c>, and <c>EntryIndexRemoved</c> is only checked on those storages found during this lookup.</para> <para>Optional. <b>Vital</b> for removing indexed values in an overriding storage.</para></description></item>
            </list>
            <para>The serialization behavior for index values taking part in storage keys (<c>IndexSerialized</c> in the above examples) differs from that of the indexed values and scalar entry values (and <c>EntryIndex</c> metadata) because we're enforcing strict rules on key local names character set.</para>
            </remarks>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.Implementation.StoreToStorageTranslation.AppendIndex(System.String,JetBrains.Application.Settings.SettingsIndexedKey,System.Object,JetBrains.Util.ILogger)">
            <summary>
            Appends a serialized index value.
            </summary>
            <param name="sKeyBase">Base key. MUST NOT be slash-terminated.</param>
            <param name="key"></param>
            <param name="index">Index value.</param>
            <param name="logger"></param>
            <returns>Composed string. MUST NOT be slash-terminated.</returns>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.Implementation.StoreToStorageTranslation.AppendIndex(System.String,JetBrains.Application.Settings.SettingsIndexedEntry,System.Object,JetBrains.Util.ILogger)">
            <summary>
            Appends a serialized index value.
            </summary>
            <param name="sKeyBase">Base key. MUST NOT be slash-terminated.</param>
            <param name="entry"></param>
            <param name="index">Index value.</param>
            <param name="logger"></param>
            <returns>Composed string. MUST NOT be slash-terminated.</returns>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.Implementation.StoreToStorageTranslation.AppendMetadata(System.String,System.String)">
            <summary>
            Appends metadata name.
            </summary>
            <param name="sKeyBase">Base key. MUST NOT be slash-terminated.</param>
            <param name="sMetadataName">Metadata name to append. MUST NOT include the metadata prefix.</param>
            <returns>Composed string. MUST NOT be slash-terminated.</returns>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.Implementation.StoreToStorageTranslation.AppendLocalName(System.String,System.String)">
            <summary>
            Appends the local name as the next key component.
            </summary>
            <param name="sKeyBase">Base key. MUST NOT be slash-terminated.</param>
            <param name="sLocalName">Local name to append. MUST NOT include leading or trailing (or any) slashes.</param>
            <returns>Composed string. MUST NOT be slash-terminated.</returns>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.Implementation.StoreToStorageTranslation.ParseStorageKeys_Key(System.Collections.Generic.IList{JetBrains.Application.Settings.SettingsStoreChangeArgs.SettingsKeyInstance},JetBrains.Application.Settings.Storage.KeyPathComponents,JetBrains.Application.Settings.ISettingsSchema,System.Collections.Generic.List{JetBrains.Application.Settings.Store.Implementation.StoreToStorageTranslation.StorageKeyParsedComponent},JetBrains.Util.ILogger)">
            <summary>
            Aggregates one more changed key into the total changes delta tree.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Store.Implementation.StoreToStorageTranslation.FillKeyPathComponents(JetBrains.Application.Settings.Storage.KeyPathComponents,JetBrains.Application.Settings.SettingsKey,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object},JetBrains.Util.ILogger,System.Func{JetBrains.Application.Settings.Storage.KeyPathComponents,System.Boolean})">
            <summary>
            Writes key path to the settings key into the empty components list.
            Leaves one empty leading slot for mounting path component.
            Throws out exceptions for caller: missing key index.
            </summary>
            <param name="keyPathComponents">Writes here. Must be empty.</param>
            <param name="key">Settings key (its parents and its own components will be written, as well as key index components).</param>
            <param name="keyIndices">Indices to the indexed keys in path.</param>
            <param name="logger">Logger.</param>
            <param name="FCallAfterEachIndexedKey">Callback to be invoked after writing an index for each indexed key. If <c>False</c>, processing is aborted and <c>False</c> is returned.</param>
            <returns>Whether any of the <paramref name="FCallAfterEachIndexedKey"/> calls returned <c>False</c>. If so, results might be incomplete.</returns>
        </member>
        <member name="T:JetBrains.Application.Settings.Store.Implementation.StoreToStorageTranslation.Metadata">
            <summary>
            <para>When settings store data is written into the physical settings storage, all of the storage keys end with the last path component containing metadata names (prefixed with <see cref="F:JetBrains.Application.Settings.Store.Implementation.StoreToStorageTranslation.PathComposition.MetadataPrefix"/> for distinction).</para>
            <para>Taking an analogy to XPath syntax, we're only addressing attributes, so all of the expected storage keys end with <c>“/@metadataname”</c>.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Store.Implementation.StoreToStorageTranslation.PathComposition">
            <summary>
            Individual elements for composing full storage key paths out of individual local names, index values, and metadata names.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Store.Implementation.StoreToStorageTranslation.PathComposition.KeyPathSeparator">
            <summary>
            Separates local names of settings keys and entries, index values on indexed keys and entries, and tailing metadata name in the path making the settings storage key. Analogous to the XPath separator.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Store.Implementation.StoreToStorageTranslation.PathComposition.MetadataPrefix">
            <summary>
            The last component of the settings storage key on which actual data is stored is a metadata name, which is denoted by this prefix to tell apart from other key components.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Store.Implementation.StoreToStorageTranslation.PathComposition.ValueInLocalNamePrefix">
            <summary>
            <para>When one of the storage key path components are formed from a user-supplied value (for example, indices of indexed keys or entries), denotes such keys for telling them apart from key path components coming from keys/entries' local names.</para>
            <para>If this prefix appears after a settings key or entry local name component in the storage key path, means the key or entry is indexed rather than simple.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.SettingsEntryAttribute">
            <summary>
            Use this attribute to mark those fields and properties of a <see cref="T:JetBrains.Application.Settings.SettingsKeyAttribute">settings key class</see> that should be settings store simple entries.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.SettingsEntryAttributeBase">
            <summary>
            Base attribute for settings entries.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsEntryAttributeBase.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="Description">The string that explains the setting for the means of human-readable settings serialization or settings browser.</param>
        </member>
        <member name="P:JetBrains.Application.Settings.SettingsEntryAttributeBase.EntryNameOverride">
            <summary>
            <para><c>Null</c> to use the field/property member name as the <see cref="F:JetBrains.Application.Settings.SettingsEntry.LocalName">settings entry local name</see> in the settings schema.</para>
            <para>Non-empty to override the local name with a custom string (must comply to key/entry local name rules).</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.SettingsEntryAttributeBase.Description">
            <summary>
            Gets the string that explains the setting for the means of human-readable settings serialization or settings browser.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.SettingsEntryAttributeBase.ValueSerializer">
            <summary>
            Gets or sets how the value of the field/property should be serialized for storage.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsEntryAttributeBase.ReflectionHelpers.myMapPrimitiveTypeNamesToStorageTypesWithCoersion">
            <summary>
            By a name of a primitive mscorlib type, gives out the storage type that will be holding this type (possibly, after coersion).
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsEntryAttributeBase.ReflectionHelpers.GuessValueSerializer(JetBrains.Application.Parts.PartCatalogueAttribute,JetBrains.Metadata.Reader.API.IMetadataType)">
            <summary>
            If the value serializer type is <see cref="F:JetBrains.Application.Settings.SettingsStoreSerializerType.Auto"/>, guesses the actual type by the member type.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsEntryAttribute.#ctor(System.Object,System.String)">
            <summary>
            
            </summary>
            <param name="DefaultValue">
            <para>The default value for this entry. You do not need to initialize the field itself in the inline initializer or the constructor. Instead, you MUST set this to the desired initial value, for serialization to work consistently.</para>
            <para>The possible values are:</para>
            <para>• <c>Null</c>, which means the default value for the <see cref="T:System.Type"/> of the field (<c>Null</c> for reference types and zero memory for value types).</para>
            <para>• Some value of the same type as the <see cref="T:System.Type"/> of the field, or a value type convertible to it.</para>
            <para>• An invariant string representation of a value that cannot be presented inline in the attribute ctor. value of the same type as the <see cref="T:System.Type"/> of the field, or a value type convertible to it. The appropriate <see cref="T:System.ComponentModel.TypeConverter"/> is used for reading the value.</para>
            </param>
            <param name="Description">The string that explains the setting for the means of human-readable settings serialization or settings browser.</param>
        </member>
        <member name="P:JetBrains.Application.Settings.SettingsEntryAttribute.DefaultValue">
            <summary>
            <para>The default value for this entry. You do not need to initialize the field itself in the inline initializer or the constructor. Instead, you MUST set this to the desired initial value, for serialization to work consistently.</para>
            <para>The possible values are:</para>
            <para>• <c>Null</c>, which means the default value for the <see cref="T:System.Type"/> of the field (<c>Null</c> for reference types and zero memory for value types).</para>
            <para>• Some value of the same type as the <see cref="T:System.Type"/> of the field, or a value type convertible to it.</para>
            <para>• An invariant string representation of a value that cannot be presented inline in the attribute ctor. value of the same type as the <see cref="T:System.Type"/> of the field, or a value type convertible to it. The appropriate <see cref="T:System.ComponentModel.TypeConverter"/> is used for reading the value.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsEntryAttribute.ReflectionHelpers.GetDefaultValueFromRuntimeType``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},JetBrains.Util.ILogger)">
            <summary>
            <para>Uses Reflection to get the entry default value from the loaded runtime type. Avoid using wherever possible because it needs a loaded assembly. For use in static context where settings store is not available and the settings key/entry class is about to be used anyway. NOT for use in any of the Settings Store infrastructure code.</para>
            </summary>
            <param name="lambdaexpression">Identifies the entry.</param>
            <param name="logger"></param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.Application.Settings.SettingsIndexedEntryAttribute">
            <summary>
            <para>Use this attribute to mark those fields and properties of a <see cref="T:JetBrains.Application.Settings.SettingsKeyAttribute">settings key class</see> that should be indexed store entries.</para>
            <para>Such an entry declares a set of values accessible with an index, which works as a dictionary or a list in a settings store.</para>
            <para>The field or property annotated with this attribute must be of type <see cref="T:JetBrains.Application.Settings.Store.IIndexedEntry`2"/> where generic parameters define the index type and the value indexed type.</para>
            </summary>
            <remarks>
            <para>While simple <see cref="T:JetBrains.Application.Settings.SettingsEntryAttribute"/> enables storing atomic values, this option allows to stores dictionaries with arbitrary keys and lists.</para>
            <para>A list has to be represented as a dictionary because it requires an identity (an index) to define rules for overriding when store is composited from layers. If your list items bear their identity themselves, use them as indices and define values as a simple boolean. If an additional identity is required, use the index as the identity and values as the payload information.</para>
            </remarks>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsIndexedEntryAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="Description">The string that explains the setting for the means of human-readable settings serialization or settings browser.</param>
        </member>
        <member name="P:JetBrains.Application.Settings.SettingsIndexedEntryAttribute.KeySerializer">
            <summary>
            Gets or sets how indices should be serialized for storage.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsIndexedEntryAttribute.ReflectionHelpers.GuessKeySerializer(JetBrains.Application.Parts.PartCatalogueAttribute,JetBrains.Metadata.Reader.API.IMetadataType)">
            <summary>
            Reads the key serializer, also resolves <see cref="F:JetBrains.Application.Settings.SettingsStoreSerializerType.Auto"/> into a specific type.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.SettingsIndexedKeyAttribute">
            <summary>
            <para>Marks a class that will be used as a frontend to settings.</para>
            <para>Represents an indexed settings key which exists in multiple copies per different index values.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.SettingsKeyAttributeBase">
            <summary>
            Base attribute for settings keys.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsKeyAttributeBase.#ctor(System.Type,System.String)">
            <param name="Parent">
            <para>The parent settings key. </para>
            <para><see cref="T:System.Reflection.Missing"/> denotes top-level settings keys. You should only have a few in the product. Consider mounting to an existing category instead of creating an new one.</para>
            </param>
            <param name="Description">The string that explains the setting for the means of human-readable settings serialization or settings browser.</param>
        </member>
        <member name="P:JetBrains.Application.Settings.SettingsKeyAttributeBase.Description">
            <summary>
            Gets the string that explains the setting for the means of human-readable settings serialization or settings browser.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.SettingsKeyAttributeBase.Parent">
            <summary>
            <para>Gets the parent settings key. </para>
            <para><see cref="T:System.Reflection.Missing"/> denotes top-level settings keys. You should only have a few in the product. Consider mounting to an existing category instead of creating a new one.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.SettingsKeyAttributeBase.KeyNameOverride">
            <summary>
            <para>By default, the class name is used as the settings key name (but for the "Settings" suffix).</para>
            <para>If this property is non-empty, its value will be used as the key name instead.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsKeyAttributeBase.ReflectionHelpers.GetParentTypeIfNotRoot(JetBrains.Application.Parts.PartCatalogueAttribute)">
            <summary>
            Reads the parent specification out of the attribute, returns its type info (unless it's pointing to the special root type).
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsIndexedKeyAttribute.#ctor(System.Type,System.String,System.Type)">
            <param name="Parent">
            <para>The parent settings key. </para>
            <para><see cref="T:System.Reflection.Missing"/> denotes top-level settings keys. You should only have a few in the product. Consider mounting to an existing category instead of creating an new one.</para>
            </param>
            <param name="Description">The string that explains the setting for the means of human-readable settings serialization or settings browser.</param>
            <param name="indexType">Type of the indices to this indexed key.</param>
        </member>
        <member name="P:JetBrains.Application.Settings.SettingsIndexedKeyAttribute.IndexType">
            <summary>
            Gets the type of the indices to this indexed key.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.SettingsIndexedKeyAttribute.IndexSerializer">
            <summary>
            Gets or sets how indices should be serialized.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsIndexedKeyAttribute.ReflectionHelpers.GuessKeySerializer(JetBrains.Application.Parts.PartCatalogueAttribute,JetBrains.Application.Parts.PartCatalogueType)">
            <summary>
            Reads the key serializer, also resolves <see cref="F:JetBrains.Application.Settings.SettingsStoreSerializerType.Auto"/> into a specific type.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.SettingsKeyAttribute">
            <summary>
            <para>Marks a class that will be used as a frontend to settings.</para>
            <para>Represents a settings key.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsKeyAttribute.#ctor(System.Type,System.String)">
            <param name="parent">
            <para>The parent settings key. </para>
            <para><see cref="T:System.Reflection.Missing"/> denotes top-level settings keys. You should only have a few in the product. Consider mounting to an existing category instead of creating an new one.</para>
            </param>
            <param name="description">The string that explains the setting for the means of human-readable settings serialization or settings browser.</param>
        </member>
        <member name="T:JetBrains.Application.Settings.ContextRange">
            <summary>
            Specifies a range of contexts for <c>BindToContext</c>-family methods on <see cref="T:JetBrains.Application.Settings.ISettingsStore"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.ContextRange.FGetWideContext">
            <summary>
            Gets the widest allowed context of the SmartSave.
            <c>NULL</c> if the context is not limited on the wide edge (e.g. SmartSave writes can go to the whole range of the narrow context mounts).
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.GuidIndex.#ctor(System.Guid)">
            <summary>
            Converts from a system <see cref="T:System.Guid"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.GuidIndex.#ctor(System.String)">
            <summary>
            Converts from a string. Ideally, the string must match for format and convert just 32 hex uppercase chars.
            Does not throw if something goes wrong: uses zeros for missing bytes.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.GuidIndex.#ctor(System.Byte[])">
            <summary>
            Creates a GUID out of raw data. Ideally, the data should have exactly 16 bytes.
            Does not throw if something goes wrong: uses zeros for missing bytes.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.GuidIndex.ToString">
            <summary>
            Converts to the default <see cref="T:JetBrains.Application.Settings.GuidIndex"/> format string: 32 uppercase hex digits without any other decorations.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.GuidIndex.ToGuid">
            <summary>
            Converts to the classic GUID.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.GuidIndex.ToString(System.String)">
            <summary>
            Converts to a GUID string using the <see cref="T:System.Guid"/> format specifiers.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.GuidIndex.ToString(System.String,System.IFormatProvider)">
            <summary>
            Converts to a GUID string using the <see cref="T:System.Guid"/> format specifiers.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.MountPointFlags.IsDefaultValues">
            <summary>
            This mounting point is providing default values for settings entries and keys.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.MountPointFlags.IsWritable">
            <summary>
            This mounting point is user writable by default under normal conditions.
            Mounting points without this flag shouldn't be written to, unless this is specifically desired by user/algorithm.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.SettingsStorageMountPointPriorityClasses">
            <summary>
            <para>Standard priority classes for well-known settings storages.</para>
            <para>NOTE: you should avoid assigning zero priority to mounting points because relative priorities of injected layers will not work correctly in this case.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsStorageMountPointPriorityClasses.AmbientStorage">
            <summary>
            Storages providing default settings.
            For example, built-in live templates, SSR patterns mounted by plugins, etc.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsStorageMountPointPriorityClasses.GlobalAllProductStorage">
            <summary>
            One more global storage for per-user settings, for all products. Settings could be promoted here from per-product global user storage.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsStorageMountPointPriorityClasses.GlobalPerProductStorage">
            <summary>
            The default global storage for per-user settings. Specific to the product.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsStorageMountPointPriorityClasses.HierarchyStorage">
            <summary>
            Base priority for nested storages within the hierarchy (for R#, these are solution/project storages).
            If you need more than one priority level per hierarchy, use different mantissa with the same exponent (i. e. multiply by a positive number below ten).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsStorageMountPointPriorityClasses.SyntheticPriorityOfSmartLayer">
            <summary>
            When we're rendering the settings layers, mount-originating layers take the priority of the underlying mount.
            The “Smart” synthetic layer does not have a single mount under it. To be displayed in a sorted list along with other layers, it uses this fake priority level.
            Do not use for real mounting points.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.SettingsStoreChangeArgs">
            <summary>
            Describes a group of changes to the logical settings store.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsStoreChangeArgs.RootKeys">
            <summary>
            <para>Entry point to the hierarchical representation of the changed entities.</para>
            <para>These objects follow the hierarchy of the logical schema. Only the part of the schema that has changes described by this object is included.</para>
            <para>By inspecting these objects, you can determine whether the particular key or entry has changed itself. If a key is included but not <see cref="F:JetBrains.Application.Settings.SettingsStoreChangeArgs.SettingsKeyInstance.IsChangedItself"/>, then there're some changes in its child keys or entries.</para>
            <para>For indexed keys and entries, you can get particular index values.</para>
            <para>This list is ordered by key local names and then index serialized values, which makes it possible to do binary searches.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsStoreChangeArgs.ChangedStorageKeys">
            <summary>
            A sorted hash set of any storage keys affected by this change.
            This is a hybrid path: the first path component MUST be empty because it's reserved for the mounting path, and the remaining components represent the physical path within the mounted storage.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsStoreChangeArgs.ChangedKeys">
            <summary>
            <para>Quick access to all of the changed keys listed under <see cref="F:JetBrains.Application.Settings.SettingsStoreChangeArgs.RootKeys"/>.</para>
            <para>Note that this means that either the key has changed, or rather one of its descendants.</para>
            <para>To get information on indexed key indices, inspect <see cref="F:JetBrains.Application.Settings.SettingsStoreChangeArgs.RootKeys"/>.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsStoreChangeArgs.ChangedEntries">
            <summary>
            <para>Quick access to all of the changed entries listed under <see cref="F:JetBrains.Application.Settings.SettingsStoreChangeArgs.RootKeys"/>.</para>
            <para>To get information on indexed entry indices, inspect <see cref="F:JetBrains.Application.Settings.SettingsStoreChangeArgs.RootKeys"/>.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsStoreChangeArgs.RemoveUnchangedThingsAndCollectLists(JetBrains.Util.ILogger)">
            <summary>
            There might be such entities in the lists for which there're no descendants with is-changed-itself status (e.g. only technical changes were registered for those).
            Remove such entities.
            </summary>
            <param name="logger"></param>
        </member>
        <member name="T:JetBrains.Application.Settings.SettingsStoreChangeArgs.SettingsKeyInstance">
            <summary>
            A change to a settings key instance.
            “Instance” means that for an indexed key this refers to a speficic instance (identified by a particular index value) rather then the schema key in general.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsStoreChangeArgs.SettingsKeyInstance.SettingsKey">
            <summary>
            The changed settings key.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsStoreChangeArgs.SettingsKeyInstance.Children">
            <summary>
            Child keys of this key, if there were any changes in them.
            For indexed keys, only particular instances are listed. If more than one instance of the same key was changed, there will be more than one instance of the same key in the list.
            This list is sorted by key local name and then index serialized value.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsStoreChangeArgs.SettingsKeyInstance.IsChangedItself">
            <summary>
            If <c>True</c>, there were changes to this exactly key (only applies to indexed key instances, because they might be created and deleted).
            If <c>False</c>, the key itself didn't change, but this node has some ancestors which changed themselves.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsStoreChangeArgs.SettingsKeyInstance.Entries">
            <summary>
            Changed entries of this key, if any.
            For indexed entries, only particular instances are listed. If more than one instance of the same entry was changed, there will be more than one instance of the same entry in the list.
            This list is sorted by key local name and then index serialized value.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsStoreChangeArgs.SettingsKeyInstance.IndexSerialized">
            <summary>
            If <see cref="F:JetBrains.Application.Settings.SettingsStoreChangeArgs.SettingsKeyInstance.SettingsKey"/> is an indexed key, a non-<c>Null</c> index to the particular instance. Otherwise, <c>Null</c>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsStoreChangeArgs.SettingsKeyInstance.FGetLocalNameAndIndex">
            <summary>
            Cached delegate.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsStoreChangeArgs.SettingsKeyInstance.myLocalNameAndIndex">
            <summary>
            Serves as a dictionary key when indexing this stull in a parent.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsStoreChangeArgs.SettingsKeyInstance.TryGetIndexValue">
            <summary>
            If this is an indexed key instance, deserializes the <see cref="F:JetBrains.Application.Settings.SettingsStoreChangeArgs.SettingsKeyInstance.IndexSerialized"/> index value into a runtime object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:JetBrains.Application.Settings.SettingsStoreChangeArgs.SettingsEntryInstance">
            <summary>
            A change to a settings entry instance.
            “Instance” means that for an indexed entry this refers to a speficic instance (identified by a particular index value) rather then the schema entry in general.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsStoreChangeArgs.SettingsEntryInstance.SettingsEntry">
            <summary>
            The changed settings entry.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsStoreChangeArgs.SettingsEntryInstance.IndexSerialized">
            <summary>
            If <see cref="F:JetBrains.Application.Settings.SettingsStoreChangeArgs.SettingsEntryInstance.SettingsEntry"/> is an indexed entry, a non-<c>Null</c> index to the particular instance. Otherwise, <c>Null</c>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsStoreChangeArgs.SettingsEntryInstance.IsChangedItself">
            <summary>
            If <c>True</c>, there were significant changes to this exactly entry.
            If <c>False</c>, then the entry is only present because some technical information on it might have changed which does not affect the entry value.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsStoreChangeArgs.SettingsEntryInstance.FGetLocalNameAndIndex">
            <summary>
            Cached delegate.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsStoreChangeArgs.SettingsEntryInstance.TryGetIndexValue">
            <summary>
            If this is an indexed entry instance, deserializes the <see cref="F:JetBrains.Application.Settings.SettingsStoreChangeArgs.SettingsEntryInstance.IndexSerialized"/> index value into a runtime object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsStoreChangeArgs.SettingsEntryInstance.GetIndexValue">
            <summary>
            If this is an indexed entry instance, deserializes the <see cref="F:JetBrains.Application.Settings.SettingsStoreChangeArgs.SettingsEntryInstance.IndexSerialized"/> index value into a runtime object.
            Throws otherwise or on failures.
            </summary>
            <returns></returns>
        </member>
        <member name="T:JetBrains.Application.Settings.SettingsStoreSerializerType">
            <summary>
            Defines the choice of serializers for storing Settings Store data in the underlying physical storage.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsStoreSerializerType.Auto">
            <summary>
            Chooses the best serializer automatically based on the member type of the member annotated with the attribute.
            For primitive types, it's <see cref="F:JetBrains.Application.Settings.SettingsStoreSerializerType.Primitive"/>. In most other cases, <see cref="F:JetBrains.Application.Settings.SettingsStoreSerializerType.TypeConverterToInvariantString"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsStoreSerializerType.Primitive">
            <summary>
            The value is serialized AS IS, as a primitive type. Is not applicable to non-primitive types (those not directly supported by the settings store types).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsStoreSerializerType.TypeConverterToInvariantString">
            <summary>
            The <see cref="T:System.ComponentModel.TypeDescriptor"/> is queried for <see cref="T:System.ComponentModel.TypeConverter"/> and it is used to convert between the typed value and an invariant string.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsStoreSerializerType.XmlSerializer">
            <summary>
            The object is serialized into string and back with <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsStoreSerializerType.XamlSerializer">
            <summary>
            The object is serialized into string with <see cref="T:System.Windows.Markup.XamlWriter"/> and back with <see cref="T:System.Windows.Markup.XamlReader"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsStoreSerializerType.BinaryFormatter">
            <summary>
            The object is serialized into BLOB and back with <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/>.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.SchemaStorageKeyPathComponent">
            <summary>
            <see cref="F:JetBrains.Application.Settings.SettingsEntry.CachedPathComponents"/> and <see cref="F:JetBrains.Application.Settings.SettingsKey.CachedPathComponents"/> items.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SchemaStorageKeyPathComponent.Component">
            <summary>
            Path component.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SchemaStorageKeyPathComponent.IndexRequired">
            <summary>
            If non-<c>Null</c>, an additional path component with an index value for this indexed key is required after this component.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.SettingsEntry">
            <summary>
            Base class for entries of a settings key.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsEntry.LocalName">
            <summary>
            <para>Local name of the entry.</para>
            <para>Appended to the full name of the containing settings key to get the actual key in the settings storage key-value store.</para>
            <para>Complies with the identifier rules (<see cref="M:JetBrains.Application.Settings.Storage.SettingsStorageHelpers.AssertValidLocalName(System.String)"/>).</para>
            <para>By default, equal to <see cref="F:JetBrains.Application.Settings.SettingsEntry.SettingsKeyClassMemberName"/>, but might be overridden with <see cref="P:JetBrains.Application.Settings.SettingsEntryAttributeBase.EntryNameOverride"/>.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsEntry.SettingsKeyClassMemberName">
            <summary>
            <para>As this entry has been defined by some member (field/property) in the settings key class, gives the name of that member.</para>
            <para>Same as the <see cref="F:JetBrains.Application.Settings.SettingsEntry.LocalName"/> by default, but the latter might be overridden with <see cref="P:JetBrains.Application.Settings.SettingsEntryAttributeBase.EntryNameOverride"/>.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsEntry.Description">
            <summary>
            Gets the string that explains the setting for the means of human-readable settings serialization or settings browser.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsEntry.SettingsKeyClassMemberClrType">
            <summary>
            Gets the CLR type of the member (field, property, etc) representing the entry in the settings key class.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsEntry.CachedPathComponents">
            <summary>
            Cached path components for mapping this settings schema entity to physical keys in the settings storage.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.SettingsEntry.Parent">
            <summary>
            The settings key containing this entry.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.SettingsEntry.IsIndexed">
            <summary>
            <para>Gets whether this entry is an indexed entry.</para>
            <para>When <c>True</c>, this instance is actually of type <see cref="T:JetBrains.Application.Settings.SettingsIndexedEntry"/> which has additional information about the index type. Otherwise, the actual type of the instance is <see cref="T:JetBrains.Application.Settings.SettingsScalarEntry"/>.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.SettingsIndexedEntry">
            <summary>
            Describes an indexed settings entry in the settings schema.
            </summary>
            <seealso cref="T:JetBrains.Application.Settings.SettingsIndexedEntryAttribute"/>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsIndexedEntry.IndexSerializer">
            <summary>
            <para>The way indices should be serialized.</para>
            <para>Note that the final algorithm is a bit different from what's applied to serializing entry values because serialized indices take part in the settings storage keys as local names, which implies strict limitations on their type (always a string) and character set.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsIndexedEntry.IndexedValueSerializer">
            <summary>
            The way indexed values should be serialized. Equivalent to <see cref="F:JetBrains.Application.Settings.SettingsScalarEntry.ValueSerializer"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsIndexedEntry.SettingsStorageIndexedValueType">
            <summary>
            The type in settings storage with which indexed values are stored.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsIndexedEntry.SettingsStorageIndexType">
            <summary>
            <para>The type in settings storage with which indices might be stored as settings storage values.</para>
            <para>Note that normally indices are used as local names within the settings storage key path, where they must always be strings.</para>
            <para>However, for human readability, we might be writing a copy of the index into the value, in which case it's serialized against the same rules as normal settings entry values. That's where this datum applies.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsIndexedEntry.IndexClrType">
            <summary>
            <para>The CLR type of the index.</para>
            <para>This is the first generic actual parameter on <see cref="F:JetBrains.Application.Settings.SettingsEntry.SettingsKeyClassMemberClrType"/>.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsIndexedEntry.IndexedValueClrType">
            <summary>
            <para>The CLR type of the indexed values.</para>
            <para>This is the second generic actual parameter on <see cref="F:JetBrains.Application.Settings.SettingsEntry.SettingsKeyClassMemberClrType"/>.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.SettingsIndexedKey">
            <summary>
            <para>Describes an indexed settings key in the settings schema.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.SettingsKey">
            <summary>
            <para>Describes a settings key (indexed or not) in the settings schema.</para>
            <para>Indexed keys are described by a more specific type <see cref="T:JetBrains.Application.Settings.SettingsIndexedKey"/>.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsKey.myEntriesTmp">
            <summary>
            Entries are kept here before the key completes loading entries and gets frozen.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsKey.myEntriesFrozenSorted">
            <summary>
            Entries are kept in this array, sorted by member-name for quicker lookup (lambda expressions give us the CLR member name), after the key completes loading its entries and is frozen.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsKey.SettingsKeyClassClrType">
            <summary>
            CLR type of the class which defined this settings key.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsKey.ParentSettingsKeyClassClrType">
            <summary>
            <para>CLR type of the class which defined the parent settings key, or <c>Null</c> if this is one of the root keys.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsKey.Description">
            <summary>
            Gets the string that explains the setting for the means of human-readable settings serialization or settings browser.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsKey.myParent">
            <summary>
            Backend for <see cref="P:JetBrains.Application.Settings.SettingsKey.Parent"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsKey.LocalName">
            <summary>
            <para>Local name of the key.</para>
            <para>Appended to the full name of the parent settings key to get the actual key in the settings storage key-value store.</para>
            <para>Complies with the identifier rules (<see cref="M:JetBrains.Application.Settings.Storage.SettingsStorageHelpers.AssertValidLocalName(System.String)"/>).</para>
            <para>By default, equal to <see cref="F:JetBrains.Application.Settings.SettingsKey.SettingsKeyClassClrType"/>.<see cref="P:JetBrains.Application.Parts.PartCatalogueType.LocalName"/>, but might be overridden with <see cref="P:JetBrains.Application.Settings.SettingsKeyAttributeBase.KeyNameOverride"/>.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsKey.FreezeEntries">
            <summary>
            After entries are added to the newly-loaded key, freezes its entries list to check consistensy and sort them for quicker lookup.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsKey.AddEntry(JetBrains.Application.Settings.SettingsEntry)">
            <summary>
            For adding entries to a newly-created key when it's being loaded.
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsKey.GetEntryByMemberName(System.String)">
            <summary>
            Optimizes lookup thru lambda expressions which give us the member name.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsKey.CachedPathComponents">
            <summary>
            Cached path components for mapping this settings schema entity to physical keys in the settings storage.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.SettingsKey.Children">
            <summary>
            <para>Gets the child settings keys of this key. Their <see cref="P:JetBrains.Application.Settings.SettingsKey.Parent"/> will be pointing to this instance.</para>
            <para>When defining a settings key as a class with <see cref="T:JetBrains.Application.Settings.SettingsKeyAttribute"/> or <see cref="T:JetBrains.Application.Settings.SettingsIndexedKeyAttribute"/>, the <see cref="P:JetBrains.Application.Settings.SettingsKey.Parent"/> is specified as a parameter to the attribute. CLR inheritance has nothing to do with settings key parenting in the schema.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.SettingsKey.Entries">
            <summary>
            <para>Gets the settings entries of this settings key.</para>
            <para>They are defined as fields or properties in the settings key class marked with <see cref="T:JetBrains.Application.Settings.SettingsEntryAttribute"/> or <see cref="T:JetBrains.Application.Settings.SettingsIndexedEntryAttribute"/>.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.SettingsKey.IsIndexed">
            <summary>
            <para>Gets whether this key is an indexed key. To get an entry value, you must provide an index to each indexed key in the parent keys chain.</para>
            <para>When <c>True</c>, this instance is actually of type <see cref="T:JetBrains.Application.Settings.SettingsIndexedKey"/> which has additional information about the index type.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.SettingsKey.Parent">
            <summary>
            <para>Gets the parent key of this settings key, or <c>Null</c> if this key is one of the root keys.</para>
            <para>When defining a settings key as a class with <see cref="T:JetBrains.Application.Settings.SettingsKeyAttribute"/> or <see cref="T:JetBrains.Application.Settings.SettingsIndexedKeyAttribute"/>, the <see cref="P:JetBrains.Application.Settings.SettingsKey.Parent"/> is specified as a parameter to the attribute. CLR inheritance has nothing to do with settings key parenting in the schema.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsIndexedKey.IndexClrType">
            <summary>
            <para>The type of the index to this indexed key.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsIndexedKey.IndexSerializer">
            <summary>
            <para>The way indices should be serialized.</para>
            <para>Note that the final algorithm is a bit different from what's applied to serializing entry values because serialized indices take part in the settings storage keys as local names, which implies strict limitations on their type (always a string) and character set.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.SettingsScalarEntry">
            <summary>
            Describes a scalar settings entry in the settings schema.
            </summary>
            <seealso cref="T:JetBrains.Application.Settings.SettingsEntryAttribute"/>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsScalarEntry.RawDefaultValue">
            <summary>
            <para>Gets the default value to be used for this settings entry in case it's not set for this context.</para>
            <para>Note that the type of this default value is neither <see cref="F:JetBrains.Application.Settings.SettingsScalarEntry.SettingsStorageEntryType"/> nor the <see cref="F:JetBrains.Application.Settings.SettingsScalarEntry.ValueClrType"/>. It's the object value written in the <see cref="T:JetBrains.Application.Settings.SettingsEntryAttribute"/>. <see cref="M:JetBrains.Application.Settings.Storage.SettingsStorageHelpers.CoerceEntryDefaultValueToRuntimeType(System.Object,System.Type,JetBrains.Util.ILogger)"/> contains special logic for converting this into the runtime entry value type.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsScalarEntry.ValueSerializer">
            <summary>
            <para>Gets how the value of the field/property should be serialized for storage.</para>
            <para>Used for converting values between <see cref="F:JetBrains.Application.Settings.SettingsScalarEntry.ValueClrType"/> and <see cref="F:JetBrains.Application.Settings.SettingsScalarEntry.SettingsStorageEntryType"/> back and forth</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsScalarEntry.SettingsStorageEntryType">
            <summary>
            The type of this entry in the setting storage. This only matches <see cref="F:JetBrains.Application.Settings.SettingsScalarEntry.ValueClrType"/> for select primitive types. In all other cases, <see cref="F:JetBrains.Application.Settings.SettingsScalarEntry.ValueSerializer"/> is used for converting values between <see cref="F:JetBrains.Application.Settings.SettingsScalarEntry.ValueClrType"/> and <see cref="F:JetBrains.Application.Settings.SettingsScalarEntry.SettingsStorageEntryType"/> back and forth.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsScalarEntry.ValueClrType">
            <summary>
            <para>Gets the CLR type of the value of this scalar entry.</para>
            <para>This is the type of the object you'll be getting from the <see cref="T:JetBrains.Application.Settings.Store.Implementation.SettingsStore"/> when reading this value.</para>
            <para>For a scalar entry, matches the <see cref="F:JetBrains.Application.Settings.SettingsEntry.SettingsKeyClassMemberClrType">class member type</see>.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsScalarEntry.GetDefaultValueInEntryMemberType">
            <summary>
            Converts the <see cref="F:JetBrains.Application.Settings.SettingsScalarEntry.RawDefaultValue">raw default value</see> to the <see cref="F:JetBrains.Application.Settings.SettingsScalarEntry.ValueClrType">entry value runtime type</see>.
            <para>If possible, should not let exceptions out.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsScalarEntry.GetDefaultValue``2(JetBrains.Application.Settings.ISettingsStore,System.Linq.Expressions.Expression{System.Func{``0,``1}},JetBrains.Util.ILogger)">
            <summary>
            <para>Gets the entry default value. Accessible even when the settings store is not available at the point (e.g. in a static context or when running in fallback mode without the Shell).</para>
            </summary>
            <typeparam name="TKeyClass"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="settings">The settings store, if available. If specified, will be for a quick look up of the entry default value. If <c>Null</c>, the default value will be parsed out of the entry itself, which might be slow.</param>
            <param name="lambdaexpression">Identifies the entry.</param>
            <param name="logger"></param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.Application.Settings.SettingsSchema">
            <summary>
            <para>This schema is the logical schema on <see cref="T:JetBrains.Application.Settings.SettingsKey">settings keys</see> / <see cref="T:JetBrains.Application.Settings.SettingsEntry">settings entries</see>, exposed to the application for getting/setting values of arbitrary user types.</para>
            <para>It is collected by reading classes with <see cref="T:JetBrains.Application.Settings.SettingsKeyAttribute"/> (which produces hierarchy of keys) and inspecting their members for <see cref="T:JetBrains.Application.Settings.SettingsEntryAttribute"/> (which produces key entries).</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsSchemaCollector.mySettingsKeyTypesFromCatalogs">
            <summary>
            Raw data from catalog: the type of the settings key class, plus some metainfo on it from the attribute.
            Updated sync on changes from catalogset (under main thread guard). Update invalidates the <see cref="F:JetBrains.Application.Settings.SettingsSchemaCollector.myMapTypeToSettingsKey"/>'s <see cref="P:JetBrains.Util.JetTuple`2.A"/> flag, and on next access to the schema the keys set is rebuilt (newcomer keys are intraspected for entries, etc).
            Locked with <see cref="F:JetBrains.Application.Settings.SettingsSchemaCollector.myLockSettingsKeyTypesFromCatalogs"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsSchemaCollector.myMapTypeToSettingsKey">
            <summary>
            The main cache of the schema. Call <see cref="M:JetBrains.Application.Settings.SettingsSchemaCollector.EnsureValidCache"/> before any use.
            CopyOnWrite, so requires no locking for read access. Modifications are quite rare, so we can afford COW here.
            The first item of the tuple says whether the cache is valid at all.
            Note: must be a reference type to ensure atomic replacement.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsSchemaCollector.myCacheAssemblyNames">
            <summary>
            Backend for <see cref="M:JetBrains.Application.Settings.SettingsSchemaCollector.GetCachedRuntimeAssemblyName(System.Reflection.Assembly)"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsSchemaCollector.GetCachedRuntimeAssemblyName(System.Reflection.Assembly)">
            <summary>
            It has been shown that getting the short name out of a runtime assembly takes considerable time. Cache the result to make settings access faster.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsSchemaCollector.Intraspection.EnsureValidCache_AddNew_KeysReadEntries_MetaType_GetLocalMembers(JetBrains.Metadata.Reader.API.IMetadataTypeInfo)">
            <summary>
            Gets all kinds of members out of a metadata type.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsSchemaCollector.Intraspection.EnsureValidCache_AddNew_KeysReadEntries_MetaType_AddBaseMembers(JetBrains.Metadata.Reader.API.IMetadataTypeInfo,System.Collections.Generic.IEnumerable{JetBrains.Metadata.Reader.API.IMetadataTypeMember})">
            <summary>
            Walk base classes (if any) to collect their members as settings entries into a settings class.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsSchemaCollector.Intraspection.EnsureValidCache_AddNew_KeysReadEntries_MetaType_Member(JetBrains.Application.Settings.SettingsKey,JetBrains.Metadata.Reader.API.IMetadataTypeMember)">
            <summary>
            Processes a single member in the settings entry class.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsSchemaCollector.Intraspection.EnsureValidCache_AddNew_KeysReadEntries_MetaType_Member_CreatePartType(JetBrains.Metadata.Reader.API.IMetadataType)">
            <summary>
            Detaches a metadata type from the metadata reader (by converting it to a <see cref="T:JetBrains.Application.Parts.PartCatalogueType"/>) so that it can be used after the reader is released, in a way which can be late-bound to the actual CLR <see cref="T:System.RuntimeType"/>.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.SettingsSchemaCollector.TypeInWeakAssembly">
            <summary>
            Stores the full name of the type and the short name of the assembly (without the strong name, version, etc).
            Using this identity for types allows us to avoid problems with binding redirections not quite working in our metadata assembly APIs.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsSchemaCollector.TypeInWeakAssembly.#ctor(System.Type)">
            <summary>
            Warning! Getting runtime assembly name is a lengthy operation.
            Use assembly name caching at your side (like <see cref="M:JetBrains.Application.Settings.SettingsSchemaCollector.GetCachedRuntimeAssemblyName(System.Reflection.Assembly)"/>) and call the (string,string) .ctor.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.UserInterface.FileInjectedLayers.FileInjectedLayers">
            <summary>
            Manages user-injected settings layers based on disk files.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.UserInterface.FileInjectedLayers.FileInjectedLayerSettingsKey">
            <summary>
            Serializes information on a file-based user-injected layer to enable restoring it after application restarts.
            The index is just an unique key.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.UserInterface.FileInjectedLayers.RegisterInjectedMounts.ForEachHostingLayer(JetBrains.DataFlow.Lifetime,JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer)">
            <summary>
            When a new hosting layer appears, we're notified of it (layer additions are originated in a guarded context).
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.UserInterface.FileInjectedLayers.RegisterInjectedMounts.SynchronizeHostLayer(JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer)">
            <summary>
            Reads the list of injections from the host layer and synchronizes the list on our <see cref="F:JetBrains.Application.Settings.UserInterface.FileInjectedLayers.RegisterInjectedMounts.myMapHostToInjected"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.FileInjectedLayers.RegisterInjectedMounts.mySynchronizeReadHostLayerCurrentData">
            <summary>
            Ensures synchronization on reading injected layer settings from the host layer: that the lifetime does not terminate while we're busy.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.UserInterface.FileInjectedLayers.RegisterInjectedMounts.Synchronize">
            <summary>
            Normally, host layers are watched for injections info async with a delay.
            If you've just added injection info, call into this method to immediately update the set of injected layers.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.FileInjectedLayers.RegisterInjectedMounts.FileInjectedLayerInstance.ActualPath">
            <summary>
            The current actual absolute path of the layer (either calculated from the relative, or taken as absolute).
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.UserInterface.InjectedLayersSettingsKey">
            <summary>
            Base key for all injected layers related data.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.UserInterface.ResetSettings">
            <summary>
            Requests for resetting the settings to their defaults should be sent thru this class.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.UserInterface.ResetSettings.Reset(JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer.Identity,System.Collections.Generic.IEnumerable{JetBrains.Util.JetTuple{JetBrains.Application.Settings.SettingsKey,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object}}})">
            <summary>
            <para>Resets settings to their defaults.</para>
            <para>Unlike <see cref="M:JetBrains.Application.Settings.UserInterface.ResetSettings.ResetAllSettings"/>, does not treat user-injected layers in a special way.</para>
            </summary>
            <param name="layerid">Optional. The layer to reset settings in. If omitted, settings will be reset in all the layers.</param>
            <param name="keys">Optional. Keys whose child settings should be reset. Settings outside these keys will not be affected. Resets all applicable settings if omitted.</param>
        </member>
        <member name="M:JetBrains.Application.Settings.UserInterface.ResetSettings.ResetAllSettings">
            <summary>
            <para>Resets all settings to their factory defaults.</para>
            <para>User-injected layers are not wiped, they are just deleted as injected layers. If they are injected from a file, the settings in that file remain intact.</para>
            <para>See also <see cref="T:JetBrains.Application.Settings.UserInterface.ResetSettings"/> which wipes specific (or all) layers without telling injected ones apart.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer">
            <summary>
            We can be settings on options pages in different contexts, like “Smart”, “Solution Shared Settings Only”.
            Also we might be mounting new settings files as layers and changing their order.
            This class describes one of these layers, as visible to the user..
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer.SettingsStoreContext">
            <summary>
            The settings context for reading/writing on this layer.
            All of these are opened over the same settings store transaction. If you're working with these in an Options dialog, then they're in the Options Dialog transaction.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer.Id">
            <summary>
            Identifies this layer in an instance-invariant and transaction-invariant manner.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer.Priority">
            <summary>
            Priority of this layer when displaying a sorted layers list.
            The lower the number, the higher the priority.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer.Metadata">
            <summary>
            <para>Exposes the metadata of the layer (writable).</para>
            <para>For layers based on a mounting point, this is the metadata of the mounting point.</para>
            <para>For the default layer, this is just a disconnected local bag.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer.DisplayName">
            <summary>
            Display name of the layer. This is composed out of the <see cref="F:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayers.DisplayName"/> metadata and the mounting point name (<see cref="P:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer.Name"/>) if the former is empty.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer.Icon">
            <summary>
            Icon of the layer. This is composed out of the <see cref="F:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayers.Icon"/> metadata
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer.IsDefault">
            <summary>
            Whether it's the default “Smart” “settings layer” (a combination of all application-wide mounts) which is edited in the default Options dialog.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer.Identity">
            <summary>
            Allows to identify and match settings layers in different transactions.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer.Identity.CharacteristicMount">
            <summary>
            Any layer besides the default (smart) one originates from a mounting point, which is made writable and to which all of the mounting points with factory defaults are mixed in.
            This gives out this originating mount of the layer, or <c>Null</c> for the default (smart) layer.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayers">
            <summary>
            We can be editing settings on options pages in different contexts, like “Smart”, “Solution Shared Settings Only” (displayed as tabs above settings page in the options view).
            This class describes a set of such contexts.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayers.DefaultLayer">
            <summary>
            The default options context for smart editing which always exists.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayers.AvailableLayers">
            <summary>
            The list of available options context which could be manually selected for editing by the user.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayers.IsHiddenFromUserFriendlyLayers">
            <summary>
            Set this metadata to <c>True</c> on a mounting point if you want to keep it from appearing in the user-friendly settings layers list (in Options' SaveTo, in SettingsLayers dialog, etc).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayers.Origin">
            <summary>
            Some text which hints on the origin of the layer — e.g. from appdata or solution folder.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayers.DiskFilePath">
            <summary>
            In case this layer originates as a disk file, exposes the full path to that file.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayers.DisplayName">
            <summary>
            If non-empty, could be used as the display name for the layer in the user interface. Otherwise, the mount point name should be used where applicable.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayers.Icon">
            <summary>
            If non-empty, could be used as the icon for the layer in the user interface. Otherwise, the mount point name should be used where applicable.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayers.SettingsLayersProductOptOut">
            <summary>
            <para>A property to be set on the product's <see cref="T:JetBrains.Application.IApplicationDescriptor"/>'s <see cref="P:JetBrains.Application.IApplicationDescriptor.Bag"/>.</para>
            <para>Setting it to <c>True</c> means the product opts out of user's settings layers awareness and platform infrastructure should conceal layered nature of the settings subsystem as much as possible.</para>
            <para>The default is <c>False</c>.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayers.Flags.IncludeHiddenLayers">
            <summary>
            By default, layers with <see cref="F:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayers.IsHiddenFromUserFriendlyLayers"/> metadata are excluded from the user-friendly-layers list.
            This flag overrides the behavior to include all of the available layers.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers">
            <summary>
            <para>Central management authority for user-injected settings layers — those that were added by a user when mounting e.g. a disk file as a new settings layer.</para>
            <para>“User-Injected Layer” — a settings layer (backed up by a <see cref="T:JetBrains.Application.Settings.ISettingsStorageMountPoint">mounting point</see> in the <see cref="T:JetBrains.Application.Settings.ISettingsStore">Settings Store</see>) created by the user over some disk file or URI or other media.</para>
            <para>“Layer Hosting User Injections” — to restore injected layers in subsequent sessions, information on them is stored as settings in one of the regular layers. A layer which can store such information is a hosting layer (regardless of whether it has any such records already or not). Each user-injected layer belongs to exactly one hosting layer, so they have some kind of a parent-child relation. Currently an injected layer cannot host injections, but that might be a subject to change.</para>
            <para>The overall operation is as follows: when <see cref="T:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers"/> sees a new hosting layer, it publishes it on the <see cref="F:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.LayersHostingUserInjections"/> collection. Specific user injected layer implementations watch this structure, load their settings from each new hosting layer, and call into <see cref="T:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers"/> for registering the layer. Creation of a brand new injected layer is on the handlers' part. Layer deletion could be initiated from <see cref="T:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers"/> because there should be the single deletion action for the layers.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.IsHostingUserInjections">
            <summary>
            If the mounting point is holding the list of user-mounted layers which are mounted when the mounting point is loaded and aligned in the same “group” as their parent mount.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.IsUserInjected">
            <summary>
            If the mounting point was created as a user-mounted layer based on the list in some <see cref="F:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.IsHostingUserInjections"/> mounting point.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.InjectedLayerDescriptor">
            <summary>
            Metadata on the mounting point of the injected layer with its descriptor object, as provided by the owner.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.LayersHostingUserInjections">
            <summary>
            Lists all of the injection hosting layers which might possibly contain records on injected layers in them.
            Injection handlers should watch this collection, read their own injection information in their own format from the settings of that layer, and <see cref="M:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.RegisterUserInjectedLayer(JetBrains.DataFlow.Lifetime,JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.UserInjectedLayerDescriptor)"/> for each of such layers.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.myMapInjectedMountToInjectedLayer">
            <summary>
            Allows to get injection runtime info by injected layer ID.
            Mounts are created by <see cref="T:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.UserInjectedLayerRuntimeInfo"/>s, a runtime info lives the whole span the injection is defined, while the mounts get recreated from time to time.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.myMapHostMountToHostingLayer">
            <summary>
            Allows to get hosting layer runtime info by hosting layer ID.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.myLayersHostingUserInjectionsInternal">
            <summary>
            Same as <see cref="F:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.LayersHostingUserInjections"/>, but contains the full info.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.RegisterUserInjectedLayer(JetBrains.DataFlow.Lifetime,JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.UserInjectedLayerDescriptor)">
            <summary>
            <para>Registers a user-injected layer in the settings system.</para>
            <para>After calling this method, the layer becomes available with the Settings Store, and this class registers its relation between the injection host and injected layer.</para>
            <para>This method is to be called by injections functionality implementation (for example, file-based injections). That code should watch for any new <see cref="F:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.LayersHostingUserInjections"/>, read the feature-specific injection information from it, create the storage and the mounting point WIHTOUT registering them with the settings system, set <see cref="F:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.IsUserInjected"/> metadata on the mounting point, and supply the metadata to this function. When the layer is just injected by the user in the UI, the injection settings should be written to the appropriate injections host, the functionality should then get the change notification and process it by creating the storage and supplying it to this function.</para> 
            </summary>
            <param name="lifetimeInjection">Duration of the injection registration.</param>
            <param name="descriptor"></param>
        </member>
        <member name="M:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.IsUserInjectedLayer(JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer.Identity)">
            <summary>
            Gets whether this layer has been user-injected.
            </summary>
            <param name="layerPossiblyInjected"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.IsHostingUserInjectedLayers(JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer.Identity)">
            <summary>
            Gets if the layer might yield user-injected layers.
            Note that this does not necessarily mean it will.
            </summary>
            <param name="layerPossiblyHostingInjections"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.TryGetLayerHostingUserInjectedLayer(JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer.Identity)">
            <summary>
            If this layer is user-injected, gets the layer which is hosting it.
            Otherwise, <c>NULL</c>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.GetLayerHostingUserInjectedLayer(JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer.Identity)">
            <summary>
            If this layer is user-injected, gets the layer which is hosting it.
            Otherwise, throws an exception.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.Init_WatchForHostingLayers(JetBrains.DataFlow.Lifetime,JetBrains.Application.Settings.Store.Implementation.SettingsStorageMountPoints,JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayers,JetBrains.Threading.IThreading,JetBrains.Util.ILogger)">
            <summary>
            Expose those mounts that might have user-mounted layers written to them.
            </summary>
            <param name="lifetime"></param>
            <param name="mounts"></param>
            <param name="layers"></param>
            <param name="threading"></param>
            <param name="logger"></param>
        </member>
        <member name="M:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.Init_AssertValidFlags(JetBrains.DataFlow.Lifetime,JetBrains.Application.Settings.Store.Implementation.SettingsStorageMountPoints,JetBrains.Util.ILogger)">
            <summary>
            Asserts user-mounted-layer-related metadata flags combination is valid on mounting points.
            </summary>
            <param name="lifetime"></param>
            <param name="mounts"></param>
            <param name="logger"></param>
        </member>
        <member name="M:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.GetAllUserInjectedLayers">
            <summary>
            Gets user-injected layers coming from all the hosts.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.GetUserInjectedLayersFromHost(JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer.Identity)">
            <summary>
            Gets user-injected layers coming from the specific host.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.DeleteUserInjectedLayer(JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer.Identity)">
            <summary>
            Deletes the user-injected layer: the record on the injection in the hosting layer is erased, and the layer disappears from the settings system.
            </summary>
            <param name="layerInjected"></param>
        </member>
        <member name="M:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.TurnInjectedLayerOnOff(JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer.Identity,System.Nullable{System.Boolean})">
            <summary>
            <para>An injected layer might be turned off, in which case all of its settings do not take effect, even though information about the layer is not removed from the system.</para>
            <para>This method allows to toggle the state.</para>
            </summary>
            <param name="layerInjected"></param>
            <param name="desired"><c>True</c> to turn on, <c>False</c> to turn off, <c>Null</c> to toggle.</param>
            <returns>Actual on/off state after this method runs (especially useful with Toggle).</returns>
        </member>
        <member name="M:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.IsInjectedLayerOn(JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer.Identity)">
            <summary>
            See <see cref="M:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.TurnInjectedLayerOnOff(JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer.Identity,System.Nullable{System.Boolean})"/>.
            Gets the current state.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.CanReorderInjectedLayers(JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer.Identity,JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.ReorderInjectedLayersFlags)">
            <summary>
            Gets whether we can change relative order of the injected layers of the same hosting layer.
            </summary>
            <param name="layerToMove">The layer whose position is supposed to be changed.</param>
            <param name="how">How the potision should be changed. See flag values for details.</param>
        </member>
        <member name="M:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.ReorderInjectedLayers(JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer.Identity,JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.ReorderInjectedLayersFlags,JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer.Identity)">
            <summary>
            Changes relative order of the injected layers of the same hosting layer.
            </summary>
            <param name="layerToMove">The layer whose position is to be changed.</param>
            <param name="how">How the potision should be changed. See flag values for details.</param>
            <param name="other">Meaning depends on the <paramref name="how"/> value, see flag values for details.</param>
        </member>
        <member name="T:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.UserInjectedLayerDescriptor">
            <summary>
            Info provided by layer registrator.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.UserInjectedLayerDescriptor.InjectionsHostLayer">
            <summary>
            The injections host (which stores the information about the injected layer in its settings). If you're watching for <see cref="F:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.LayersHostingUserInjections"/>, then it's the layer you got notified of.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.UserInjectedLayerDescriptor.Identity">
            <summary>
            <para>The persistent identity of this injected layer. For such features as turning injected layers on/off and editing their priority to work between sessions, this must be persistent between sessions per layer. This should be related to the information stored in the hosting layer by the injection handlers.</para>
            <para>NOTE: this identity must be unique per hosting layer.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.UserInjectedLayerDescriptor.InjectedLayerStorage">
            <summary>
            The storage which should be mounted as an injected layer.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.UserInjectedLayerDescriptor.DeleteRequested">
            <summary>
            Called by <see cref="T:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers"/> when user requests deletion of an injected layer.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.UserInjectedLayerDescriptor.InitialMetadata">
            <summary>
            Any initial metadata, such as a custom <see cref="F:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayers.DisplayName">display name</see>, which will be applied to the mounting points created to represent your injected layer in the Settings Store.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.UserInjectedLayerRuntimeInfo">
            <summary>
            Info on the runtime instance of an injected layer, as stored by this class.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.UserInjectedLayerRuntimeInfo.HostingLayer">
            <summary>
            Data on the hosting layer (“parent” of this injected layer).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.UserInjectedLayerRuntimeInfo.InjectedMount">
            <summary>
            The mounting point currently representing this injected layer.
            It is registered with the Settings Store.
            It is recreated per each combination of the flags, e.g. on change of the priority.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.UserInjectedLayerRuntimeInfo.IsOn">
            <summary>
            When <c>True</c>, the contents of the mount take part in the Settings Store.
            When <c>False</c> (which corresponds to the unchecked checkbox in the Settings Layers dialog), the contents of the mount are excluded from the Settings Store, even though it's still listed throughout the system.
            This is manifested thru the <see cref="P:JetBrains.Application.Settings.ISettingsStorageMountPoint.IsAvailable"/> parameter.
            A mount is recreated to update this flag.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.UserInjectedLayerRuntimeInfo.RelativePriority">
            <summary>
            The mount priority, as exposed in <see cref="P:JetBrains.Application.Settings.ISettingsStorageMountPoint.Priority"/>.
            A mount is recreated to update this flag.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.UserInjectedLayerRuntimeInfo.Identity">
            <summary>
            Exposes <see cref="F:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.UserInjectedLayerRuntimeInfo.Descriptor"/>.<see cref="F:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.UserInjectedLayerDescriptor.Identity"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.UserInjectedLayerRuntimeInfo.DisplayName">
            <summary>
            Bound to the display name metadata on all of the mounts.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.HostingLayerRuntimeInfo.InjectedLayers">
            <summary>
            Lists the injected layers of this host. Is a hash set.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.HostingLayerRuntimeInfo.myMapIdentityToInjectedLayer">
            <summary>
            Helper dictionary for navigating <see cref="F:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.HostingLayerRuntimeInfo.InjectedLayers"/> by identities.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.HostingLayerRuntimeInfo.ReorderInjectedLayers(JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.UserInjectedLayerRuntimeInfo,JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.ReorderInjectedLayersFlags,JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.UserInjectedLayerRuntimeInfo)">
             <summary>
             Changes relative order of the injected layers of the same hosting layer.
             </summary>
             <param name="injectedToMove">The layer whose position is to be changed.</param>
             <param name="how">How the potision should be changed. See flag values for details.</param>
             <param name="injectedOther">Meaning depends on the <paramref name="how"/> value, see flag values for details.</param>
             <remarks>
             Invariants: 
             (1) The priorities must be changed so that the desired order applies.
             (2) We assume that all of the existing priorities are different (otherwise (2) might not be totally fulfilled). // TODO: validate on host load
             (3) As few positions as possible must be changed, because a position change means recreating mounting points and firing settings changes on each operation.
            
             Algorithm:
             Determine two priorities between which the item should be placed. On edges, higher one is zero and lower one is last plus one.
             Choose the new priority to be the mean value of those two priorities.
             </remarks>
        </member>
        <member name="M:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.HostingLayerRuntimeInfo.ReorderInjectedLayers_GetAllPrioritiesConsistent">
            <summary>
            Reads all of the priorities known to customization settings, and makes sure they're consistent in that there're no missing, negative, or duplicate values. Rewrites priorities in the settings store before returning the list as needed.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.ReorderInjectedLayersFlags.MakeFirst">
            <summary>
            <para>Makes the layer first in the list (with the highest priority).</para>
            <para>This flag does not require the “other” parameter.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.ReorderInjectedLayersFlags.MakeLast">
            <summary>
            <para>Makes the layer last in the list (with the highest priority).</para>
            <para>This flag does not require the “other” parameter.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.ReorderInjectedLayersFlags.PutBefore">
            <summary>
            <para>Places the layer immediately before another layer (with a slightly higher priority).</para>
            <para>This flag requires the “other” parameter.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.ReorderInjectedLayersFlags.PutAfter">
            <summary>
            <para>Places the layer immediately after another layer (with a slightly lower priority).</para>
            <para>This flag requires the “other” parameter.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.ReorderInjectedLayersFlags.UpOne">
            <summary>
            <para>Takes the nearest layer with a higher priority and does <see cref="F:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.ReorderInjectedLayersFlags.PutBefore"/> for it.</para>
            <para>This flag does not require the “other” parameter.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.ReorderInjectedLayersFlags.DownOne">
            <summary>
            <para>Takes the nearest layer with a lower priority and does <see cref="F:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.ReorderInjectedLayersFlags.PutAfter"/> for it.</para>
            <para>This flag does not require the “other” parameter.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.EnvironmentSettings">
            <summary>
            <para>Root key for Environment settings.</para>
            <para>Refer to it in your settings classes that should be directly parented under Environment — but preferrably choose any of the existing nodes under Environment.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.HousekeepingSettings">
            <summary>
            <para>Root key for all housekeeping data (i.e. cached shortcuts data, recently used something global etc).</para>
            <para>Refer to it in your settings classes that should be directly parented under Housekeeping — but preferrably choose any of the existing nodes under Housekeeping.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageStreamSerialization">
            <summary>
            Handles binding settings storage to some physical media exposed as a stream.
            If you got some stream (e.g. a file stream), you can use this interface to serialize storages.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.Persistence.SettingsStorageXmlStreamSerialization">
            <summary>
            Operates over <see cref="T:JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageEntriesSerialization"/> (whose serialization works on entries' in-memory representation). Uses <see cref="T:JetBrains.Application.Settings.Storage.Persistence.EntriesReader"/> and <see cref="T:JetBrains.Application.Settings.Storage.Persistence.EntriesWriter"/> to convert it into XML serialization over the given stream.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.SettingsStorageChangeArgs">
            <summary>
            Args for <see cref="M:JetBrains.Application.Settings.Storage.ISettingsStorage.AdviseChange(JetBrains.DataFlow.Lifetime,System.Action{JetBrains.Application.Settings.Storage.SettingsStorageChangeArgs},JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext)"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.SettingsStorageChangeArgs.Keys">
            <summary>
            <para>The list of the keys which were assigned to a new value or whose value was reset.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.ISettingsStorageEx_Obsolete.GetObsolete(JetBrains.Application.Settings.Storage.ISettingsStorage,System.String,JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext)">
            <summary>
            Tries to get the value of the key. 
            </summary>
            <param name="thіs"></param>
            <param name="key">Key.</param>
            <param name="transaction"></param>
            <returns>Either a value of one of the predefined types (<see cref="T:JetBrains.Application.Settings.Storage.SettingsStorageHelpers.StorageValueTypeId"/>), or <c>Null</c> if the value for this key is not set.</returns>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.ISettingsStorageEx_Obsolete.SetObsolete(JetBrains.Application.Settings.Storage.ISettingsStorage,System.String,System.Object,JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext)">
            <summary>
            Sets or resets the value of the key.
            </summary>
            <param name="thіs"></param>
            <param name="key">Key.</param>
            <param name="value">Either a value of one of the predefined types (<see cref="T:JetBrains.Application.Settings.Storage.SettingsStorageHelpers.StorageValueTypeId"/>) to assign, or <c>Null</c> to reset the value of the given key.</param>
            <param name="transaction"></param>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.Persistence.EntriesReader">
            <summary>
            State machine for reading settings entries from a possibly-broken XML stream.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.EntriesReader.myXmlReader">
            <summary>
            The XML reader actually used for reading. Non-NULL while we're operational.
            Could be either directly the reader passed in, or the wrapping positional XML reader, if we're recording positions.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.EntriesReader.myLocationAwareXmlReader">
            <summary>
            Wrapping XML reader to know the positions, if we're recording positions. Otherwise, NULL. Also indicates whether we're recording positions.
            When non-NULL, points to the same object as <see cref="F:JetBrains.Application.Settings.Storage.Persistence.EntriesReader.myXmlReader"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.EntriesReader.Entries">
            <summary>
            What we've read from the stream up to the current moment.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.EntriesReader.EntryPositions">
            <summary>
            Records positions of the entries encountered as pairs of entry key and position.
            Note that entry keys are not unique here because each entry might be encountered multiple times in the stream (which is not valid, but possible). The count might be larger than <see cref="F:JetBrains.Application.Settings.Storage.Persistence.EntriesReader.Entries"/> for that reason.
            Note that this list might contain positions of invalid entries (without a key, with an invalid value, and so on).
            Empty unless <see cref="F:JetBrains.Application.Settings.Storage.Persistence.EntriesReader.EntryPositionsFlag.Record"/> in ctor.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.EntriesReader.ResourceDictionaryPositions">
            <summary>
            Records positions of <see cref="T:System.Windows.ResourceDictionary"/> elements (normally the root element holding all of the entries) encountered in the stream.
            A valid stream should have exactly one, at the root, parenting all of the entries.
            Empty unless <see cref="F:JetBrains.Application.Settings.Storage.Persistence.EntriesReader.EntryPositionsFlag.Record"/> in ctor.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.EntriesReader.Run(System.Xml.XmlReader,JetBrains.Application.Settings.Storage.Persistence.EntriesReader.EntryPositionsFlag)">
            <summary>
            Runs the reader. Fluent.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.EntriesReader.Step_ReadEntryElementStart_GetEntryKey">
            <summary>
            The key is in the x:Key attribute on the entry element.
            As our entry elements are only convertible from a string value (cannot be assigned thru a proeprty in either attribute or element syntax), the value must be given as text content of the element (this cannot be mixed content, XAML parser fails on that "Cannot have property elements on objects created via TypeConverter"). Thus there's no place to give x:Key in element syntax, and it can be only in the attribute.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.EntriesReader.Step_Any_GetEntryTypeId">
            <summary>
            When reader is at an element (opening tag of an element, or an empty element), checks the element fq name to see if it's a settings entry element. Throws if it's not.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.EntriesReader.Step_Any_IsResourceDictionaryElement">
            <summary>
            Gets if the current element is a resource dictionary.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.EntriesReader.Step_Any_TryGetEntryTypeId">
            <summary>
            When reader is at an element (opening tag of an element, or an empty element), checks the element fq name to see if it's a settings entry element. <c>Null</c> if it's not.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.EntriesReader.ReadEntryValueData.XmlSpace">
            <summary>
            XML Space (preserve/default) will be applied to value content after reading it thru, when we'll be positioned on the next element already, must use the actual entry element's value.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.EntriesReader.State.Initial">
            <summary>
            Before stepping.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.EntriesReader.State.GenericRead">
            <summary>
            Default reading state. Waiting for an entry element.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.EntriesReader.State.UsedUp">
            <summary>
            When done.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.EntriesReader.State.ReadEntryElementStart">
            <summary>
            We've encountered an element which is likely an entry, called when the reader is positioned on this element to acknowledge entry type/key and start reading its value.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.EntriesReader.State.ReadEntryValueBegin">
            <summary>
            After acknowledging the entry element, initializes into value reading. Still positioned on the entry element.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.EntriesReader.State.ReadEntryValueEndClear">
            <summary>
            We're thru with reading entry value content nodes, store the entry value and proceed to generic-read.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.EntriesReader.State.ReadEntryValueNodes">
            <summary>
            The reader is positioned inside the value content, we're reading the nodes and collecting the content.
            Looking for either end tag of content element (checking by reader depth) or for any other entries which might erronousely be placed inside (eg when an element closing tag is lost during merge).
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.Persistence.EntriesReader.EntryPositionsFlag">
            <summary>
            Whether to record locations of the entries when scanning through the XML document.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.Persistence.EntriesWriter">
            <summary>
            Utility for writing settings entry into an XML stream based on the existing possibly-broken XML stream with entries and various other XML data.
            The writer must persist the existing non-settings element and order of the already-existing entries.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.EntriesWriter.Run(System.Collections.Generic.Dictionary{System.String,System.Object},System.Action{System.Action{System.Xml.XmlReader}},System.Action{System.Action{System.Xml.XmlWriter}},JetBrains.Util.ILogger,JetBrains.Util.ILogger)">
            <summary>
            Runs the task.
            </summary>
            <param name="entries">The entries to be written.</param>
            <param name="FCreateReader">
            <para>Opens the reader to the previously existing XML stream which should be updated with the new entries.</para>
            <para>Might be called up to two times, first for choosing the writing positions for the new entries, then for streaming into the output writer.</para>
            <para>Yield <c>NULL</c> if there were no pre-existing stream (e.g. writing for the first time).</para>
            <para>Note: <paramref name="FCreateReader"/> and <paramref name="FCreateWriter"/> cannot be on the same stream (file, etc) because they might be created at the same time to pipe the content thru.</para>
            </param>
            <param name="FCreateWriter">
            <para>Opens the writer to emit the new XML stream (which includes the new entries and any other nodes from the previously existing stream, if there were any).</para>
            <para>If this function is never called during the run, then the output is empty and you might delete the storage altogether.</para>
            <para>Note: <paramref name="FCreateReader"/> and <paramref name="FCreateWriter"/> cannot be on the same stream (file, etc) because they might be created at the same time to pipe the content thru.</para>
            </param>
            <param name="loggerForReading">Logging facility used by the entries reader reading the existing entries stream.</param>
            <param name="loggerForWriting">Logging facility used by this class when writing data.</param>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.EntriesWriter.Run_UpdateExistingXml_WriteThruSingleNode(System.Xml.XmlWriter,System.Xml.XmlReader,JetBrains.Util.ILogger)">
            <summary>
            For simple node types, writes them thru.
            Based on <see cref="M:System.Xml.XmlWriter.WriteNode(System.Xml.XmlReader,System.Boolean)"/>, but only handles single-node types and never calls Read on the reader.
            The abovementioned std method is only good for elements. When called on a text node, also kills the next element ('cause it awats for some kind of EndElement to stop).
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.EntriesWriter.Run_UpdateExistingXml_WriteThroughElementOpeningTag(JetBrains.Application.Settings.Storage.Persistence.LocationAwareXmlReader,System.Xml.XmlWriter)">
            <summary>
            Pipes the opening tag of an element thru.
            </summary>
            <param name="xmlreader"></param>
            <param name="xmlwriter"></param>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.EntriesWriter.Run_UpdateExistingXml_IsElementWithEntriesInside(System.Collections.Generic.List{JetBrains.Application.Settings.Storage.Persistence.EntriesWriter.PositionAction},System.Int32,JetBrains.Application.Settings.Storage.Persistence.LocationAwareXmlReader.NodePosition,JetBrains.Util.ILogger)">
            <summary>
            Looks up quickly if there're any entry positions child to the element identified by the position.
            </summary>
            <param name="elementactions">Sorted actions list.</param>
            <param name="nIndexInElementActions">Index of the current position in the sorted actions list. Must be AFTER a <see cref="M:JetBrains.Application.Settings.Storage.Persistence.EntriesWriter.Run_UpdateExistingXml_TryGetEntryElementAction(System.Collections.Generic.List{JetBrains.Application.Settings.Storage.Persistence.EntriesWriter.PositionAction},JetBrains.Application.Settings.Storage.Persistence.LocationAwareXmlReader.NodePosition,System.Int32@,JetBrains.Application.Settings.Storage.Persistence.EntriesWriter.EntryElementAction@,System.String@,JetBrains.Util.ILogger)"/> lookup for the current position.</param>
            <param name="position">Position of the element we're checking for child entries.</param>
            <param name="logger"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.EntriesWriter.Run_UpdateExistingXml_IsElementEntrysFirstChild(System.Collections.Generic.List{JetBrains.Application.Settings.Storage.Persistence.EntriesWriter.PositionAction},System.Int32,JetBrains.Application.Settings.Storage.Persistence.LocationAwareXmlReader.NodePosition)">
            <summary>
            Looks up quickly if this element is the first child of an entry.
            Removing the first entry child element “reveals” the content nodes of the parent that were previously blocked by this element.
            </summary>
            <param name="elementactions">Sorted actions list.</param>
            <param name="nIndexInElementActions">Index of the current position in the sorted actions list. Must be AFTER a <see cref="M:JetBrains.Application.Settings.Storage.Persistence.EntriesWriter.Run_UpdateExistingXml_TryGetEntryElementAction(System.Collections.Generic.List{JetBrains.Application.Settings.Storage.Persistence.EntriesWriter.PositionAction},JetBrains.Application.Settings.Storage.Persistence.LocationAwareXmlReader.NodePosition,System.Int32@,JetBrains.Application.Settings.Storage.Persistence.EntriesWriter.EntryElementAction@,System.String@,JetBrains.Util.ILogger)"/> lookup for the current position.</param>
            <param name="position">Position of the element we're checking for being the first child.</param>
            <remarks>How: look into the previous position, if it's our parent =&gt; we're the first child.</remarks>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.EntriesWriter.Run_UpdateExistingXml_TryGetEntryElementAction(System.Collections.Generic.List{JetBrains.Application.Settings.Storage.Persistence.EntriesWriter.PositionAction},JetBrains.Application.Settings.Storage.Persistence.LocationAwareXmlReader.NodePosition,System.Int32@,JetBrains.Application.Settings.Storage.Persistence.EntriesWriter.EntryElementAction@,System.String@,JetBrains.Util.ILogger)">
            <summary>
            Looks up the next sequential item in the sorted list.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.EntriesWriter.XX_GetValueAndTypeId(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},JetBrains.Application.Settings.Storage.SettingsStorageHelpers.StorageValueTypeId@,System.Object@)">
            <summary>
            Safely gets the value out of the map, checks that it's of a valid type, and gets its Type ID.
            This method throws all of its errors out.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.Persistence.EntriesWriter.RunResult">
            <summary>
            What's been done to the output stream, and how you should treat it.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.EntriesWriter.RunResult.NewSignificantContent">
            <summary>
            The XML Writer creator was called, the new significant content (different from the previous one) has been written. Should be persisted to media.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.EntriesWriter.RunResult.NoChange">
            <summary>
            There're no changes to do to the content, the old one could be used. If a file, just don't touch.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.EntriesWriter.RunResult.NoSignificantContent">
            <summary>
            There're no entries to write.
            The XML Writer creator was called, the insignificant content (any non-entry elements encountered in the input stream) has been written.
            Generally, should be persisted to media (to maintain any content we don't understand, eg from newer versions).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.EntriesWriter.RunResult.NoContentAtAll">
            <summary>
            There're no entries to write, and there were no insignificant content (any non-entry elements encountered in the input stream).
            The XML Writer creator was called, and the settings storage XML stream infrastructure has been emitted, but there's nothing else.
            If the file presence is important (e.g. per-project settings), the file might be freely deleted.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.Format.Base64Blob">
            <summary>
            Represents serialization of the BLOB type as a BASE64 string.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.Persistence.LocationAwareXmlReader">
            <summary>
            A wrapping XML reader that can tell the (stable enough) position of the current node. These positions have linear order and can be used to identify the same node when reading the document for the next time.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.LocationAwareXmlReader.CurrentPositionSnapshot">
            <summary>
            Creates a copy of the current node hierarchical position (contains a list of indices, so a snapshot is required of you'd like to store it for later use).
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.LocationAwareXmlReader.CurrentPositionVolatile">
            <summary>
            Returns a view on the current position (without cloning its byref part). Cannot be stored for later use because will be invalidated on the next step.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.Storage.Persistence.LocationAwareXmlReader.NodeAbsoluteIndex">
            <summary>
            Zero-based absolute index of the node.
            Note that this depends on reader settings (whether to autoexpand entities or not) and read process decisions (whether to resolve into each particular entity or not), so it's recommended to use the <see cref="M:JetBrains.Application.Settings.Storage.Persistence.LocationAwareXmlReader.CurrentPositionSnapshot"/>, which is accurate on element nodes.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.LocationAwareXmlReader.NodePosition.ElementIndices">
            <summary>
            Hierarchical index of the current element (if it's the current node), or the element containing the current node for non-element nodes (such as text, comments, whitespace, etc).
            The first item is the index of the top-level element (always <c>0</c> in a valid XML document, could be above zero in XML fragments), the second is the index of its child element, and so on.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.LocationAwareXmlReader.NodePosition.OffsetFromElementTag">
            <summary>
            If the current node is the element tag, <c>0</c> for opening, closing, and self-closed tags (see <see cref="F:JetBrains.Application.Settings.Storage.Persistence.LocationAwareXmlReader.NodePosition.ElementTagKind"/> for kind).
            If the current node is not an element tag, the number of nodes encountered since the last element opening, closing, or self-closed tag (see <see cref="F:JetBrains.Application.Settings.Storage.Persistence.LocationAwareXmlReader.NodePosition.ElementTagKind"/>for kind: <see cref="F:JetBrains.Application.Settings.Storage.Persistence.LocationAwareXmlReader.NodePosition.ElementTagKinds.Opening"/> means the node is after the opening tag and is a child of that element; <see cref="F:JetBrains.Application.Settings.Storage.Persistence.LocationAwareXmlReader.NodePosition.ElementTagKinds.Closing"/> or <see cref="F:JetBrains.Application.Settings.Storage.Persistence.LocationAwareXmlReader.NodePosition.ElementTagKinds.EmptyElement"/> means it's after the closing or self-closed tag, i.e. the node is on the same level as the element).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.LocationAwareXmlReader.NodePosition.ElementTagKind">
            <summary>
            For an element tag node: the kind of that tag.
            For a non-element node: <see cref="F:JetBrains.Application.Settings.Storage.Persistence.LocationAwareXmlReader.NodePosition.ElementTagKinds.Opening"/> means that <see cref="F:JetBrains.Application.Settings.Storage.Persistence.LocationAwareXmlReader.NodePosition.ElementIndices"/> points to the parent element of this node (there were no previous sibling elements to address from yet), and other values mean that <see cref="F:JetBrains.Application.Settings.Storage.Persistence.LocationAwareXmlReader.NodePosition.ElementIndices"/> is some prev-prev-...-sibling of this node, and nodes are counted starting with its closing tag (which is <see cref="F:JetBrains.Application.Settings.Storage.Persistence.LocationAwareXmlReader.NodePosition.OffsetFromElementTag"/>=<c>0</c>), or the self-closed tag.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.LocationAwareXmlReader.NodePosition.Clone">
            <summary>
            Snapshots the position.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.LocationAwareXmlReader.NodePosition.IsElement">
            <summary>
            Gets whether this node is either an element opening tag or an empty element's self-closed tag.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.LocationAwareXmlReader.NodePosition.CreateFromXmlElement(System.Xml.XmlElement)">
            <summary>
            Creates a node position from an XML element in an XML document.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.LocationAwareXmlReader.NodePosition.GetXmlElementByPosition(System.Xml.XmlDocument)">
            <summary>
            Looks up an element in the XML document by this position.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.Storage.Persistence.LocationAwareXmlReader.NodePosition.Depth">
            <summary>
            Gets the depth of the node indicated by the position, just the same way as <see cref="P:System.Xml.XmlReader.Depth"/> would do.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.Persistence.SettingsStorageXmlHelpers">
            <summary>
            Helpers for serializing Settings Storage entries to and from XML.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.SettingsStorageXmlHelpers.NamespaceUri.SystemWindows">
            <summary>
            XML NS alias for the System.Windows namespace (and a couple others).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.SettingsStorageXmlHelpers.NamespaceUri.SystemInMscorlib">
            <summary>
            XML NS for the System namespace in mscorlib (CLR NS form only, no URI alias).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.SettingsStorageXmlHelpers.NamespaceUri.SystemWindowsMarkup">
            <summary>
            XML NS alias for the System.Windows.Markup namespace.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.SettingsStorageXmlHelpers.NamespaceUri.SettingsStorageFormat">
            <summary>
            XML NS alias for our CLR namespace that contains the BLOB class.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.SettingsStorageXmlHelpers.XmlNamespaceDescriptions.ResolveNamespaceUri(System.String)">
            <summary>
            Tries to resolve XML namespace URI in any form to one of the known kinds (could be a CLR namespace, an alias URI, etc).
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile">
            <summary>
            Binds <see cref="T:JetBrains.Application.Settings.Storage.SettingsStorageBase"/> to a disk file.
            </summary>
            <remarks>
            <para>Path is supplied as a property. Whenever the property value changes, or the file content pointed to by the path changes, the settings storage is reloaded.</para>
            <para>Behavior depending on the path and its file conditions (when discovered):</para>
            <para>• Path is <c>Null</c>: means the disk storage is not available, operate in-memory only (e.g. temp solution — doesn't have the file yet). Action: memory storage operates normally (do not clear), no reload actions are taken. We hope to have some path for the final save, but if not, the settings will be dropped.</para>
            <para>• Path is non-<c>Null</c>, but the file does not exist: possible causes: either the storage got empty and the file has been deleted, or the file has been temporarily deleted during a write or merge operation, or the storage path has changed to the new location. Action: if path has changed, save in-memory storage ASAP to the new location; otherwise, keep memory storage intact for some amount of time or until a forced save is requested; at then, reload as if from the empty storage (all in-memory content but for the dirty diff is deleted).</para>
            <para>• Path is non-<c>Null</c>, the file exists, but its content is invalid: keep the in-memory copy for as long as possible; when forced to save, overwrite the corrupted content.</para>
            <para>• Path is non-<c>Null</c>, the file exists, and its content is valid: read to replace the from-stream cache of the storage, the dirty diff remains as-is.</para>
            </remarks>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.myIsReloadReschedulled">
            <summary>
            A failed reload is reschedulled.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.myIsSaveReschedulled">
            <summary>
            A failed save is reschedulled.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.#ctor(JetBrains.DataFlow.Lifetime,JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageStreamSerialization,JetBrains.DataFlow.IProperty{JetBrains.Util.FileSystemPath},JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.SavingEmptyContent,JetBrains.Application.FileSystemTracker.IFileSystemTracker,JetBrains.Threading.IThreading,JetBrains.Application.Settings.Storage.Persistence.FileSettingsStorageBehavior)">
            <summary>
            
            </summary>
            <param name="lifetime"></param>
            <param name="storage">What loads and saves from the stream on our file.</param>
            <param name="path">
            <para>The path to the file, or <c>Null</c> if the file location is not currently available.</para>
            <para>The value is used for reading (<c>Null</c> will cause a clean storage) or writing (<c>Null</c> will skip writing and keep all changes in memory).</para>
            <para>Also the path is watched for changes to reload new content when the file is modified (e.g. from SCC or another instance).</para>
            <para>When you point the path at the new location, it gets overwritten with the current in-memory changes.</para>
            </param>
            <param name="whenNoContent"></param>
            <param name="filetracker">Enables watching for external changes.</param>
            <param name="threading"></param>
            <param name="behavior"></param>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.Init_SaveOnDirty(JetBrains.DataFlow.Lifetime,JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageStreamSerialization,JetBrains.Threading.IThreading,JetBrains.Application.Settings.Storage.Persistence.FileSettingsStorageBehavior)">
            <summary>
            Schedulles save operation when the storage gets dirty.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.SaveRequested">
            <summary>
            Requests that the save operation be done soon. Can be called on any thread, does not wait for save to be completed. Normally schedulles save on another thread.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.myLockSerialization">
            <summary>
            Protects the file read-write operations in the whole.
            Also synchronizes lifetime termination on this object.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.ReloadReschedulled(System.Boolean)">
            <summary>
            Updates whether there's a pending reload reschedulled.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.SaveReschedulled(System.Boolean)">
            <summary>
            Updates whether there's a pending save reschedulled.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.Reload_IsWaitingForMissedFile(JetBrains.Util.FileSystemPath,JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.ReloadReason)">
            <summary>
            <para>This function is called when the file we're about to reload is missing from disk.</para>
            <para>If the file we're trying to reload is reported missing, wait for it for some time to reappear (e.g. user is in process of replacing the file with another version).</para>
            <para>This means that for some time we're not treating the missing file as an empty storage to load, but keeping the in-memory content in hope to load the actual file.</para>
            </summary>
            <param name="path"></param>
            <param name="reason"></param>
            <returns>Whether the reload process should be aborted and wait for the file to reappear.</returns>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.Reload_ReadStream(JetBrains.Util.FileSystemPath,System.Action{System.IO.Stream})">
            <summary>
            Reads the file stream while loading with appropriate locking and lockwaiting, throws out if the lock cannot be achieved in the time alotted.
            </summary>
            <param name="path"></param>
            <param name="F"></param>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.Save(JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.SaveDiffFlags,JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.SaveForcedFlags)">
            <summary>
            <para>Requests that the storage be saved to disk immediately and synchronously, on the main thread.</para>
            <para>Thread affinity is enforced to enable placing <see cref="M:JetBrains.Application.Settings.Storage.Persistence.FileSettingsStorageBehavior.QueryEditFile(JetBrains.Util.FileSystemPath)"/> calls which are affined to the main thread.</para>
            <para>If you're calling from a background thread, or do not care about synchronous execution, use <see cref="M:JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.SaveRequested"/>.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.Save_QueryEditFile">
            <summary>
            <para>Queries into the behavior whether the file could be written.</para>
            <para>Main thread only, due to SCC limitations.</para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.Save_WriteFile_OpenStreamAndTakeLock(JetBrains.DataFlow.Lifetime,JetBrains.Util.FileSystemPath,JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.SaveForcedFlags,System.Boolean)">
            <summary>
            Opens the file stream exclusively, which constitutes the interprocess lock.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.Save_WriteFile_PromoteWriteCache(System.IO.FileStream,JetBrains.Util.dataStructures.ChunkedMemoryStream)">
            <summary>
            Applies written data to the on-disk file.
            As we're now writing into an in-memory stream, this means writing the stream into the file.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.OptionWaitForDisappearedFileTimeout">
            <summary>
            See remarks to class. When the file disappears, we expect it might come back within this amount of time.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.myIsStorageCorruptedOnLoad">
            <summary>
            See remarks on the class.
            Means we should not auto-overwrite the settings, assuming the corruption might be due to the SCC conflict and might be fixed soon.
            Only overwrite on forced save if there is dirty content (but make a backup in such a case).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.StreamAccessRetryInitialMs">
            <summary>
            Initial interval before file access retry attempts, in milliseconds. Doubled with each next try.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.MaxReadStreamAccessWaitMs">
            <summary>
            The maximum waiting time to gain access to a stream when loading, in milliseconds.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.RescheduleOnFailedSaveOrReloadInterval">
            <summary>
            If <see cref="M:JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.Reload(JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.ReloadReason)"/> can't get lock for reading the file, reschedulles the next reloading.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.myIsFileEverSeenExisting">
            <summary>
            This flag helps with <see cref="M:JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.Reload_IsWaitingForMissedFile(JetBrains.Util.FileSystemPath,JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.ReloadReason)"/> to only wait for disappeared files (which were ever seen existing). If the file has never been ever seen, it can be overwritten or treated as missing immediately, without the delay.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.FileWhenNoContent">
            <summary>
            Whether the file should be deleted if there're no settings in it (and no unrecognized content we're obliged to keep).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.SaveDiffFlags.ApplyInMemoryDiff">
            <summary>
            Normal behavior. The modifications done to the storage are applied to what we got on disk.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.SaveDiffFlags.OverwriteWithMemoryContent" -->
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.SaveForcedFlags.WriteIfPossible">
            <summary>
            Just some new settings have been written to the storage, and that would be a nice idea to save it to the disk.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.SaveForcedFlags.ForcedWrite">
            <summary>
            We really have to save now. For example, we're exiting and there're dirty changes.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.SavingEmptyContent">
            <summary>
            What to do when we're about to save a settings file that has no content.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.SavingEmptyContent.KeepFile">
            <summary>
            Save a valid empty file.
            After the first save, a file will appear on disk.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.SavingEmptyContent.DeleteFile">
            <summary>
            Delete the file from disk.
            Preferrable for SCC-keeped files (otherwise, empty storages would be created for all solutions/projects).
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:JetBrains.Application.Settings.Storage.SettingsStorageBase" -->
        <member name="M:JetBrains.Application.Settings.Storage.SettingsStorageBase.#ctor(JetBrains.DataFlow.Lifetime,System.String,JetBrains.Util.ILogger)">
            <summary>
            
            </summary>
            <param name="lifetime">Limiting lifetime for the storage objects.</param>
            <param name="name">Diagnostics name of this storage.</param>
            <param name="logger"></param>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.SettingsStorageBase.myDiffToStream">
            <summary>
            <para><see cref="F:JetBrains.Application.Settings.Storage.SettingsStorageBase.myEntriesInStream"/> diff: what should be applied to the settings storage on save to ensure merging of the conflicts.</para>
            <para>Protected with <see cref="F:JetBrains.Application.Settings.Storage.SettingsStorageBase.myLockDiffToStream"/>.</para>
            <para>Set to <c>Null</c> when empty to enabled lock-free checks for the “no-dirty” state.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.SettingsStorageBase.myEntriesInStream">
            <summary>
            <para>The settings storage entries, as read from the persistent storage.</para>
            <para>Maps keys to values.</para>
            <para>In-memory changes are stored in <see cref="F:JetBrains.Application.Settings.Storage.SettingsStorageBase.myDiffToStream"/> until persisted to the storage.</para>
            <para>Protected with the <see cref="F:JetBrains.Application.Settings.Storage.SettingsStorageBase.myLockEntriesInStream"/>.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.SettingsStorageBase.CommitDiffToStream(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Commits the diffs dictionary to the main dictionary, respecting recorded adds and removes.</para>
            <para>Normally is non-throwing.</para>
            </summary>
            <param name="main">Main dictionary. Will be overwritten by commit with changes from <paramref name="diff"/>.</param>
            <param name="diff">Might be <c>Null</c> if there's no diff yet.</param>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.SettingsStorageBase.myLockSerialization">
            <summary>
            Held while a save or load process is in progress to avoid runnnig one more in parallel.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.SettingsStorageBase.SetBatchWithDiffWriteLocked(System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Collections.Generic.List{System.String})">
            <summary>
            Does a batch-set to the out-of-transaction storage when committing a transaction.
            Writer lock on diff-to-stream must be held by the caller.
            </summary>
            <param name="items">Transaction changes to apply.</param>
            <param name="keysChanged">Keys which were changed by the batch-change must be written here.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "F:JetBrains.Application.Settings.Storage.SettingsStorageBase.TransactionData.InTransactionStorage" -->
        <member name="F:JetBrains.Application.Settings.Storage.SettingsStorageBase.TransactionData.OuterTransactionStorage">
            <summary>
            In case of nested transaction, the nearest outer storage (storage from the parent transaction). Otherwise, <see cref="F:JetBrains.Application.Settings.Storage.SettingsStorageBase.TransactionData.OutOfTransactionStorage"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.SettingsStorageBase.TransactionData.OutOfTransactionStorage">
            <summary>
            The same storage, but outside all transaction. That's the interface which the outer world uses for accessing the storage.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.Persistence.XmlFileSettingsStorage">
            <summary>
            Implements a storage with a disk XML file backend.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.XmlFileSettingsStorage.#ctor(JetBrains.DataFlow.Lifetime,System.String,JetBrains.DataFlow.IProperty{JetBrains.Util.FileSystemPath},JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.SavingEmptyContent,JetBrains.Threading.IThreading,JetBrains.Application.FileSystemTracker.IFileSystemTracker,JetBrains.Application.Settings.Storage.Persistence.FileSettingsStorageBehavior)">
            <summary>
            
            </summary>
            <param name="lifetime"></param>
            <param name="name"></param>
            <param name="path">
            <para>The path to the file, or <c>Null</c> if the file location is not currently available.</para>
            <para>The value is used for reading (<c>Null</c> will cause a clean storage) or writing (<c>Null</c> will skip writing and keep all changes in memory).</para>
            <para>Also the path is watched for changes to reload new content when the file is modified (e.g. from SCC or another instance).</para>
            <para>When you point the path at the new location, it gets overwritten with the current in-memory changes.</para>
            </param>
            <param name="whenNoContent"></param>
            <param name="threading"></param>
            <param name="filetracker"></param>
            <param name="behavior"></param>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.XmlFileSettingsStorage.ReloadFromDiskRequested">
            <summary>
            Requests an async reload of settings from disk in some near future.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.XmlFileSettingsStorage.ReloadFromDiskNow">
            <summary>
            Reloads from disk synchronously.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.XmlFileSettingsStorage.SaveToDiskRequested">
            <summary>
            Requests an async saving of settings to disk in some near future.
            Note that the settings are saved even if there're no in-memory changes (there's no need to request a save with in-memory changes because it will occur automatically).
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.XmlFileSettingsStorage.SaveToDiskNow">
            <summary>
            Saves to disk synchronously.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.XmlFileSettingsStorage.SettingsStorageFileExtension">
            <summary>
            The default extensions for Settings Storage files in XML format.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.Storage.Persistence.XmlFileSettingsStorage.FileWhenNoContent">
            <summary>
            Whether the file should be deleted if there're no settings in it (and no unrecognized content we're obliged to keep).
            </summary>
        </member>
        <member name="T:JetBrains.Application.ApplyCommandLineKeysToLogger">
            <summary>
            Applies the command line arguments to the logger.
            </summary>
        </member>
        <member name="M:JetBrains.Application.OneTimeInitializationChecker.IsInitializationNeeded(System.String,System.Boolean,System.Action{System.Exception},JetBrains.Application.Env.Components.ProductSettingsLocation)">
            <summary>
            Checks if the one-time-init is needed.
            Optionally, marks it as done in the Registry (write-touches Current User hive only).
            </summary>
            <param name="identity">Identity of user</param>
            <param name="bMarkAsDone">Whether to mark one-time-init as performed for this config.</param>
            <param name="failed">Action to execute if check failed, or null</param>
            <returns>Whether one-time-init was required.</returns>
        </member>
        <member name="M:JetBrains.Application.OneTimeInitializationChecker.GetActualIdentity(JetBrains.Application.IApplicationDescriptor)">
            <summary>
            If the per-machine one-time-init value is not available, this value is used instead.
            </summary>
            <param name="applicationDescriptor"></param>
        </member>
        <member name="M:JetBrains.Application.OneTimeInitializationManager.OnCheckFailed(System.Exception)">
            <summary>
            Invoked when one-time-init fails to read/write the Regsitry. Should report to the user in an app-dependent manner.
            </summary>
        </member>
        <member name="P:JetBrains.Application.OneTimeInitializationManager.IsOneTimeInitAllowed">
            <summary>
            Gets whether the one-time-init is allowed to run at the moment, eg the main window has already been created.
            </summary>
        </member>
        <member name="T:JetBrains.Application.PlatformObsoleteStatics">
            <summary>
            Interface which represents root point for environment API.
            Use the <see cref="P:JetBrains.Application.PlatformObsoleteStatics.Instance"/> property to obtain the <i>Shell</i> instance.
            </summary>
        </member>
        <member name="P:JetBrains.Application.PlatformObsoleteStatics.HasInstance">
            <summary>
            Tells whether the <see cref="P:JetBrains.Application.PlatformObsoleteStatics.Instance"/> is available, and the property could be read.
            When <c>False</c>, <see cref="P:JetBrains.Application.PlatformObsoleteStatics.Instance"/> throws an exception.
            </summary>
            <remarks>Notes to inheritors: <see cref="P:JetBrains.Application.PlatformObsoleteStatics.HasInstance"/> and <see cref="P:JetBrains.Application.PlatformObsoleteStatics.Instance"/> must be overridden in sync.</remarks>
        </member>
        <member name="P:JetBrains.Application.PlatformObsoleteStatics.Instance">
            <summary>
            Gets the instance of the Application Shell.
            If not available, throws an exception. Check the <see cref="P:JetBrains.Application.PlatformObsoleteStatics.HasInstance"/> property value to see if <see cref="P:JetBrains.Application.PlatformObsoleteStatics.Instance"/> can be accessed. 
            </summary>
            <remarks>Notes to inheritors: <see cref="P:JetBrains.Application.PlatformObsoleteStatics.HasInstance"/> and <see cref="P:JetBrains.Application.PlatformObsoleteStatics.Instance"/> must be overridden in sync.</remarks>
        </member>
        <member name="P:JetBrains.Application.PlatformObsoleteStatics.Components">
            <summary>
            <para>Provides access to the major application-global components and subsystems.</para>
            <para>As all of the members of this class are <see cref="T:System.Runtime.CompilerServices.ExtensionAttribute">extension methods</see>, use R# Type Completion after dot to see the complete member list.</para>
            </summary>
            <remarks>Note to implementors: typically, you would create a static class called <c>ShellComponentsEx</c> in your own project and place the extension methods into it.</remarks>
        </member>
        <member name="T:JetBrains.Application.AddProductIdentityToLogs">
            <summary>
            On product shell start-stop, exposes the product info in the logs.
            </summary>
        </member>
        <member name="M:JetBrains.Application.AddProductIdentityToLogs.FormatBuildDescription(JetBrains.Application.IApplicationDescriptor,System.Collections.Generic.IEnumerable{JetBrains.Application.AssemblyConfiguration})">
            <summary>
            Gets the plaintext description that identifies the current build.
            </summary>
            <param name="descriptor">Application descriptor. Take from <see cref="!:PlatformObsoleteStatics.Descriptor"/> when <see cref="P:JetBrains.Application.PlatformObsoleteStatics.HasInstance"/>. VS Package bootstrapper or exception reporter might have descriptor available from its own sources. If <c>Null</c>, some of the info will be retrieved from <see cref="T:JetBrains.Application.Defines"/> instead.</param>
            <param name="assemblyconfigurations">Assembly configurations of the currently running Shell. Take from <see cref="!:PlatformObsoleteStatics.AssemblyConfigurations"/> when <see cref="P:JetBrains.Application.PlatformObsoleteStatics.HasInstance"/>. If <c>Null</c>, this information will not be available.</param>
        </member>
        <member name="F:JetBrains.Application.AddProductIdentityToLogs.PropExtendBuildDescription">
            <summary>
            If the <see cref="T:JetBrains.Application.IApplicationDescriptor"/> has this entry in its bag, it will be called to extend the standard <see cref="M:JetBrains.Application.AddProductIdentityToLogs.FormatBuildDescription(JetBrains.Application.IApplicationDescriptor,System.Collections.Generic.IEnumerable{JetBrains.Application.AssemblyConfiguration})"/>.
            </summary>
        </member>
        <member name="T:JetBrains.Application.AssertShellLocksAreGuarded">
            <summary>
            Prevents <see cref="T:JetBrains.Threading.Invocator"/> reentrancy when a lock is taken (temporary).
            Asserts that any primary-thread lock is guarded by <see cref="T:JetBrains.Threading.Invocator"/>.
            </summary>
        </member>
        <member name="T:JetBrains.Application.AdjustSystemTraceListeners">
            <summary>
            Remove default trace listener (with msgboxes on exceptions).
            Add own listener to intercept problems on callstacks where our code (any) is present, and submit to exception reporting.
            </summary>
        </member>
        <member name="T:JetBrains.Application.HostCulture">
            <summary>
            WTF
            </summary>
        </member>
        <member name="P:JetBrains.Application.HostCulture.Culture">
            <summary>
            WTF
            </summary>
        </member>
        <member name="T:JetBrains.Application.ShellComponents">
            <summary>
            The anchor class for various extension methods that expose the app-global components via <see cref="P:JetBrains.Application.PlatformObsoleteStatics.Components"/>. Should not have any class members. All of the members should be added as extension methods, even in this assembly (otherwise, some of them might get less discoverable).
            </summary>
            <remarks>Notes to implementors: use the <see cref="P:JetBrains.Application.ShellComponents.ComponentContainer"/> prop to get the component instead of its own statics, as this is more consistent against the known instance of the component container.</remarks>
        </member>
        <member name="P:JetBrains.Application.ShellComponents.ComponentContainer">
            <summary>
            Gets the <see cref="P:JetBrains.Application.ShellComponents.ComponentContainer"/> instance whose components this object is serving.
            </summary>
        </member>
        <member name="T:JetBrains.Application.ShellComponentsEx">
            <summary>
            <see cref="T:JetBrains.Application.ShellComponents"/> in this assembly.
            </summary>
            <remarks>Excluded: <see cref="T:JetBrains.Application.OneTimeInitializationManager"/>, <see cref="!:OleUndoManagerFactory"/>.</remarks>
        </member>
        <member name="M:JetBrains.Application.ShellComponentsEx.Get``1(JetBrains.Application.ShellComponents)">
            <summary>
            Gets the component whose interface type is <typeparamref name="TInterface"/>.
            Throws if there is no such component. Use <see cref="M:JetBrains.Application.ShellComponentsEx.Has``1(JetBrains.Application.ShellComponents)"/> to check.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ShellComponentsEx.Has``1(JetBrains.Application.ShellComponents)">
            <summary>
            Gets whether a component whose interface type is <typeparamref name="TInterface"/> is available.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.ShellSettingsComponent.GetWorkspaceDocument">
            <summary>
            Tries to load the XML Document for <see cref="F:JetBrains.Application.Configuration.XmlExternalizationScope.UserSettings"/> (either from current version location, or any of the legacy dirs for an upgrade).
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.ShellSettingsComponent.GetUserSettingsDocument_CurrentVersion">
            <summary>
            Looks for just the current version. Also saves initial content and timestamp to check for overwrites.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.ShellSettingsComponent.GetUserSettingsDocument_LegacyVersion">
            <summary>
            Settings from prev versions for upgrade. Initial-content/timestamp not saved in this branch.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.ShellSettingsComponent.GetUserSettingsDocument">
            <summary>
            Tries to load the XML Document for <see cref="F:JetBrains.Application.Configuration.XmlExternalizationScope.UserSettings"/> (either from current version location, or any of the legacy dirs for an upgrade).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Configuration.ShellSettingsComponent.PropGetLegacySettingsFiles">
            <summary>
            A property that <see cref="T:JetBrains.Application.IApplicationDescriptor"/>s could put into their <see cref="P:JetBrains.Application.IApplicationDescriptor.Bag"/>s to look for older-version settings in non-standard folders when there are no up-to-date-version settings found and we would like to upgrade from an older version.
            The strings are file path names.
            The versions are versions of the product to which the settings supposedly belong.
            </summary>
        </member>
        <member name="T:JetBrains.Application.ExecuteOrQueueSingular">
            <summary>
            Wraps <see cref="M:JetBrains.Threading.ReentrancyGuard.ExecuteOrQueue(System.String,System.Action)"/> by executing the same single action. If the execution has been delayed because another execution is in progress (<see cref="M:JetBrains.Threading.ReentrancyGuard.Queue(System.String,System.Action)"/> scenario), does not queue any more executions until the pending one is executed. When the object is disposed of, drops all of the pending executions so that they're never executed after the <see cref="M:System.IDisposable.Dispose"/>.
            Mostly like a <see cref="T:JetBrains.Threading.GroupingEvent"/>, but without any grouping or additional delaying.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ExecuteOrQueueSingular.#ctor(JetBrains.DataFlow.Lifetime,System.String,System.Action,JetBrains.Threading.IThreading)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ExecuteOrQueueSingular.#ctor(JetBrains.DataFlow.Lifetime,System.Action,System.Action{System.Action})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            Allows to specify the execute-or-queue action manually.
            </summary>
            <param name="lifetime"></param>
            <param name="FUserAction">The useful user action to be executed when the guarded context is entered.</param>
            <param name="FExecuteOrQueue">The action that causes something to be executed or queued.</param>
        </member>
        <member name="M:JetBrains.Application.InterruptableReadActivity.Start">
            <summary>
            Override this method with activity that should happen in primary thread before background thread
            </summary>
        </member>
        <member name="M:JetBrains.Application.InterruptableReadActivity.Work">
            <summary>
            Override this method with activity that happens in background thread.
            </summary>
            This method should periodically check return value of <c>interrupt</c> and either return or 
            throw <c>ProcessCancelledException</c>
        </member>
        <member name="M:JetBrains.Application.InterruptableReadActivity.EndWorkerThread">
            <summary>
            This method will always be invoked at the end of worker thread
            </summary>
        </member>
        <member name="M:JetBrains.Application.InterruptableReadActivity.Finish">
            <summary>
            Override this method with activity that will happen in primary thread after worker thread finishesþ
            </summary>
        </member>
        <member name="M:JetBrains.Application.InterruptableReadActivity.OnInterruptSyncWorkerThread">
            <summary>
            This method is invoked immediately when worked detected interruption. It could be invoked in wrong thread. This method is invoked under continous read lock!
            </summary>
        </member>
        <member name="M:JetBrains.Application.InterruptableReadActivity.OnInterrupt">
            <summary>
            This method is invoked in primary thread if work is interrupted. 
            <b>NOTE: read lock is released between interruption and this method call!</b>
            If this method is invoked, <cref>Finish</cref> will NOT be called.
            </summary>
        </member>
        <member name="T:JetBrains.Application.InterruptableReadActivityThe">
            <summary>
            A non-abstract implementation for the <see cref="T:JetBrains.Application.InterruptableReadActivity"/> that allows to specify its behavior externally, without creating an inheritor.
            </summary>
        </member>
        <member name="M:JetBrains.Application.InterruptableReadActivityThe.#ctor(JetBrains.Application.IShellLocks,System.Func{System.Boolean})">
            <summary>
            Constructs the instance.
            </summary>
            <param name="shellLocks"></param>
            <param name="funcIsCancelled">The function that will be checked for cancellation periodically by the <see cref="P:JetBrains.Application.InterruptableReadActivityThe.FuncRun"/> function.</param>
        </member>
        <member name="M:JetBrains.Application.InterruptableReadActivityThe.Finish">
            <summary>
            Override this method with activity that will happen in primary thread after worker thread finishesþ
            </summary>
        </member>
        <member name="M:JetBrains.Application.InterruptableReadActivityThe.OnInterrupt">
            <summary>
            This method is invoked in primary thread if work is interrupted. 
            </summary>
            If this method is invoked, <cref>Finish</cref> will NOT be called.
            
        </member>
        <member name="M:JetBrains.Application.InterruptableReadActivityThe.Start">
            <summary>
            Override this method with activity that should happen in primary thread before background thread
            </summary>
        </member>
        <member name="M:JetBrains.Application.InterruptableReadActivityThe.Work">
            <summary>
            Override this method with activity that happens in background thread.
            </summary>
            This method should periodically check return value of <c>d</c> and either return or 
            throw <c>ProcessCancelledException</c>
        </member>
        <member name="P:JetBrains.Application.InterruptableReadActivityThe.FuncCancelled">
            <summary>
            Gets or sets the function that is executed in case the action is aborted.
            </summary>
        </member>
        <member name="P:JetBrains.Application.InterruptableReadActivityThe.FuncCompleted">
            <summary>
            Gets or sets the function that gets executed on the UI thread in case the action completes successfully.
            </summary>
        </member>
        <member name="P:JetBrains.Application.InterruptableReadActivityThe.FuncCompletedOrCancelled">
            <summary>
            Gets or sets the function that is executed on the UI thread when the action finishes execution with either result.
            </summary>
        </member>
        <member name="P:JetBrains.Application.InterruptableReadActivityThe.FuncRun">
            <summary>
            Gets or sets the worker function that executes on the secondary thread. Its parameter is similar to <c>funcIsCancelled</c> in the <c>.ctor</c>, but includes additional conditions from the implementation. Returns the success flag.
            </summary>
        </member>
        <member name="P:JetBrains.Application.InterruptableReadActivityThe.FuncStart">
            <summary>
            Gets or sets the function that is executed on the primary thread when the action starts.
            </summary>
        </member>
        <member name="P:JetBrains.Application.InterruptableReadActivityThe.Name">
            <summary>
            Gets or sets the name for the operation, and for the worker thread of the operation.
            </summary>
        </member>
        <member name="T:JetBrains.Threading.IThreading">
            <summary>
            Exposes threading tasks of the application.
            </summary>
        </member>
        <member name="P:JetBrains.Threading.IThreading.Dispatcher">
            <summary>
            <para>Gets the <see cref="T:JetBrains.Threading.JetDispatcher"/> of the home thread of this instance.</para>
            <para>If you get <see cref="T:JetBrains.Threading.IThreading">the threading object</see> imported into a component, then this is the primary thread of your component container.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Threading.IThreading.ReentrancyGuard">
            <summary>
            <para>Gets the <see cref="P:JetBrains.Threading.IThreading.ReentrancyGuard"/> of the home thread of this instance.</para>
            <para>If you get <see cref="T:JetBrains.Threading.IThreading">the threading object</see> imported into a component, then this is the primary thread of your component container.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Threading.IThreading.GroupingEvents">
            <summary>
            <para>A host that creates grouping events to be executed on the home thread of this instance (optionally, under protection of the <see cref="P:JetBrains.Threading.IThreading.ReentrancyGuard"/>).</para>
            <para>If you get <see cref="T:JetBrains.Threading.IThreading">the threading object</see> imported into a component, then this is the primary thread of your component container.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Threading.IThreading.TimedActions">
            <summary>
            <para>Schedulles one-time and recurring actions to be executed on the home thread of this instance, optionally under protection of the <see cref="P:JetBrains.Threading.IThreading.ReentrancyGuard"/>.</para>
            <para>If you get <see cref="T:JetBrains.Threading.IThreading">the threading object</see> imported into a component, then this is the primary thread of your component container.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Threading.IThreading.IsRecurringActivityAllowed">
            <summary>
            Gets or sets whether the application is currently active (and background activities are allowed).
            Used to suspend recurring actions execution when inactive.
            </summary>
        </member>
        <member name="P:JetBrains.Threading.IThreading.ThreadManager">
            <summary>
            Gets the scheduller for running background tasks on other threads.
            </summary>
        </member>
        <member name="M:JetBrains.Application.IShellLocks.AcquireReadLock">
             <summary>
             Fetches read lock - the lock which is used to control read-access to ReSharper data (such as PSI, documents, etc.) and 
             is obtained by threads that perform read-operations.
             </summary>    
             <remarks>
             Read lock cannot be acquired when the write lock is acquired by another thread and execution will be blocked until the write lock is released. 
             You do not need to acquire read lock in the UI thread (since write operations cannot be performed in any thread different from the UI thread).
             
             Use <see cref="M:JetBrains.Application.ShellLocks.ReleaseReadLock"/> method to release read lock.
            
             <b>NOTE:</b> the best way to hold read lock for a block of code is to use <see cref="!:ReadLockCookie"></see>
             </remarks>    
             <seealso cref="!:ReadLockCookie"/>
             <seealso cref="M:JetBrains.Application.ShellLocks.ReleaseReadLock"/>
        </member>
        <member name="M:JetBrains.Application.IShellLocks.AcquireWriteLock">
            <summary>
            Fetches write lock - the lock which is used to control write-access to ReSharper data (such as PSI, documents, etc.) and 
            is obtained by threads that perform write-operations.
            </summary>
            <remarks>
            Write lock cannot be acquired when the read lock is acquired by another thread and execution will be blocked until the read lock is released. 
            Acquiring of the write lock is allowed only in the UI thread (and so you cannot perform any write operations from non-UI thread).
            Note that you do not have to obtain the write lock explicitly in most of cases. All low-level write methods (such as PSI or document modifications) 
            obtain write lock automatically. You may need to obtain write lock if your subsystem (similar to PSI or documents) has its own data to be modified in write operations only.
            
            Use <see cref="M:JetBrains.Application.ShellLocks.ReleaseWriteLock"/> method to release write lock.
            
            <b>NOTE:</b> the best way to hold write lock for a block of code is to use <see cref="!:WriteLockCookie"></see>
            </remarks>    
            <seealso cref="!:WriteLockCookie"/>
            <seealso cref="M:JetBrains.Application.ShellLocks.ReleaseWriteLock"/>
        </member>
        <member name="M:JetBrains.Application.IShellLocks.GrantWriteAccess(System.Threading.Thread)">
            <summary>
            Grants write access rights to the specified secondary thread. This function can only be called from the 
            primary UI thread. The typical situation in which it can be useful is when a time-consuming 
            write operation needs to be performed. It is supposed that during this operation the UI thread
            is blocked (by e.g. a modal window). Only one thread can be granted write access at time.
            </summary>
            <seealso cref="M:JetBrains.Application.ShellLocks.RevokeWriteAccess(System.Threading.Thread)"/>
            <param name="thread">Thread to grant write access to</param>
        </member>
        <member name="M:JetBrains.Application.IShellLocks.ReleaseReadLock">
             <summary>
             Releases read lock.
            
             For more information about read lock see <see cref="M:JetBrains.Application.ShellLocks.AcquireReadLock"/>.
             </summary>
             <seealso cref="M:JetBrains.Application.ShellLocks.AcquireReadLock"/>
        </member>
        <member name="M:JetBrains.Application.IShellLocks.ReleaseWriteLock">
             <summary>
             Releases write lock.
            
             For more information about write lock see <see cref="M:JetBrains.Application.ShellLocks.AcquireWriteLock"/>.
             </summary>
             <seealso cref="M:JetBrains.Application.ShellLocks.AcquireWriteLock"/>    
        </member>
        <member name="M:JetBrains.Application.IShellLocks.RevokeWriteAccess(System.Threading.Thread)">
            <summary>
            Revokes write access from the thread that has been granted write access.
            </summary>
            <seealso cref="M:JetBrains.Application.ShellLocks.GrantWriteAccess(System.Threading.Thread)"/>
            <param name="thread">Thread to revoke write access from</param>
        </member>
        <member name="M:JetBrains.Application.IShellLocks.UsingWriteLock">
            <summary>
            Acquires the writer lock, releases when the return value is disposed of. For use with the <c>using</c> construct.
            </summary>
        </member>
        <member name="M:JetBrains.Application.IShellLocks.UsingReadLock">
            <summary>
            Acquires the reader lock, releases when the return value is disposed of. For use with the <c>using</c> construct.
            </summary>
        </member>
        <member name="P:JetBrains.Application.IShellLocks.IsReadAccessAllowed">
            <summary>
            True if read access is allowed in the current thread.
            </summary>
            <seealso cref="M:JetBrains.Application.IShellLocks.AcquireReadLock"/>
            <seealso cref="M:JetBrains.Application.IShellLocksEx.AssertReadAccessAllowed(JetBrains.Application.IShellLocks)"/>
        </member>
        <member name="P:JetBrains.Application.IShellLocks.IsReadLockHeld">
            <summary>
            Indicates that the current thread owns the read lock
            </summary>
        </member>
        <member name="P:JetBrains.Application.IShellLocks.IsWriteAccessAllowed">
            <summary>
            True if write access is allowed in the current thread. 
            </summary>
            <seealso cref="M:JetBrains.Application.IShellLocks.AcquireWriteLock"/>
            <seealso cref="M:JetBrains.Application.IShellLocksEx.AssertWriteAccessAllowed(JetBrains.Application.IShellLocks)"/>
        </member>
        <member name="P:JetBrains.Application.IShellLocks.IsWriteLockHeld">
            <summary>
            Indicates that the current thread owns the write lock
            </summary>
        </member>
        <member name="P:JetBrains.Application.IShellLocks.IsWriteLockRequested">
            <summary>
            Indicates that any thread requests for write lock, but not yet granted
            </summary>
        </member>
        <member name="P:JetBrains.Application.IShellLocks.AfterWriteLockReleased">
            <summary>
            Fires after the Writer Lock is released in any thread. Fires on that same thread.
            </summary>
        </member>
        <member name="E:JetBrains.Application.IShellLocks.AfterReadLockReleased">
            <summary>
            Fires after the Read Lock is released in any thread. Fires on that same thread.
            </summary>
        </member>
        <member name="E:JetBrains.Application.IShellLocks.BeforeAcquiringReadLock">
            <summary>
            Event which is raised before read lock is acquired. 
            </summary>
            <seealso>AcquireReadLock</seealso>
        </member>
        <member name="E:JetBrains.Application.IShellLocks.BeforeAcquiringWriteLock">
            <summary>
            Event which is raised before write lock is acquired. 
            This event can be used by background operations which need to stop/pause to allow write operation to execute.
            </summary>
            <seealso>AcquireWriteLock</seealso>
        </member>
        <member name="T:JetBrains.Application.ShellLocks">
            <summary>
            Groups the locking-related methods in the Shell.
            </summary>
        </member>
        <member name="F:JetBrains.Application.ShellLocks.Debug_LongWait_Threshold">
            <summary>
            The threshold, in milliseconds, for telling long waits. Any wait above this is "long", and is reported.
            </summary>
        </member>
        <member name="F:JetBrains.Application.ShellLocks.myDispatcher">
            <summary>
            Identifies the primary thread (for the Write Lock affinity).
            Attaches to the thread it's created on.
            </summary>
        </member>
        <member name="F:JetBrains.Application.ShellLocks.myRWLock">
            <summary>
            Implementation for the RW locks.
            </summary>
        </member>
        <member name="F:JetBrains.Application.ShellLocks.myThreadWithGrantedWriteAccess">
            <summary>
            Normally, only the primary thread can take Write Lock at any time, and this is <c>Null</c>.
            If non-<c>Null</c>, then this right is temporarily granted to another thread.
            </summary>
        </member>
        <member name="F:JetBrains.Application.ShellLocks.myAfterWriteLockReleased">
            <summary>
            Fires after the Writer Lock is released in any thread. Fires on that same thread.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ShellLocks.AcquireReadLock">
             <summary>
             Fetches read lock - the lock which is used to control read-access to ReSharper data (such as PSI, documents, etc.) and 
             is obtained by threads that perform read-operations.
             </summary>    
             <remarks>
             Read lock cannot be acquired when the write lock is acquired by another thread and execution will be blocked until the write lock is released. 
             You do not need to acquire read lock in the UI thread (since write operations cannot be performed in any thread different from the UI thread).
             
             Use <see cref="M:JetBrains.Application.ShellLocks.ReleaseReadLock"/> method to release read lock.
            
             <b>NOTE:</b> the best way to hold read lock for a block of code is to use <see cref="!:ReadLockCookie"></see>
             </remarks>    
             <seealso cref="!:ReadLockCookie"/>
             <seealso cref="M:JetBrains.Application.ShellLocks.ReleaseReadLock"/>
        </member>
        <member name="M:JetBrains.Application.ShellLocks.AcquireWriteLock">
            <summary>
            Fetches write lock - the lock which is used to control write-access to ReSharper data (such as PSI, documents, etc.) and 
            is obtained by threads that perform write-operations.
            </summary>
            <remarks>
            Write lock cannot be acquired when the read lock is acquired by another thread and execution will be blocked until the read lock is released. 
            Acquiring of the write lock is allowed only in the UI thread (and so you cannot perform any write operations from non-UI thread).
            Note that you do not have to obtain the write lock explicitly in most of cases. All low-level write methods (such as PSI or document modifications) 
            obtain write lock automatically. You may need to obtain write lock if your subsystem (similar to PSI or documents) has its own data to be modified in write operations only.
            
            Use <see cref="M:JetBrains.Application.ShellLocks.ReleaseWriteLock"/> method to release write lock.
            
            <b>NOTE:</b> the best way to hold write lock for a block of code is to use <see cref="!:WriteLockCookie"></see>
            </remarks>    
            <seealso cref="!:WriteLockCookie"/>
            <seealso cref="M:JetBrains.Application.ShellLocks.ReleaseWriteLock"/>
        </member>
        <member name="M:JetBrains.Application.ShellLocks.GrantWriteAccess(System.Threading.Thread)">
            <summary>
            Grants write access rights to the specified secondary thread. This function can only be called from the 
            primary UI thread. The typical situation in which it can be useful is when a time-consuming 
            write operation needs to be performed. It is supposed that during this operation the UI thread
            is blocked (by e.g. a modal window). Only one thread can be granted write access at time.
            </summary>
            <seealso cref="M:JetBrains.Application.ShellLocks.RevokeWriteAccess(System.Threading.Thread)"/>
            <param name="thread">Thread to grant write access to</param>
        </member>
        <member name="M:JetBrains.Application.ShellLocks.ReleaseReadLock">
             <summary>
             Releases read lock.
            
             For more information about read lock see <see cref="M:JetBrains.Application.ShellLocks.AcquireReadLock"/>.
             </summary>
             <seealso cref="M:JetBrains.Application.ShellLocks.AcquireReadLock"/>
        </member>
        <member name="M:JetBrains.Application.ShellLocks.ReleaseWriteLock">
             <summary>
             Releases write lock.
            
             For more information about write lock see <see cref="M:JetBrains.Application.ShellLocks.AcquireWriteLock"/>.
             </summary>
             <seealso cref="M:JetBrains.Application.ShellLocks.AcquireWriteLock"/>    
        </member>
        <member name="M:JetBrains.Application.ShellLocks.RevokeWriteAccess(System.Threading.Thread)">
            <summary>
            Revokes write access from the thread that has been granted write access.
            </summary>
            <seealso cref="M:JetBrains.Application.ShellLocks.GrantWriteAccess(System.Threading.Thread)"/>
            <param name="thread">Thread to revoke write access from</param>
        </member>
        <member name="M:JetBrains.Application.ShellLocks.Debug_LongWait_AfterWaitForReadLock">
            <summary>
            Called after we have completed waiting for the write lock.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ShellLocks.Debug_LongWait_AfterWaitForWriteLock">
            <summary>
            Called after we have completed waiting for the write lock.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ShellLocks.Debug_LongWait_BeforeReleaseReadLock">
            <summary>
            Read lock is about to be released, check if we kept someone waiting for a write lock.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ShellLocks.Debug_LongWait_BeforeReleaseWriteLock">
            <summary>
            Read lock is about to be released, check if we kept someone waiting for a write lock.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ShellLocks.Debug_LongWait_BeforeWaitForReadLock">
            <summary>
            Called before we start waiting for the lock, to enter the long-wait-tracking-mode.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ShellLocks.Debug_LongWait_BeforeWaitForWriteLock">
            <summary>
            Called before we start waiting for the lock, to enter the long-wait-tracking-mode.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ShellLocks.#ctor(JetBrains.Threading.IThreading)">
            <summary>
            Creates shell locks over an existing threading object.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ShellLocks.#ctor(JetBrains.DataFlow.Lifetime)">
            <summary>
            Creates shell locks over an existing threading object.
            </summary>
        </member>
        <member name="P:JetBrains.Application.ShellLocks.IsReadAccessAllowed">
            <summary>
            True if read access is allowed in the current thread.
            </summary>
            <seealso cref="M:JetBrains.Application.ShellLocks.AcquireReadLock"/>    
            <seealso cref="M:JetBrains.Application.IShellLocksEx.AssertReadAccessAllowed(JetBrains.Application.IShellLocks)"/>    
        </member>
        <member name="P:JetBrains.Application.ShellLocks.IsReadLockHeld">
            <summary>
            Indicates that the current thread owns the read lock
            </summary>
        </member>
        <member name="P:JetBrains.Application.ShellLocks.IsWriteAccessAllowed">
            <summary>
            True if write access is allowed in the current thread. 
            </summary>
            <seealso cref="M:JetBrains.Application.ShellLocks.AcquireWriteLock"/>    
            <seealso cref="M:JetBrains.Application.IShellLocksEx.AssertWriteAccessAllowed(JetBrains.Application.IShellLocks)"/>    
        </member>
        <member name="P:JetBrains.Application.ShellLocks.IsWriteLockHeld">
            <summary>
            Indicates that the current thread owns the write lock
            </summary>
        </member>
        <member name="P:JetBrains.Application.ShellLocks.IsWriteLockRequested">
            <summary>
            Indicates that any thread requests for write lock, but not yet granted
            </summary>
        </member>
        <member name="P:JetBrains.Application.ShellLocks.AfterWriteLockReleased">
            <summary>
            Fires after the Writer Lock is released in any thread. Fires on that same thread.
            </summary>
        </member>
        <member name="E:JetBrains.Application.ShellLocks.AfterReadLockReleased">
            <summary>
            Fires after the Read Lock is released in any thread. Fires on that same thread.
            </summary>
        </member>
        <member name="E:JetBrains.Application.ShellLocks.BeforeAcquiringReadLock">
            <summary>
            Event which is raised before read lock is acquired. 
            </summary>
            <seealso>AcquireReadLock</seealso>
        </member>
        <member name="E:JetBrains.Application.ShellLocks.BeforeAcquiringWriteLock">
            <summary>
            Event which is raised before write lock is acquired. 
            This event can be used by background operations which need to stop/pause to allow write operation to execute.
            </summary>
            <seealso>AcquireWriteLock</seealso>
        </member>
        <member name="M:JetBrains.Application.IShellLocksEx.AllowNestedExecutionAndReleaseLocks(JetBrains.Application.IShellLocks,System.String,System.Action)">
            <summary>
            When executed under a reentrancy guard, lifts the guard and releases all of the locks, ie constructs a clean state.
            Must be executed on the primaty thread.
            </summary>
            <param name="thіs"></param>
            <param name="name">Name for the <see cref="P:JetBrains.Threading.Invocator.ReentrancyGuard"/> lifting.</param>
            <param name="F">The action to be executed in the clean state.</param>
        </member>
        <member name="M:JetBrains.Application.IShellLocksEx.ExecuteOrQueueReadLock(JetBrains.Application.IShellLocks,System.String,System.Action)">
            <summary>
            <para>Executes an action on the <see cref="!:JetBrains.Application.myDispatcher">primary thread</see> in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see>.</para>
            <para>If called on a foreign thread, executes the action asynchronously, like <see cref="M:JetBrains.Threading.IThreadingEx.Queue(JetBrains.Threading.IThreading,JetBrains.DataFlow.Lifetime,System.String,System.Action)"/>.</para>
            <para>If called on the guarded thread, checks for reentrancy. If there are no guarded executions on the stack yet, executes the action immediately and synchronously. Otherwise, postpones the action for asynchronous execution, like <see cref="M:JetBrains.Threading.IThreadingEx.Queue(JetBrains.Threading.IThreading,JetBrains.DataFlow.Lifetime,System.String,System.Action)"/> does.</para>
            <para>Takes a read lock.</para>
            </summary>
            <param name="thіs"></param>
            <param name="name">The name for the task.</param>
            <param name="F">The action to execute. Exceptions will be trapped.</param>
            <returns><c>True</c> if executed immediately, <c>False</c> if queued (<see cref="M:JetBrains.Threading.ReentrancyGuard.TryExecute(System.String,System.Action)"/>-compatible behavior).</returns>
        </member>
        <member name="M:JetBrains.Application.IShellLocksEx.ExecuteOrQueueReadLockEx(JetBrains.Application.IShellLocks,System.String,System.Action)">
            <summary>
            <para>Executes an action on the <see cref="!:JetBrains.Application.myDispatcher">primary thread</see> in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see>.</para>
            <para>If called on a foreign thread, executes the action asynchronously, like <see cref="M:JetBrains.Threading.IThreadingEx.Queue(JetBrains.Threading.IThreading,JetBrains.DataFlow.Lifetime,System.String,System.Action)"/>.</para>
            <para>If called on the guarded thread, checks for reentrancy. If there are no guarded executions on the stack yet, executes the action immediately and synchronously. Otherwise, postpones the action for asynchronous execution, like <see cref="M:JetBrains.Threading.IThreadingEx.Queue(JetBrains.Threading.IThreading,JetBrains.DataFlow.Lifetime,System.String,System.Action)"/> does.</para>
            <para>Takes a read lock.</para>
            <para>If Async behavior is prohibited, like in test environment, always executes synchronously.</para>
            </summary>
            <param name="thіs"></param>
            <param name="name">The name for the task.</param>
            <param name="F">The action to execute. Exceptions will be trapped.</param>
            <returns><c>True</c> if executed immediately, <c>False</c> if queued (<see cref="M:JetBrains.Threading.ReentrancyGuard.TryExecute(System.String,System.Action)"/>-compatible behavior).</returns>
        </member>
        <member name="M:JetBrains.Application.IShellLocksEx.ExecuteOrQueueReadLock(JetBrains.Application.IShellLocks,JetBrains.DataFlow.Lifetime,System.String,System.Action)">
            <summary>
            <para>Executes an action on the <see cref="!:JetBrains.Application.myDispatcher">primary thread</see> in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see>.</para>
            <para>If called on a foreign thread, executes the action asynchronously, like <see cref="M:JetBrains.Threading.IThreadingEx.Queue(JetBrains.Threading.IThreading,JetBrains.DataFlow.Lifetime,System.String,System.Action)"/>.</para>
            <para>If called on the guarded thread, checks for reentrancy. If there are no guarded executions on the stack yet, executes the action immediately and synchronously. Otherwise, postpones the action for asynchronous execution, like <see cref="M:JetBrains.Threading.IThreadingEx.Queue(JetBrains.Threading.IThreading,JetBrains.DataFlow.Lifetime,System.String,System.Action)"/> does.</para>
            <para>Takes a read lock.</para>
            </summary>
            <param name="thіs"></param>
            <param name="lifetime"></param>
            <param name="name">The name for the task.</param>
            <param name="F">The action to execute. Exceptions will be trapped.</param>
            <returns><c>True</c> if executed immediately, <c>False</c> if queued (<see cref="M:JetBrains.Threading.ReentrancyGuard.TryExecute(System.String,System.Action)"/>-compatible behavior).</returns>
        </member>
        <member name="M:JetBrains.Application.IShellLocksEx.ExecuteOrQueueReadLockEx(JetBrains.Application.IShellLocks,JetBrains.DataFlow.Lifetime,System.String,System.Action)">
            <summary>
            <para>Executes an action on the <see cref="!:JetBrains.Application.myDispatcher">primary thread</see> in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see>.</para>
            <para>If called on a foreign thread, executes the action asynchronously, like <see cref="M:JetBrains.Threading.IThreadingEx.Queue(JetBrains.Threading.IThreading,JetBrains.DataFlow.Lifetime,System.String,System.Action)"/>.</para>
            <para>If called on the guarded thread, checks for reentrancy. If there are no guarded executions on the stack yet, executes the action immediately and synchronously. Otherwise, postpones the action for asynchronous execution, like <see cref="M:JetBrains.Threading.IThreadingEx.Queue(JetBrains.Threading.IThreading,JetBrains.DataFlow.Lifetime,System.String,System.Action)"/> does.</para>
            <para>Takes a read lock.</para>
            <para>If Async behavior is prohibited, like in test environment, always executes synchronously.</para>
            </summary>
            <param name="thіs"></param>
            <param name="lifetime"></param>
            <param name="name">The name for the task.</param>
            <param name="F">The action to execute. Exceptions will be trapped.</param>
            <returns><c>True</c> if executed immediately, <c>False</c> if queued (<see cref="M:JetBrains.Threading.ReentrancyGuard.TryExecute(System.String,System.Action)"/>-compatible behavior).</returns>
        </member>
        <member name="M:JetBrains.Application.IShellLocksEx.QueueReadLock(JetBrains.Application.IShellLocks,System.String,System.Action)">
            <summary>
            <para>Queues the action to execute asynchronously on the <see cref="!:JetBrains.Application.myDispatcher">primary thread</see> in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see>, as soon as possible. Free-threaded.</para>
            <para>The reentrancy between guarded actions is prevented.</para>
            <para>Takes a read lock.</para>
            </summary>
            <param name="thіs"></param>
            <param name="name">The name for the task.</param>
            <param name="F">The action to execute. Exceptions will be trapped.</param>
        </member>
        <member name="M:JetBrains.Application.IShellLocksEx.QueueReadLock(JetBrains.Application.IShellLocks,JetBrains.DataFlow.Lifetime,System.String,System.Action)">
            <summary>
            <para>Queues the action to execute asynchronously on the <see cref="!:JetBrains.Application.myDispatcher">primary thread</see> in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see>, as soon as possible. Free-threaded.</para>
            <para>The reentrancy between guarded actions is prevented.</para>
            <para>Takes a read lock.</para>
            </summary>
            <param name="thіs"></param>
            <param name="lifetime"></param>
            <param name="name">The name for the task.</param>
            <param name="F">The action to execute. Exceptions will be trapped.</param>
        </member>
        <member name="M:JetBrains.Application.IShellLocksEx.AssertReadAccessAllowed(JetBrains.Application.IShellLocks)">
            <summary>
            Checks whether read lock is acquired and issues an internal assertion if it's not true.
            Useful method to be inserted in data access methods to ensure correct use of locks.
            </summary>
            <param name="thіs"></param>
            <seealso cref="P:JetBrains.Application.ShellLocks.IsReadAccessAllowed"/>    
        </member>
        <member name="M:JetBrains.Application.IShellLocksEx.AssertWriteAccessAllowed(JetBrains.Application.IShellLocks)">
            <summary>
            Checks whether write lock is acquired and issues an internal assertion if it's not true.
            Useful method to be inserted in data modification methods to ensure correct use of locks.
            </summary>
            <param name="thіs"></param>
            <seealso cref="P:JetBrains.Application.ShellLocks.IsWriteAccessAllowed"/>    
        </member>
        <member name="M:JetBrains.Application.TryWriteLockCookie.ReleaseConditionally">
            <summary>
            Can throw ProcessCancelledException
            </summary>
        </member>
        <member name="M:JetBrains.Application.TryWriteLockCookie.ReleaseAndSleep(System.Int32)">
            <summary>
            Can throw ProcessCancelledException
            </summary>
            <param name="millisToSleep"></param>
        </member>
        <member name="F:JetBrains.Util.UnguardedAlarm.ourRequests">
            <summary>
            Maps requests to invocation times
            </summary>
        </member>
        <member name="F:JetBrains.Util.UnguardedAlarm.myRequests">
            <summary>
            List of requests for specific alarm
            </summary>
        </member>
        <member name="F:JetBrains.Util.UnguardedAlarm.ourTimer">
            <summary>
            The alarms timer
            </summary>
        </member>
        <member name="T:JetBrains.Application.ApplicationDescriptorLite">
            <summary>
            Implements most of the <see cref="T:JetBrains.Application.ApplicationDescriptor"/> members and leaves only the most crucial ones for the author.
            Not recommended for use in full-blown products.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ApplicationDescriptorLite.#ctor(System.String,System.Reflection.Assembly,System.String)">
            <summary>
            Inits the descriptor, assigning values to the minimum of the parameters.
            </summary>
            <param name="sProductName">Name for the Shell product.</param>
            <param name="allAssembliesResourceAssembly">The assembly that contains the <paramref name="allAssembliesResourceName"/> AllAssembliesXml data.</param>
            <param name="allAssembliesResourceName">The resource with the AllAssembliesXml assemblies list data.</param>
        </member>
        <member name="P:JetBrains.Application.ApplicationDescriptorLite.AllAssembliesResourceAssembly">
            <summary>
            Gets the assembly that contains the <see cref="P:JetBrains.Application.ApplicationDescriptor.AllAssembliesXml"/> data.
            </summary>
        </member>
        <member name="P:JetBrains.Application.ApplicationDescriptorLite.AllAssembliesResourceName">
            <summary>
            Gets the name of the resource in <see cref="P:JetBrains.Application.IApplicationDescriptor.AllAssembliesResourceAssembly"/> that contains the serialized <see cref="P:JetBrains.Application.IApplicationDescriptor.AllAssembliesXml"/> data.
            </summary>
        </member>
        <member name="P:JetBrains.Application.ApplicationDescriptorLite.BuyURL">
            <summary>
            Gets the URL that takes to the “Buy Product” page.
            </summary>
        </member>
        <member name="P:JetBrains.Application.ApplicationDescriptorLite.DoCheckLicenseReuseOverNetwork">
            <summary>
            Determines whether the product should check for multiple instances running simultaneousely over the network.
            </summary>
        </member>
        <member name="P:JetBrains.Application.ApplicationDescriptorLite.EvaluationURL">
            <summary>
            Gets the URL that takes to the page that provides an eval license.
            </summary>
        </member>
        <member name="P:JetBrains.Application.ApplicationDescriptorLite.LicenseSupport">
            <summary>
            Gets the licensing implementation.
            </summary>
        </member>
        <member name="P:JetBrains.Application.ApplicationDescriptorLite.ProductBirthDate">
            <summary>
            The birth date of the product. Used for the lower copyright year and so on.
            </summary>
        </member>
        <member name="P:JetBrains.Application.ApplicationDescriptorLite.ProductFullName">
            <summary>
            Gets the product full name, which is typically the <see cref="!:IApplicationDescriptor.ProductName"/> plus the short version number.
            </summary>
        </member>
        <member name="P:JetBrains.Application.ApplicationDescriptorLite.ProductIcon">
            <summary>
            Gets the product icon.
            </summary>
        </member>
        <member name="P:JetBrains.Application.ApplicationDescriptorLite.ProductName">
            <summary>
            Gets the bare product name in the shortest form (no company, no version).
            </summary>
        </member>
        <member name="T:JetBrains.Application.AssemblyConfiguration">
            <summary>
            Validates the list of assembly configurations.
            </summary>
        </member>
        <member name="T:JetBrains.Application.KnownValue">
            <summary>
            Describes a single known value form the <see cref="T:JetBrains.Build.AllAssemblies.AllAssembliesXml"/> file.
            The string value of the item is checked to be valid against the predefined values list.
            </summary>
        </member>
        <member name="F:JetBrains.Application.KnownValue.myAllAssembliesXml">
            <summary>
            <see cref="P:JetBrains.Application.KnownValue.AllAssembliesXml"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.KnownValue.myValue">
            <summary>
            <see cref="P:JetBrains.Application.KnownValue.Value"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.KnownValue.#ctor(System.String,JetBrains.Build.AllAssemblies.AllAssembliesXml,System.Boolean)">
            <summary>
            Validates the string value and wraps it into the configuration.
            </summary>
            <param name="value"><see cref="P:JetBrains.Application.KnownValue.Value"/>.</param>
            <param name="allassembliesxml"><see cref="P:JetBrains.Application.KnownValue.AllAssembliesXml"/>.</param>
            <param name="validate">For internal needs. Allows to bypass the slow validation when building a list of configs from a known list.</param>
        </member>
        <member name="M:JetBrains.Application.KnownValue.AssertValidValue(System.String)">
            <summary>
            Checks whether the <paramref name="valuename"/> is indeed known to the all-assemblies-xml file.
            </summary>
        </member>
        <member name="M:JetBrains.Application.KnownValue.GetKnownValuesCollection">
            <summary>
            Gets the collection of the known values, for validation.
            </summary>
        </member>
        <member name="M:JetBrains.Application.KnownValue.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Application.KnownValue.Equals(System.String)">
            <summary>
             Checks whether this value is equal to another value whose string value is passed in as a parameter.
             You should use this method rather than comparing the <see cref="P:JetBrains.Application.KnownValue.Value"/> to a string, because this method would validate the <paramref name="other"/> against the known values list.
            </summary>
            <returns>
            true if the current object is equal to the other parameter; otherwise, false.
            </returns>
            <param name="other">String value to compare with, is validated against the known values list.</param>
        </member>
        <member name="P:JetBrains.Application.KnownValue.UniversalValue">
            <summary>
            Gets the string value of the universal known value.
            </summary>
        </member>
        <member name="P:JetBrains.Application.KnownValue.AllAssembliesXml">
            <summary>
            Gets the <see cref="T:JetBrains.Build.AllAssemblies.AllAssembliesXml"/> file that defines and owns the configuration.
            The configuration validness is checked against the file.
            </summary>
        </member>
        <member name="P:JetBrains.Application.KnownValue.IsUniversal">
            <summary>
            Gets whether this configuration is the Universal configuration, ie includes all of the assemblies regardless of their configurations.
            </summary>
        </member>
        <member name="P:JetBrains.Application.KnownValue.IsUniversalAllowed">
            <summary>
            Gets whether the universal value (string value <see cref="P:JetBrains.Application.KnownValue.UniversalValue"/>) is available on this set of items.
            </summary>
        </member>
        <member name="P:JetBrains.Application.KnownValue.Value">
            <summary>
            Gets the string value of the configuration, as written in the <see cref="T:JetBrains.Build.AllAssemblies.AllAssembliesXml"/> file.
            </summary>
        </member>
        <member name="M:JetBrains.Application.AssemblyConfiguration.GetKnownValuesCollection">
            <summary>
            Gets the collection of the known values, for validation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:JetBrains.Application.AssemblyConfiguration.IsUniversalAllowed">
            <summary>
            Gets whether the universal value (string value <see cref="P:JetBrains.Application.KnownValue.UniversalValue"/>) is available on this set of items.
            </summary>
        </member>
        <member name="T:JetBrains.Application.ApplicationDescriptorAttribute">
            <summary>
            Defines a product by the means of the type that should be instantiated so that to serve as its <see cref="T:JetBrains.Application.IApplicationDescriptor"/>.
            To provide for loading more than one product into the appdomain, the search for attributes is constrained to the startup assembly. In case of a Visual Studio Add-In / Package, the startup assembly is that one containing the Add-In / Package.
            </summary>
        </member>
        <member name="P:JetBrains.Application.ApplicationDescriptorAttribute.ApplicationDescriptorType">
            <summary>
            Gets the class that should be instantiated as the application descriptor, see <see cref="T:JetBrains.Application.IApplicationDescriptor"/>.
            The class must have a public “<c>.ctor()</c>” or “<c>.ctor(<see cref="T:JetBrains.Application.ApplicationDescriptorAttribute"/>)</c>”.
            </summary>
        </member>
        <member name="T:JetBrains.Application.ProductEdition">
            <summary>
            Validates the list of product editions.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ProductEdition.RegistryLoadProductEdition(System.String,JetBrains.Build.AllAssemblies.AllAssembliesXml)">
            <summary>
            Loads the cached product edition from the Registry.
            LicenseSupport knows which one to use, but we do not have License Support until we start up a Shell with some Product Edition, that's why we'd like to cache it from the previous run.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ProductEdition.RegistrySaveProductEdition(System.String)">
            <summary>
            Saves the cached product edition to the Registry.
            LicenseSupport knows which one to use, but we do not have License Support until we start up a Shell with some Product Edition, that's why we'd like to cache it from the previous run.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ProductEdition.GetKnownValuesCollection">
            <summary>
            Gets the collection of the known values, for validation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:JetBrains.Application.ProductEdition.Description">
            <summary>
            Freehand description for the user interface.
            </summary>
        </member>
        <member name="P:JetBrains.Application.ProductEdition.DisplayName">
            <summary>
            A user-friendly name for this edition. Should not include the “Edition” suffix. Used for display in user interfaces.
            </summary>
        </member>
        <member name="P:JetBrains.Application.ProductEdition.IsUniversalAllowed">
            <summary>
            Gets whether the universal value (string value <see cref="P:JetBrains.Application.KnownValue.UniversalValue"/>) is available on this set of items.
            Note that a universal product edition can be encountered in two cases:
            (1) On a product that does not support product editions (<see cref="P:JetBrains.Build.AllAssemblies.AllAssembliesXml.DefaultProductEdition"/> is also Universal in this case), in which case it's the only allowed edition.
            (2) When there's no cached product edition for the installation, in which case you're not allowed to use this value and must change it to <see cref="P:JetBrains.Build.AllAssemblies.AllAssembliesXml.DefaultProductEdition"/> ASAP.
            </summary>
        </member>
        <member name="T:JetBrains.Application.AssemblyManager">
            <summary>
            Controls execution of the assembly-load-time-handlers in various assemblies of the product.
            </summary>
        </member>
        <member name="M:JetBrains.Application.AssemblyManager.LoadAssemblies(System.String,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Creates the descriptors for the already-loaded assemblies (eg plugins') and executes load handlers for 'em.
            </summary>
        </member>
        <member name="T:JetBrains.Application.ChangeEventArgs">
            <summary>
            Represents arguments of change event
            </summary>
        </member>
        <member name="M:JetBrains.Application.ChangeManager.ExecuteAfterChange(System.Action)">
            <summary>
            Executes the specified action after the current change has finished or immediately if there
            is no change currently in progress.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ChangeManager.RegisterChangeProvider(JetBrains.Application.IChangeProvider)">
            <summary>
            Registers change provider in the dispatching scheme.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ChangeManager.UnregisterChangeProvider(JetBrains.Application.IChangeProvider)">
            <summary>
            Unregisters change provider from the dispatching scheme.
            </summary>
            <remarks>Remove all dependencies in which the provider participates</remarks>
        </member>
        <member name="M:JetBrains.Application.ChangeManager.OnProviderChanged(JetBrains.Application.IChangeProvider,System.Object,JetBrains.Application.Progress.ITaskExecutor)">
            <summary>
            Initiates the event dispatching process using the specified provider as a starting point.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ChangeManager.AddDependency(JetBrains.Application.IChangeProvider,JetBrains.Application.IChangeProvider)">
            <summary>
            Adds dependency between two providers.
            </summary>
            <remarks>Both providers must have already been registered</remarks>
        </member>
        <member name="M:JetBrains.Application.ChangeManager.RemoveDependency(JetBrains.Application.IChangeProvider,JetBrains.Application.IChangeProvider)">
            <summary>
            Removes dependency between two providers.
            </summary>
            <remarks>Both providers must have already been registered</remarks>
        </member>
        <member name="M:JetBrains.Application.ChangeManager.Dump(System.IO.TextWriter)">
            <summary>
            Dumps the internal structure into the specified writer.
            </summary>
        </member>
        <member name="F:JetBrains.Application.ChangeManager.Changed2">
            <summary>
            The event about changes in the system.
            Supports lifetimes.
            </summary>
        </member>
        <member name="E:JetBrains.Application.ChangeManager.Changed">
            <summary>
            The event about changes in the system.
            Does not support lifetimes, see for <see cref="F:JetBrains.Application.ChangeManager.Changed2"/>.
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Pattern">
            <summary>
            Defines set of file names that match the specified regular expression
            </summary>
        </member>
        <member name="M:JetBrains.Application.HostCommandLine.#ctor(System.String[])">
            <summary>
            Parsing rules:
            Keyed parameters start with “/” or “-”. Non-keyed parameters don't have this prefix and wholy go to the value.
            The keyed parameter is of the “key=value” or “key:value” form, where value might be omitted with or without the separator.
            <code>( ( '/'|'-' 'key' ['='|':' ['value'] ] ) | ( 'value' ) )*</code> 
            </summary>
        </member>
        <member name="P:JetBrains.Application.HostCommandLine.Keys">
            <summary>
            Array of defined keys: /Key[=Value]
            </summary> 
        </member>
        <member name="P:JetBrains.Application.HostCommandLine.NonKeyedParameters">
            <summary>
            Strings, that does not start with '/'.
            </summary> 
        </member>
        <member name="T:JetBrains.Application.CommandLineSwitchAttribute">
            <summary>
            Defines a command-line switch that will be known to the shell and registered with the hosting app, as needed.
            </summary>
        </member>
        <member name="M:JetBrains.Application.CommandLineSwitchAttribute.#ctor(System.String,System.Int32)">
            <summary>
            Defines a command-line switch that will be known to the shell and registered with the hosting app, as needed.
            </summary>
            <param name="name">The name of the command line switch, without the prefix.</param>
            <param name="parameterscount">The number of parameters of the command line switch.</param>
        </member>
        <member name="P:JetBrains.Application.CommandLineSwitchAttribute.Name">
            <summary>
            Gets the name of the command line switch, without the prefix.
            </summary>
        </member>
        <member name="P:JetBrains.Application.CommandLineSwitchAttribute.ParametersCount">
            <summary>
            Gets the number of parameters of the command line switch.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.AssemblyAttributeInstallerAttribute">
            <summary>
            An attribute to mark the classes that process the installation data written in the form of assembly attributes of type <see cref="P:JetBrains.Application.Install.AssemblyAttributeInstallerAttribute.AttributeToInstall"/> during registration and unregistration.
            Such classes will also be called once to perform their own attribute-independent installation.
            The class must implement the <see cref="T:JetBrains.Application.Install.IAssemblyAttributeInstaller`1"/> interface.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.AssemblyAttributeInstallerAttribute.#ctor(System.Type,JetBrains.Application.Install.InstallerVsVersionAffinity)">
            <summary>
            Creates the attribute.
            </summary>
            <param name="typeAttributeToInstall">Type of the attribute for which the class marked by <see cref="T:JetBrains.Application.Install.AssemblyAttributeInstallerAttribute"/> should be invoked to process the installation.</param>
            <param name="vsversionaffinity">Specifies the affinity of this installer to the VS version, see enum member summaries for details.</param>
        </member>
        <member name="P:JetBrains.Application.Install.AssemblyAttributeInstallerAttribute.AttributeToInstall">
            <summary>
            Gets the type of the attribute for which the class marked by <see cref="T:JetBrains.Application.Install.AssemblyAttributeInstallerAttribute"/> should be invoked to process the installation.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.Installer">
            <summary>
            Invokes installation/uninstallation related services.
            This class should not be made static (and, conscequently, public interface methods on it), so that it were created and disposed accordingly, with its underlying <see cref="T:JetBrains.Metadata.Utils.AssemblyResolver"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.Installer.myMapAssemblyAttributeToInstallers">
            <summary>
            Maps the assembly attributes storing the installation data to the objects that process their registration and unregistration.
            Don't use, see <see cref="P:JetBrains.Application.Install.Installer.MapAssemblyAttributeToInstallers"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.Installer.myMapTypeAttributeToInstallers">
            <summary>
            Maps the type attributes storing the installation data to the objects that process their registration and unregistration.
            Don't use, see <see cref="P:JetBrains.Application.Install.Installer.MapTypeAttributeToInstallers"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.Installer.myStaticInstallers">
            <summary>
            Stores static installers
            Maps the attributes storing the installation data to the objects that process their registration and unregistration.
            Don't use, see <see cref="P:JetBrains.Application.Install.Installer.StaticInstallers"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.Installer.myMapInstallerTypeToInstance">
            <summary>
            Maps the installer types to the created instances of their objects.
            Don't use, see <see cref="P:JetBrains.Application.Install.Installer.MapInstallerTypeToInstance"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.Installer.myApplicationDescriptor">
            <summary>
            The product descriptor that provides the essential data on the product being installed or uninstalled.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.Installer.MetadataLoader">
            <summary>
            Loads metadata without loading the assembly. Needed mostly for looking for the installer attributes, because doing so via reflection would cause looking up the referenced assemblies, which could be missing on the build site (eg VS 10 when building with netfx 3.5).
            Lifetime: Installer.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.Installer.#ctor(JetBrains.DataFlow.Lifetime,System.String,JetBrains.Application.Install.Installer.InstallerBaseFolders)">
            <summary>
            A constructor for spawning the installer on an application descriptor that is defined in an attribute.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.Installer.AssemblyConfigurations">
            <summary>
            Gets the assembly configurations in which the product is running, which defines the set of assemblies from <see cref="T:JetBrains.Build.AllAssemblies.AllAssembliesXml"/> to load.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.Installer.AssemblyConfigurationsString">
            <summary>
            The assembly configurations string value, as passed to the ctor.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.Installer.BeforeInstallationDataHarvestComplete">
            <summary>
            Fired after the <see cref="!:IAssemblyAttributeInstaller"/> handlers are called for the installation data, but before it's handed out to consumers (and stored in the cache).
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.Installer.DumpInstallationData(JetBrains.Application.Install.InstallationData.InstallationData,JetBrains.Util.FileSystemPath)">
            <summary>
            Dupms the given Registry data into a file.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.Installer.ComSelfRegister(JetBrains.Application.Install.RegistrationStage)">
            <summary>
            Self-registers for COM those assemblies that require such registration.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.Installer.GetInstallationData">
            <summary>
            Gets all the Registry data that should be written to or erased from the Registry upon installation or uninstallation.
            This includes the static app-global Registry data and dynamic registration info collected from the Assembly attributes.
            The first call is slow (the installation data is harvested), subsequent calls are fast because the result is cached.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.Installer.CollectInstallers">
            <summary>
            Collects the handlers that implement installation.
            Do not call, use <see cref="P:JetBrains.Application.Install.Installer.MapAssemblyAttributeToInstallers"/>, <see cref="P:JetBrains.Application.Install.Installer.MapTypeAttributeToInstallers"/>,  <see cref="P:JetBrains.Application.Install.Installer.StaticInstallers"/>
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.Installer.InvokeAssemblyAttributeInstallers(JetBrains.Application.Install.InstallationData.InstallationData)">
            <summary>
            Invokes the registration handlers for assembly attributes, see <see cref="P:JetBrains.Application.Install.Installer.MapAssemblyAttributeToInstallers"/>, from the assemblies listed in the <c>AllAssemblies.xml</c>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.Installer.InvokeTypeAttributeInstallers(JetBrains.Application.Install.InstallationData.InstallationData)">
            <summary>
            Invokes the registration handlers for type attributes, see <see cref="P:JetBrains.Application.Install.Installer.MapTypeAttributeToInstallers"/>, from the assemblies listed in the <c>AllAssemblies.xml</c>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.Installer.InvokeStaticInstallers(JetBrains.Application.Install.InstallationData.InstallationData)">
            <summary>
            Collects the one-time global registration data from the static installers, one that is not per-attribute or per-assembly.
            Invoked from <see cref="M:JetBrains.Application.Install.Installer.HarvestInstallationData"/>, don't call manually.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.Installer.AssertVersionSpecific">
            <summary>
            Throws if <see cref="P:JetBrains.Application.Install.Installer.IsVsVersionNeutral"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.Installer.LoadMetadataAssembly(JetBrains.Build.AllAssemblies.AssemblyNameXml)">
            <summary>
            Loads the assembly with metadata reader based on the assembly name.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.Installer.ApplicationDescriptor">
            <summary>
            Gets the product descriptor that provides the essential data on the product being installed or uninstalled.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.Installer.IsVsVersionNeutral">
            <summary>
            <para>Gets whether the installer is currently running in the VS-version-neutral mode.</para>
            <para>The installer is conscequently run on the same data for each of VS versions supported, to produce VS-version-specific data for each VS.</para>
            <para>Also it's run once in VS-version-neutral mode to collect the shared things (and avoid collecting them more than once, if included in version-specific runs).</para>
            <para>When <c>False</c>, you can use the <see cref="P:JetBrains.Application.Install.Installer.VsVersion"/>, <see cref="P:JetBrains.Application.Install.Installer.VsRootSuffix"/>, and <see cref="P:JetBrains.Application.Install.Installer.VsHive"/> attributes to learn the version. When <c>True</c>, the abovementioned properties cannot be access, and will throw.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.Installer.MapInstallerTypeToInstance">
            <summary>
            Maps the attribute-installer types to the created instances of their objects.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.Installer.SourceFoldersResolver">
            <summary>
            Can locate files and folders with files on the source system to be deployed to the target system.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.Installer.VsHive">
            <summary>
            Gets the VS Hive that is the VS Version + VS RootSuffix.
            Examples: “8.0”, “8.0ReSharper”.
            The installation data is bound to a specific hive.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.Installer.VsRootSuffix">
            <summary>
            Gets the VS Root Suffix, eg the main one (an empty string) or the experimental one (eg “ReSharper”).
            The installation data is bound to a specific hive.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.Installer.VsVersion">
            <summary>
            Gets the version of the Visual Studio. Example: “8.0”.
            If the installer is running in the VS-version-neutral mode, throws an exception.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.Installer.MapAssemblyAttributeToInstallers">
            <summary>
            Maps the assembly attributes storing the installation data to the objects that process their registration and unregistration.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.Installer.StaticInstallers">
            <summary>
            Maps the assembly attributes storing the installation data to the objects that process their registration and unregistration.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.Installer.MapTypeAttributeToInstallers">
            <summary>
            Maps the type attributes storing the installation data to the objects that process their registration and unregistration.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.Installer.PartsCatalogue">
            <summary>
            Gets the cached parts catalog which represents the assemblies in the installer configuration.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.Installer.IInvokeAttributeInstaller">
            <summary>
            Helps with invoking generic interface in a nongeneric context.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.Installer.InvokeAttributeInstaller`1">
            <summary>
            Helps with invoking generic interface in a nongeneric context.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.Installer.InstallerSourceFoldersResolver">
            <summary>
            Can locate files and folders with files on the source system to be deployed to the target system.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.Installer.InstallerSourceFoldersResolver.GetProductHomeDir">
            <summary>
            Throws if <see cref="F:JetBrains.Application.Install.Installer.InstallerBaseFolders.ProductHomeDir"/> was <c>Null</c>.
            NOTE: must not be made public! Internal use only! Expose semantic methods for any other folders which might be needed.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.Installer.InstallerSourceFoldersResolver.GetProductBinariesDir">
            <summary>
            Gets the build target folder within the current build process.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.Install.Installer.InstallerSourceFoldersResolver.GetSubplatformReferencesDir(JetBrains.Build.AllAssemblies.AllAssembliesXml.Subplatform)">
            <summary>
            Gets the references folder of the specific subplatform.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.Installer.InstallerSourceFoldersResolver.GetSubplatformReferencesDir(System.String)">
            <summary>
            Gets the references folder of the specific subplatform.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.Installer.InstallerSourceFoldersResolver.GetProductReferencesDir">
            <summary>
            Gets the references dir which is global to the product and does not belong to any module.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.Install.Installer.InstallerSourceFoldersResolver.FindFilesInReferencesDirectories(System.String,JetBrains.Build.AllAssemblies.AllAssembliesXml.Subplatform)">
            <summary>
            <para>Looks for requested files in the references folders.</para>
            <para>Considers references folder of the product, of the specified subplatform, and all of the subplatforms it depends on. If <paramref name="subplatform"/> is <c>Null</c>, only the product references directory is considered.</para>
            <para>It is an error if no files match the pattern, or there're matching files in more than one references directory throughout the involved product.</para>
            </summary>
            <param name="mask">A relative path to the file. Might have a mask in place of the file name.</param>
            <param name="subplatform">Subplatform, to look up in its context. <c>Null</c> to look in product only.</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.Install.Installer.InstallerSourceFoldersResolver.GetMaskDirAndName(System.String,JetBrains.Util.FileSystemPath@,System.String@)">
            <summary>
            Splits relative path of the mask into a folder path and a file name mask.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.Installer.InstallerSourceFoldersResolver.FindFilesInProductBinariesDir(System.String)">
            <summary>
            Gets the matching files under the product binaries directory.
            </summary>
            <param name="mask">A relative path to the file. Might have a mask in place of the file name.</param>
        </member>
        <member name="M:JetBrains.Application.Install.Installer.InstallerSourceFoldersResolver.FindFilesUnderRoot(JetBrains.Application.Install.InstallationData.InstallationSourceDirRoot2,System.String,JetBrains.Metadata.Utils.AssemblyNameInfo)">
            <summary>
            <para>Invokes either <see cref="M:JetBrains.Application.Install.Installer.InstallerSourceFoldersResolver.FindFilesInProductBinariesDir(System.String)"/> or <see cref="M:JetBrains.Application.Install.Installer.InstallerSourceFoldersResolver.FindFilesInReferencesDirectories(System.String,JetBrains.Build.AllAssemblies.AllAssembliesXml.Subplatform)"/>, depending on <see cref="!:root"/>. Read their documentation for details.</para>
            <para>The <paramref name="assembly"/> is used to look up its owning subplatform.</para>
            </summary>
            <param name="root">Lookup root choice.</param>
            <param name="mask">A relative path to the file. Might have a mask in place of the file name.</param>
            <param name="assembly">Defines the subplatform for references directory lookup. Ignored on product binaries directory lookup.</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.Install.Installer.InstallerSourceFoldersResolver.GetRootDirectory(JetBrains.Application.Install.InstallationData.InstallationSourceDirRoot2,JetBrains.Metadata.Utils.AssemblyNameInfo)">
            <summary>
            <para>Invokes either <see cref="M:JetBrains.Application.Install.Installer.InstallerSourceFoldersResolver.GetProductBinariesDir"/> or <see cref="M:JetBrains.Application.Install.Installer.InstallerSourceFoldersResolver.GetSubplatformReferencesDir(JetBrains.Build.AllAssemblies.AllAssembliesXml.Subplatform)"/>, depending on <see cref="!:root"/>. Read their documentation for details.</para>
            <para>The <paramref name="assembly"/> is used to look up its owning subplatform. If <paramref name="root"/> is <see cref="F:JetBrains.Application.Install.InstallationData.InstallationSourceDirRoot2.ReferencesDirectories"/> and <paramref name="assembly"/> is <c>Null</c>, throws an exception.</para>
            </summary>
            <param name="root">Lookup root choice.</param>
            <param name="assembly">Defines the subplatform for references directory lookup. Ignored on product binaries directory lookup.</param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.Application.Install.Installer.InstallerBaseFolders">
            <summary>
            Initializes the installer to enable its capability to resolve source folders with files to be deployed.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.Installer.InstallerBaseFolders.ProductHomeDir">
            <summary>
            Home directory of the product. Required for most of the operation modes.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.Installer.InstallerBaseFolders.ProductBinariesDir">
            <summary>
            Product DLLs location.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.InstallerApplicationDescriptor.myDescriptorInstalledProduct">
            <summary>
            Descriptor of the product we're installing.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.RegistrationStage">
            <summary>
            Defines the exact stage of the registration process of which the handler is being queried.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.RegistrationStage.Register">
            <summary>
            The assembly is being registered.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.RegistrationStage.Unregister">
            <summary>
            The assembly is being unregistered.
            </summary>
        </member>
        <member name="P:JetBrains.Application.License.LicenseChecker.IsChecksumOK">
            does stored checksum corresponds to the username's one?
            checksum occupies 16 bits
        </member>
        <member name="P:JetBrains.Application.License.LicenseChecker.Version">
            gets OmniaMea version stored in the license code
            occupies 16 bits
        </member>
        <member name="P:JetBrains.Application.License.LicenseChecker.Type">
            gets type of the license stored in the license code
            occupies 8 bits
        </member>
        <member name="P:JetBrains.Application.License.LicenseChecker.GenerationDate">
            gets license generation date stored in the license code
            occupies 16 bits
        </member>
        <member name="P:JetBrains.Application.License.LicenseChecker.ExpirationDate">
            gets license expiration date stored in the license code
            occupies 16 bits
        </member>
        <member name="P:JetBrains.Application.License.LicenseChecker.SubscriptionEndDate">
            gets license subscription end date stored in the license code
            occupies 16 bits
        </member>
        <member name="M:JetBrains.Application.Progress.CommandLineProgressIndicator.Render">
            <summary>
              Renders current state of Console progress
            </summary>
        </member>
        <member name="T:JetBrains.Application.Progress.CommandLineTaskExecutor">
            <summary>
            Task executor for progress in console
            </summary>
        </member>
        <member name="T:JetBrains.Application.Progress.ITaskExecutor">
            <summary>
            Can execute a task.
            </summary>
            <remarks>
            This object is stateless, and thus not disposable.
            Execution of each of the tasks is an action in itself, with its own disposable scope.
            </remarks>
        </member>
        <member name="M:JetBrains.Application.Progress.ITaskExecutor.ExecuteTask(System.String,JetBrains.Application.Progress.TaskCancelable,System.Action{JetBrains.Application.Progress.IProgressIndicator})">
            <summary>
            Executes the task without exiting the method until the task is completed.
            </summary>
            <param name="name">
            <para>Task title, short form.</para>
            <para>This is used for the progress window title by the UI progress indicators.</para>
            <para>The long form of the task caption should go to the <see cref="P:JetBrains.Application.Progress.IProgressIndicator.TaskName"/> of the <paramref name="task"/>'s <see cref="T:JetBrains.Application.Progress.IProgressIndicator"/>.</para>
            <para>Prepended with the product name automatically. Might be empty, in which case the product name will be used.</para>
            </param>
            <param name="task">The task to execute.</param>
            <param name="cancelable">
            <para>Whether the task could be canceled by the user, if the task progress indication provided by <see cref="T:JetBrains.Application.Progress.ITaskExecutor"/> supports canceling.</para>
            <para>The <see cref="T:JetBrains.Application.Progress.ProcessCancelledException"/> pattern is supported, which means that an <see cref="T:JetBrains.Application.InterruptableActivityCookie"/> is plugged on the task thread to throw a <see cref="T:JetBrains.Application.Progress.ProcessCancelledException"/> when called for a check with a <see cref="P:JetBrains.Application.Progress.IProgressIndicatorModel.IsCanceled"/> <c>False</c>; such an exception is called by the task executor and converted into a <c>False</c> return value.</para>
            </param>
            <returns>Whether the task has completed execution (i.e. was not canceled). Note that even a <see cref="F:JetBrains.Application.Progress.TaskCancelable.No"/> task could be canceled by setting <see cref="P:JetBrains.Application.Progress.IProgressIndicatorModel.IsCanceled"/> to <c>False</c> or throwing a <see cref="T:JetBrains.Application.Progress.ProcessCancelledException"/> or letting some other exception out of the <paramref name="task">task function</paramref>.</returns>
            <remarks>If you would like to return any values from the <paramref name="task"/>, assign them to local variables within the closure.</remarks>
        </member>
        <member name="T:JetBrains.Build.AllAssemblies.AllAssembliesXml">
            <remarks/>
        </member>
        <member name="F:JetBrains.Build.AllAssemblies.AllAssembliesXml.myAssemblyConfigurationAliases">
            <summary>
            Lists the assembly configuration aliases. Maps them to the the expression defined by the alias.
            </summary>
        </member>
        <member name="F:JetBrains.Build.AllAssemblies.AllAssembliesXml.myHashProductEditionAssemblyConfigurations">
            <summary>
            All assembly configurations that could be attributed to product editions. Lazy-filled by <see cref="M:JetBrains.Build.AllAssemblies.AllAssembliesXml.LoadCore_CacheProductEditions"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Build.AllAssemblies.AllAssembliesXml.myKnownAssemblyConfigurations">
            <summary>
            Lists the assembly configurations from <see cref="P:JetBrains.Build.AllAssemblies.AllAssembliesXml.KnownConfigurations"/>. Maps to usage data (<c>True</c> means there's at least one assembly using this config).
            </summary>
        </member>
        <member name="F:JetBrains.Build.AllAssemblies.AllAssembliesXml.myMapAssemblyConfigurationsToProductEdition">
            <summary>
            Mapping for product edition translations, lazy-filled by <see cref="M:JetBrains.Build.AllAssemblies.AllAssembliesXml.LoadCore_CacheProductEditions"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Build.AllAssemblies.AllAssembliesXml.myMapProductAssemblies">
            <summary>
            Allows to learn quickly if the assembly is a product assembly or not.
            </summary>
        </member>
        <member name="F:JetBrains.Build.AllAssemblies.AllAssembliesXml.myMapProductEditionToAssemblyConfigurations">
            <summary>
            Mapping for product edition translations, lazy-filled by <see cref="M:JetBrains.Build.AllAssemblies.AllAssembliesXml.LoadCore_CacheProductEditions"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Build.AllAssemblies.AllAssembliesXml.Load(System.IO.Stream)">
            <summary>
            Loads and validates the All Assemblies schema.
            </summary>
        </member>
        <member name="M:JetBrains.Build.AllAssemblies.AllAssembliesXml.ExecuteConfigurationExpression(System.String,System.Collections.Generic.JetHashSet{System.String})">
            <summary>
            Executes the configurations logical expression from <paramref name="expression"/> that could contain configuration names, aliases, and logical operations. <paramref name="activeconfigs"/> gives the list of configurations that are considered active.
            </summary>
        </member>
        <member name="M:JetBrains.Build.AllAssemblies.AllAssembliesXml.GetOrphanedConfigs">
            <summary>
            Gets the list of known configurations that were defined but are not used by any of the assembiles or aliases.
            </summary>
        </member>
        <member name="M:JetBrains.Build.AllAssemblies.AllAssembliesXml.ParseAssemblyConfiguration(System.String)">
            <summary>
            Parses the string value of the assembly configuration and creates the configuration object.
            Validates the value against the known configurations list.
            </summary>
        </member>
        <member name="M:JetBrains.Build.AllAssemblies.AllAssembliesXml.ParseProductEdition(System.String)">
            <summary>
            Parses the string value of the product edition and creates the edition object.
            Note that this value should be the <see cref="P:JetBrains.Application.KnownValue.Value"/> not <see cref="P:JetBrains.Application.ProductEdition.DisplayName"/>.
            Validates the value against the known configurations list.
            </summary>
        </member>
        <member name="M:JetBrains.Build.AllAssemblies.AllAssembliesXml.ProductEditionFromAssemblyConfigurations(System.Collections.Generic.ICollection{JetBrains.Application.AssemblyConfiguration},System.Boolean,System.Action{System.Exception})">
            <summary>
            <para>A product edition has two representations: (1) a <see cref="T:JetBrains.Application.ProductEdition"/> that's basically a string identifier that is used for the license information and user display, and (2) a set of assembly configurations that comprise the given edition.</para>
            <para>This function converts between these representations.</para>
            </summary>
            <param name="assemblyconfigurations">The list of assembly configurations to be parsed as a product edition.</param>
            <param name="bAllowOtherConfigurations">Whether other assembly configurations not controlled by the product edition are allowed in the collection. This is the case when the configuration of a running Shell is passed in, because it also might include public/internal, VS version and other configurations.</param>
            <param name="FOnError">Called when an error is encountered. Throw the exception to have a never-returning-Null function, or pass in <see cref="M:JetBrains.Util.Logger.LogException(System.Exception)"/> to handle failures softly.</param>
            <returns>Product edition on success, a <see cref="P:JetBrains.Application.KnownValue.UniversalValue"/> in case of a failure or for a product that does not support product editions.</returns>
        </member>
        <member name="M:JetBrains.Build.AllAssemblies.AllAssembliesXml.ProductEditionToAssemblyConfigurations(JetBrains.Application.ProductEdition,JetBrains.Util.OnError)">
            <summary>
            <para>A product edition has two representations: (1) a <see cref="T:JetBrains.Application.ProductEdition"/> that's basically a string identifier that is used for the license information and user display, and (2) a set of assembly configurations that comprise the given edition.</para>
            <para>This function converts between these representations.</para>
            </summary>
            <param name="productedition">Product edition ID. <see cref="P:JetBrains.Application.KnownValue.UniversalValue"/> is only allowed if the product has no product editions, in which case it's the only allowed value.</param>
            <param name="onerror">Called when an error is encountered. Throw the exception to have a never-returning-Null function, or pass in <see cref="M:JetBrains.Util.Logger.LogException(System.Exception)"/> to handle failures softly.</param>
            <returns>Product edition assembly configurations on success, an empty collection in case of a failure or for a product that does not support product editions.</returns>
        </member>
        <member name="M:JetBrains.Build.AllAssemblies.AllAssembliesXml.ResolveConfigurations(System.String)">
            <summary>
            Resolves a space-separated list of assembly configurations or configuration aliases into the list of actual configurations.
            </summary>
        </member>
        <member name="M:JetBrains.Build.AllAssemblies.AllAssembliesXml.TryGetProductAssembly(System.String)">
            <summary>
            Allows to quickly check if an assembly is a product assembly or not.
            </summary>
            <param name="name">Assembly name.</param>
            <returns>Product assembly descriptor, if found.</returns>
        </member>
        <member name="M:JetBrains.Build.AllAssemblies.AllAssembliesXml.GetProductAssembly(System.String)">
            <summary>
            Looks up a product assembly by its name.
            </summary>
            <param name="name">Assembly name.</param>
            <returns>Product assembly descriptor, if found.</returns>
        </member>
        <member name="M:JetBrains.Build.AllAssemblies.AllAssembliesXml.EnumAllPossibleAssemblies">
            <summary>
            Enums all the assemblies in the list (not only product assemblies, but also product/platform/gac refs).
            </summary>
        </member>
        <member name="M:JetBrains.Build.AllAssemblies.AllAssembliesXml.LoadCore_CacheProductEditions">
            <summary>
            Uses <see cref="P:JetBrains.Build.AllAssemblies.AllAssembliesXml.ProductEditions"/> to fill the caching structures like <see cref="F:JetBrains.Build.AllAssemblies.AllAssembliesXml.myMapProductEditionToAssemblyConfigurations"/>, <see cref="F:JetBrains.Build.AllAssemblies.AllAssembliesXml.myHashProductEditionAssemblyConfigurations"/>, <see cref="F:JetBrains.Build.AllAssemblies.AllAssembliesXml.myMapAssemblyConfigurationsToProductEdition"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Build.AllAssemblies.AllAssembliesXml.LoadCore_ResolveAssemblyConfigs">
            <summary>
            (1) Calls resolve on config string of all the configurable assemblies.
            (2) Maintains the list of unused configs.
            </summary>
        </member>
        <member name="M:JetBrains.Build.AllAssemblies.AllAssembliesXml.ResolveConfigurationsCore(System.String,System.Boolean)">
            <summary>
            Impl for <see cref="M:JetBrains.Build.AllAssemblies.AllAssembliesXml.ResolveConfigurations(System.String)"/>.
            </summary>
        </member>
        <member name="P:JetBrains.Build.AllAssemblies.AllAssembliesXml.KnownConfigurations">
            <remarks/>
        </member>
        <member name="P:JetBrains.Build.AllAssemblies.AllAssembliesXml.ConfigurationAliases">
            <remarks/>
        </member>
        <member name="P:JetBrains.Build.AllAssemblies.AllAssembliesXml.ProductEditions">
            <remarks/>
        </member>
        <member name="P:JetBrains.Build.AllAssemblies.AllAssembliesXml.Assemblies">
            <remarks/>
        </member>
        <member name="P:JetBrains.Build.AllAssemblies.AllAssembliesXml.PlatformReferences">
            <remarks/>
        </member>
        <member name="P:JetBrains.Build.AllAssemblies.AllAssembliesXml.ProductReferences">
            <remarks/>
        </member>
        <member name="P:JetBrains.Build.AllAssemblies.AllAssembliesXml.GacReferences">
            <remarks/>
        </member>
        <member name="P:JetBrains.Build.AllAssemblies.AllAssembliesXml.Product">
            <remarks/>
        </member>
        <member name="P:JetBrains.Build.AllAssemblies.AllAssembliesXml.AllAssembliesXmlSchema">
            <summary>
            Gets the XSD for the AllAssemblies.xml.
            </summary>
        </member>
        <member name="P:JetBrains.Build.AllAssemblies.AllAssembliesXml.DefaultProductEdition">
            <summary>
            Gets the default product edition.
            For a product that does not support editions, returns a <see cref="P:JetBrains.Application.KnownValue.UniversalValue"/> value.
            </summary>
        </member>
        <member name="T:JetBrains.Build.AllAssemblies.KnownValueXml">
            <remarks/>
        </member>
        <member name="P:JetBrains.Build.AllAssemblies.KnownValueXml.Name">
            <remarks/>
        </member>
        <member name="P:JetBrains.Build.AllAssemblies.KnownValueXml.Description">
            <remarks/>
        </member>
        <member name="T:JetBrains.Build.AllAssemblies.ReferencesXml">
            <remarks/>
        </member>
        <member name="P:JetBrains.Build.AllAssemblies.ReferencesXml.Reference">
            <remarks/>
        </member>
        <member name="T:JetBrains.Build.AllAssemblies.ReferenceAssemblyXml">
            <remarks/>
        </member>
        <member name="T:JetBrains.Build.AllAssemblies.InstalledAssemblyXml">
            <remarks/>
        </member>
        <member name="T:JetBrains.Build.AllAssemblies.AssemblyXml">
            <remarks/>
        </member>
        <member name="T:JetBrains.Build.AllAssemblies.ConfiguredAssemblyXml">
            <remarks/>
        </member>
        <member name="T:JetBrains.Build.AllAssemblies.AssemblyNameXml">
            <remarks/>
        </member>
        <member name="P:JetBrains.Build.AllAssemblies.AssemblyNameXml.Name">
            <remarks/>
        </member>
        <member name="P:JetBrains.Build.AllAssemblies.ConfiguredAssemblyXml.Configurations">
            <remarks/>
        </member>
        <member name="P:JetBrains.Build.AllAssemblies.AssemblyXml.ComSelfRegister">
            <remarks/>
        </member>
        <member name="P:JetBrains.Build.AllAssemblies.AssemblyXml.HasAppConfig">
            <remarks/>
        </member>
        <member name="P:JetBrains.Build.AllAssemblies.AssemblyXml.HasMainfest">
            <remarks/>
        </member>
        <member name="P:JetBrains.Build.AllAssemblies.AssemblyXml.HasXmlSerializers">
            <remarks/>
        </member>
        <member name="P:JetBrains.Build.AllAssemblies.AssemblyXml.HasXmlDoc">
            <remarks/>
        </member>
        <member name="P:JetBrains.Build.AllAssemblies.AssemblyXml.HasProgramDatabase">
            <remarks/>
        </member>
        <member name="P:JetBrains.Build.AllAssemblies.InstalledAssemblyXml.MsiComponentGuid">
            <remarks/>
        </member>
        <member name="T:JetBrains.Build.AllAssemblies.GacAssemblyXml">
            <remarks/>
        </member>
        <member name="T:JetBrains.Build.AllAssemblies.ProductAssemblyXml">
            <remarks/>
        </member>
        <member name="P:JetBrains.Build.AllAssemblies.ProductAssemblyXml.ExcludedType">
            <remarks/>
        </member>
        <member name="P:JetBrains.Build.AllAssemblies.ProductAssemblyXml.IsMEF">
            <remarks/>
        </member>
        <member name="P:JetBrains.Build.AllAssemblies.ProductAssemblyXml.Subplatform">
            <remarks/>
        </member>
        <member name="T:JetBrains.Build.AllAssemblies.ExcludedTypeXml">
            <remarks/>
        </member>
        <member name="P:JetBrains.Build.AllAssemblies.ExcludedTypeXml.Name">
            <remarks/>
        </member>
        <member name="T:JetBrains.Build.AllAssemblies.PlatformReferencesXml">
            <remarks/>
        </member>
        <member name="P:JetBrains.Build.AllAssemblies.PlatformReferencesXml.PlatformName">
            <remarks/>
        </member>
        <member name="T:JetBrains.Build.AllAssemblies.ConfigurationAliasXml">
            <remarks/>
        </member>
        <member name="P:JetBrains.Build.AllAssemblies.ConfigurationAliasXml.Name">
            <remarks/>
        </member>
        <member name="P:JetBrains.Build.AllAssemblies.ConfigurationAliasXml.Configurations">
            <remarks/>
        </member>
        <member name="T:JetBrains.Build.AllAssemblies.AssemblyConfigurationRefXml">
            <remarks/>
        </member>
        <member name="P:JetBrains.Build.AllAssemblies.AssemblyConfigurationRefXml.Name">
            <remarks/>
        </member>
        <member name="T:JetBrains.Build.AllAssemblies.ProductEditionXml">
            <remarks/>
        </member>
        <member name="P:JetBrains.Build.AllAssemblies.ProductEditionXml.AssemblyConfigurationRef">
            <remarks/>
        </member>
        <member name="P:JetBrains.Build.AllAssemblies.ProductEditionXml.DisplayName">
            <remarks/>
        </member>
        <member name="T:JetBrains.Application.Install.Guids.GuidEntry">
            <summary>
            An entry in the GUID Store.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.Guids.GuidEntry.Guid">
            <summary>
            GUID value of this entry.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.Guids.GuidEntry.IsDefineConstant">
            <summary>
            Whether this GUID is exposed as a #define constant to the involved programming languages (mainly, WiX).
            </summary>
            <remarks>WiX hits the command line length limit if we expose ALL of them, but it actually needs only a few.</remarks>
        </member>
        <member name="P:JetBrains.Application.Install.Guids.GuidEntry.Key">
            <summary>
            Key to this entry. Must be unique throughout the dictionary.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.Guids.GuidEntryKey">
            <summary>
            Key to the GUID in the GUID Store.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.Guids.GuidEntryKey.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Application.Install.Guids.GuidEntryKey.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Application.Install.Guids.GuidEntryKey.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Application.Install.Guids.GuidEntryKey.Equals(JetBrains.Application.Install.Guids.GuidEntryKey)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="P:JetBrains.Application.Install.Guids.GuidEntryKey.Name">
            <summary>
            Gets the name of the key.
            This is the only key identity.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.Guids.GuidEntryKeyConverter">
            <summary>
            Knows how to switch between <see cref="T:JetBrains.Application.Install.Guids.GuidEntryKey"/>s and <see cref="T:System.String"/>s.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.Guids.GuidEntryKeyConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </param><param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from. </param>
        </member>
        <member name="M:JetBrains.Application.Install.Guids.GuidEntryKeyConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </param><param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to. </param>
        </member>
        <member name="M:JetBrains.Application.Install.Guids.GuidEntryKeyConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </param><param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture. </param><param name="value">The <see cref="T:System.Object"/> to convert. </param><exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="M:JetBrains.Application.Install.Guids.GuidEntryKeyConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </param><param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed. </param><param name="value">The <see cref="T:System.Object"/> to convert. </param><param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to. </param><exception cref="T:System.ArgumentNullException">The <paramref name="destinationType"/> parameter is null. </exception><exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="T:JetBrains.Application.Install.Guids.GuidEntryKeys">
            <summary>
            Well-known values for <see cref="T:JetBrains.Application.Install.Guids.GuidEntryKey"/>.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.Guids.GuidStore">
            <summary>
            Represents a store of GUIDs keyed by strings.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.Guids.GuidStore.GetEntry(JetBrains.Application.Install.Guids.GuidEntryKey)">
            <summary>
            Tries to get an entry by its key.
            Throws if missing.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.Guids.GuidStore.TryGetEntry(JetBrains.Application.Install.Guids.GuidEntryKey)">
            <summary>
            Tries to get an entry by its key.
            <c>Null</c>s if missing.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.Guids.GuidStore.TryGetEntryOrPropose(JetBrains.Application.Install.Guids.GuidEntryKey)">
            <summary>
            Tries to get an entry by its key.
            If missing, adds a new entry to the <see cref="P:JetBrains.Application.Install.Guids.GuidStore.ProposedEntries"/> collection, and returns an empty (but still non-<c>Null</c>) GUID.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.Guids.GuidStore.Entries">
            <summary>
            A GUID value with its key.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.Guids.GuidStore.ProposedEntries">
            <summary>
            For GUID values whose keys were missing from the store, new entries are emitted into this collection, so that they could be moved into the main <see cref="P:JetBrains.Application.Install.Guids.GuidStore.Entries"/> collection by the operator.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.InstallationData.InstallationData">
            <summary>
            The root element of the product installation data.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstallationData.MergeWith(JetBrains.Application.Install.InstallationData.InstallationData)">
            <summary>
            Merges the <paramref name="addon"/> installation data into the host's, and destroys the former.
            All of the collections are guaranteed to be non-Null
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstallationData.RemoveDuplicates">
            <summary>
            Checks for duplicate keys and values, removes, if any.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.InstallationData.InstallationData.Folders">
            <summary>
            Gets the list of folders with files to install.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.InstallationData.InstallationData.Registry">
            <summary>
            Gets the installed Registry keys and values.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.InstallationData.InstalledFolder">
            <summary>
            Folders that contain files that should be installed on the target system.
            In MSI, they create <c>Directory</c>s and <c>Component</c>s.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.InstallationData.InstalledFolder.Id">
            <summary>
            An ID for this folder entry, from which the component, folder and file IDs in the installation database are derived.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.InstallationData.InstalledFolder.SourceDir2">
            <summary>
            <para>Absolute path to the directory on the source system.</para>
            <para>Can be <c>Null</c> if the folder only contains shortcuts or target system file text replacements.</para>
            </summary>
            <remarks>In previous versions, this was also given as a source root and source relative path. Originally, installation data could be persisted and reused. In this version it's only used in-memory, so no paths will change (like ProductBinariesDir) and we can expand them explicitly to simplify installation data processing.</remarks>
        </member>
        <member name="P:JetBrains.Application.Install.InstallationData.InstalledFolder.TargetDir">
            <summary>
            Relative path from the <see cref="P:JetBrains.Application.Install.InstallationData.InstalledFolder.TargetRoot">specified root</see> to the directory on the target system.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.InstallationData.InstalledFolder.TargetRoot">
            <summary>
            One of the root folders to locate the file on the target system.
            </summary>
        </member>
        <member name="T:JetBrains.Application.IApplicationDescriptorEx">
            <summary>
            Extensions to <see cref="T:JetBrains.Application.IApplicationDescriptor"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.IApplicationDescriptorEx.GetProductAssembliesXml(JetBrains.Application.IApplicationDescriptor,System.Collections.Generic.IList{JetBrains.Application.AssemblyConfiguration})">
            <summary>
            Gets the list of assemblies defined by the <see cref="P:JetBrains.Application.IApplicationDescriptor.AllAssembliesXml"/> file, filtered down by the active configuration.
            </summary>
        </member>
        <member name="M:JetBrains.Application.IApplicationDescriptorEx.GetVersionStringForAboutBox(JetBrains.Application.IApplicationDescriptor,System.Boolean,System.Collections.Generic.ICollection{JetBrains.Application.AssemblyConfiguration})">
            <summary>
            <para>Gets the version string for the current product, without the company name.</para>
            <para>Examples:</para>
            <code>
            ReSharper 5 Full Edition build 5.0.666.239 on 2009-06-12
            ReSharper 5 build 5.0.666.239 on 2009-06-12
            build 5.0.666.239 on 2009-06-12
            Full Edition build 5.0.666.239 on 2009-06-12
            </code>
            </summary>
            <param name="descriptor">Descriptor.</param>
            <param name="bPrependProductFullName">Whether the string should start with the product name.</param>
            <param name="configsForProductEdition">Optional. If the product is running, passing its configuration allows to show the product edition after the product name.</param>
        </member>
        <member name="M:JetBrains.Application.IApplicationDescriptorEx.CreatePartCatalog(JetBrains.Application.IApplicationDescriptor)">
            <summary>
            Creates a part catalog with parts from all of the product assemblies. No filtering by configurations is applied at this stage.
            </summary>
        </member>
        <member name="M:JetBrains.Application.IApplicationDescriptorEx.CreatePartCatalogForConfiguration(JetBrains.Application.IApplicationDescriptor,System.Collections.Generic.IList{JetBrains.Application.AssemblyConfiguration})">
            <summary>
            Creates a part catalog with parts from all of the product assemblies. No filtering by configurations is applied at this stage.
            </summary>
        </member>
        <member name="M:JetBrains.Application.IApplicationDescriptorEx.CreatePartCatalogFilterForConfiguration(JetBrains.Application.IApplicationDescriptor,System.Collections.Generic.IList{JetBrains.Application.AssemblyConfiguration})">
            <summary>
            Creates a part catalog filter that limits down product parts to those in the given configuration. Non-product assemblies are let thru as is.
            </summary>
        </member>
        <member name="M:JetBrains.Application.IApplicationDescriptorEx.FilterPartCatalogSetByConfiguration(JetBrains.Application.IApplicationDescriptor,JetBrains.DataFlow.Lifetime,JetBrains.Application.Parts.PartsCatalogueSet,System.Collections.Generic.IList{JetBrains.Application.AssemblyConfiguration})">
            <summary>
            Applies product configuration to narrow down the parts set in the catalog set. Live within the lifetime (applies to new catalogs in the set also).
            </summary>
        </member>
        <member name="M:JetBrains.Application.ProductEditionEx.GetCurrentProductEditon(JetBrains.Application.Env.RunsProducts.ProductConfigurations,JetBrains.Application.IApplicationDescriptor)">
            <summary>
            Gets the product edition of the currently running product instance.
            </summary>
            <param name="configurations"></param>
            <param name="product"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.ProductEditionEx.IsEditionIncluded(JetBrains.Application.Env.RunsProducts.ProductConfigurations,JetBrains.Application.ProductEdition,JetBrains.Application.IApplicationDescriptor)">
            <summary>
            Gets whether the current product edition includes the given edition.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ProductEditionEx.IsEditionIncluded(JetBrains.Application.Env.RunsProducts.ProductConfigurations,System.String,JetBrains.Application.IApplicationDescriptor)">
            <summary>
            Gets whether the current product edition includes the given edition.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ProductEditionEx.SupportsEditions(JetBrains.Application.IApplicationDescriptor)">
            <summary>
            Gets whether the current product supports editions.
            If no, only <see cref="P:JetBrains.Application.KnownValue.UniversalValue"/> is valid.
            If yes, <see cref="P:JetBrains.Application.KnownValue.UniversalValue"/> is invalid.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Communication.WebProxySettings">
            <summary>
            Web proxy settings. Use <see cref="T:JetBrains.Application.Communication.WebProxySettingsReader"/> to create a .NET-API-compatible proxy object.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Communication.WebProxySettingsReader">
            <summary>
            Web proxy settings. Use <see cref="T:JetBrains.Application.Communication.WebProxySettingsReader"/> to create a .NET-API-compatible proxy object.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Communication.WebProxySettingsReader.GetProxySettings(JetBrains.Application.DataContext.IDataContext)">
            <summary>
            Gets the .NET-API-compatible proxy settings.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Communication.WebProxySettingsReader.GetProxySettings(JetBrains.Application.Settings.ContextRange)">
            <summary>
            Gets the .NET-API-compatible proxy settings.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Communication.WebProxySettingsReader.GetProxySettings(JetBrains.Application.Settings.IContextBoundSettingsStore)">
            <summary>
            Gets the .NET-API-compatible proxy settings.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.InstallationData.InstallationMacroName">
            <summary>
            An enumeration of possible macro names, is not used directly in the XML files, but instead serves as a reference info or string constants from the code.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.InstallationData.InstallationMacroName.PackageCodeBase">
            <summary>
            Location of the Package assembly.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.InstallationData.InstallationMacroName.SystemDir">
            <summary>
            The System directory. Used to locate the mscoree.dll that is the COM Server for us.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.InstallationData.InstallationMacroName.ProductBinariesDir">
            <summary>
            The directory that contains the product binaries.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.InstallationData.InstallationMacroName.DateTime">
            <summary>
            Date and time at the moment the macro is resolved, in an arbitrary format. Use with care, because the date-time might resolve at the installation time on the user machine. The format is not defined. Fits for producing generation numbers.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.InstallationData.InstallationTargetDirRoot.InstallDir">
            <summary>
            Binaries installation directory on the remote system (the Bin folder).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.InstallationData.InstallationTargetDirRoot.DevEnvInstallDir">
            <summary>
            Visual Studio installation directory on the remote system, the one that contains the DevEnv.exe executable file (the Common7\IDE folder).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.InstallationData.InstallationTargetDirRoot.DevEnvRootDir">
            <summary>
            Visual Studio root directory on the remote system, this is two levels above the Visual Studio InstallDir that contains the DevEnv.exe executable file (the Common7\IDE folder).
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.InstallationData.InstalledFile">
            <summary>
            A single satellite file in the installation.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledFile.#ctor(System.String)">
            <summary>
            An installation of a file whose source name (on the source file system) and target name (on the target file system) are the same.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledFile.#ctor(System.String,System.String)">
            <summary>
            An installation of a file whose source name (on the source file system) and target name (on the target file system) are different.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.InstallationData.InstalledFile.Metadata">
            <summary>
            Any additional metadata on the files.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledFile.GetFilesByMask(JetBrains.Util.FileSystemPath)">
            <summary>
            Gets the list of files to be installed if the file specifies a wildcard.
            </summary>
            <param name="pathSourceDir">The resolved path to the actual source directory of the file.</param>
            <returns>A tuple for each discovered file: full path to the source file, and the matching name of the target file.</returns>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledFile.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledFile.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledFile.System#IComparable{JetBrains#Application#Install#InstallationData#InstalledFile}#CompareTo(JetBrains.Application.Install.InstallationData.InstalledFile)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>. 
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledFile.Equals(JetBrains.Application.Install.InstallationData.InstalledFile)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="P:JetBrains.Application.Install.InstallationData.InstalledFile.SourceName">
            <summary>
            The local name of the file on the source system. May be a mask that matches more than one file.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.InstallationData.InstalledRegistry">
            <summary>
            Wraps all of the Registry-related data in the installation.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledRegistry.#ctor">
            <summary>
            The default ctor, leaves the collections empty.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledRegistry.#ctor(System.Collections.Generic.IEnumerable{JetBrains.Application.Install.InstallationData.InstalledRegistryKey},System.Collections.Generic.IEnumerable{JetBrains.Application.Install.InstallationData.InstalledRegistryValue})">
            <summary>
            Creates a <see cref="T:JetBrains.Application.Install.InstallationData.InstalledRegistry"/> object and fills it with data.
            </summary>
            <param name="keys">Keys.</param>
            <param name="values">Values.</param>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledRegistry.MergeWith(JetBrains.Application.Install.InstallationData.InstalledRegistry)">
            <summary>
            Merges the <paramref name="addon"/> <see cref="T:JetBrains.Application.Install.InstallationData.InstalledRegistry"/> keys and values into the host's, and destroys the former.
            The <see cref="P:JetBrains.Application.Install.InstallationData.InstalledRegistry.Keys"/> or <see cref="P:JetBrains.Application.Install.InstallationData.InstalledRegistry.Values"/> colections may be <c>Null</c> on either parameter, but on return they're guaranteed to be non-<c>Null</c> in this object.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledRegistry.RemoveDuplicates">
            <summary>
            Checks for duplicate keys and values, removes, if any.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledRegistry.ToInstallationData">
            <summary>
            Wraps into the installation data object.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.InstallationData.InstalledRegistry.Keys">
            <summary>
            Registry Keys to install and then REMOVE when uninstalling.
            A regsitry value does not require that you write its parent key here. Write a key if you'd like to make sure it will be removed by uninstall.
            For that matter, do not add foreign keys (eg Visual Studio ones) into which we're writing our values.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.InstallationData.InstalledRegistry.Values">
            <summary>
            Individual registry values to be installed.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.InstallationData.InstalledRegistryKey">
            <summary>
            Registry Keys to install and then REMOVE when uninstalling.
            A regsitry value does not require that you write its parent key here. Write a key if you'd like to make sure it will be removed by uninstall.
            For that matter, do not add foreign keys (eg Visual Studio ones) into which we're writing our values.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.InstallationData.InstalledRegistryItemBase">
            <summary>
            Base class for installer Registry keys and values.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledRegistryItemBase.#ctor(JetBrains.Application.Install.InstallationData.InstalledRegistryHive,System.String)">
            <summary>
            Creates a <see cref="T:JetBrains.Application.Install.InstallationData.InstalledRegistryValue"/> object.
            </summary>
            <param name="hive">Hive.</param>
            <param name="key">Path to the key under the hive.</param>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledRegistryItemBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledRegistryItemBase.System#IComparable{JetBrains#Application#Install#InstallationData#InstalledRegistryItemBase}#CompareTo(JetBrains.Application.Install.InstallationData.InstalledRegistryItemBase)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>. 
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="P:JetBrains.Application.Install.InstallationData.InstalledRegistryItemBase.Hive">
            <summary>
            The Registry hive.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.InstallationData.InstalledRegistryItemBase.Key">
            <summary>
            Path to the key.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledRegistryKey.#ctor(JetBrains.Application.Install.InstallationData.InstalledRegistryHive,System.String)">
            <summary>
            Creates a <see cref="T:JetBrains.Application.Install.InstallationData.InstalledRegistryValue"/> object.
            </summary>
            <param name="hive">Hive.</param>
            <param name="key">Path to the key under the hive.</param>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledRegistryKey.CreateKey(System.String)">
            <summary>
            Creates a new Registry Key under the current Registry key.
            </summary>
            <param name="relpath">Relative path of the nested Key.</param>
            <returns>The new registry value.</returns>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledRegistryKey.CreateValue(System.String,System.Object)">
            <summary>
            Creates a new Registry Value that derives its Hive and Key path from the current Registry key.
            </summary>
            <param name="name">Name of the value.</param>
            <param name="value">Value of the value, must be either a <see cref="T:System.String"/> or an <see cref="T:System.Int32"/>.</param>
            <returns>The new registry value.</returns>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledRegistryKey.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledRegistryKey.System#IComparable{JetBrains#Application#Install#InstallationData#InstalledRegistryKey}#CompareTo(JetBrains.Application.Install.InstallationData.InstalledRegistryKey)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>. 
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="F:JetBrains.Application.Install.InstallationData.InstalledRegistryHive.Hkcr">
            <summary>
            <c>HKEY_CLASSES_ROOT</c>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.InstallationData.InstalledRegistryHive.Hklm">
            <summary>
            <c>HKEY_LOCAL_MACHINE</c>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.InstallationData.InstalledRegistryHive.Hkcu">
            <summary>
            <c>HKEY_CURRENT_USER</c>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.InstallationData.InstalledRegistryHive.Hkmu">
            <summary>
            <c>HKEY_LOCAL_MACHINE</c> or <c>HKEY_CURRENT_USER</c>, depending on whether the installation is per-machine or per-user.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.InstallationData.InstalledRegistryValue">
            <summary>
            Represents a value to be written to the Registry. On uninstallation, the value will be deleted. It is not necessary to have a key element for each value, unless you want it to be deleted upon uninstallation.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledRegistryValue.#ctor(JetBrains.Application.Install.InstallationData.InstalledRegistryHive,System.String,System.String,System.Object)">
            <summary>
            Creates a <see cref="T:JetBrains.Application.Install.InstallationData.InstalledRegistryValue"/> object.
            </summary>
            <param name="hive">Hive.</param>
            <param name="key">Path to the key under the hive.</param>
            <param name="name">Name of the value.</param>
            <param name="value">Value of the value, must be either a <see cref="T:System.String"/> or an <see cref="T:System.Int32"/>.</param>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledRegistryValue.ToRegistry">
            <summary>
            Creates a new Registry with just this value.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledRegistryValue.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledRegistryValue.System#IComparable{JetBrains#Application#Install#InstallationData#InstalledRegistryValue}#CompareTo(JetBrains.Application.Install.InstallationData.InstalledRegistryValue)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>. 
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="P:JetBrains.Application.Install.InstallationData.InstalledRegistryValue.IsPermanent">
            <summary>
            Specifies that the value should be written on registration and left intact on unregistration.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.InstallationData.InstalledRegistryValue.Name">
            <summary>
            Name of the value under its key, or an empty string for the default value of the key.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.InstallationData.InstalledRegistryValue.Type">
            <summary>
            Type of the value, which determines the type of the Windows Registry value to be created. The Value must be formatted accordingly.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.InstallationData.InstalledRegistryValue.Value">
            <summary>
            Value for the value.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.InstallationData.InstallationSourceDirRoot2.ProductBinariesDir">
            <summary>
            <para>A directory to which the product is built; contains all of the product binaries.</para>
            <para>Warning: when doing a local install, this is the same as the target InstallDir.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.InstallationData.InstallationSourceDirRoot2.ReferencesDirectories">
            <summary>
            <para>References directories of the product and its submodules.</para>
            <para>The product references directory is “/Lib” under the product root, and module's references directory is “/Lib” under the module root.</para>
            <para>Deployment code of each module can only use references from its own module and any modules it depends on, transitively; plus, the product references directory.</para>
            <para>The file must be unique by its path relative to the references folder throughout the product. Any conflict results in a failure.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.InstallationData.InstalledRegistryValueType">
            <summary>
            Lists possible types for the Registry values.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.InstallationData.InstalledRegistryValueType.Dword">
            <summary>
            An integer DWORD value.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.InstallationData.InstalledRegistryValueType.String">
            <summary>
            A string value.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.InstallationData.InstalledRegistryValueType.Binary">
            <summary>
            Binary hex-encoded value
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.InstallationData.InstalledShellLink">
            <summary>
            Installs a shell link (an .lnk file shortcut).
            Its <see cref="P:JetBrains.Application.Install.InstallationData.InstalledFileItemBase.TargetName"/> and parent folder's <see cref="P:JetBrains.Application.Install.InstallationData.InstalledFolder.TargetRoot"/>/<see cref="P:JetBrains.Application.Install.InstallationData.InstalledFolder.TargetDir"/> point to the place where the shell link file will be created (.lnk), while the <see cref="P:JetBrains.Application.Install.InstallationData.InstalledShellLink.ShellLinkTargetRoot"/>/<see cref="P:JetBrains.Application.Install.InstallationData.InstalledShellLink.ShellLinkTargetDir"/>/<see cref="P:JetBrains.Application.Install.InstallationData.InstalledShellLink.ShellLinkTargetName"/> point to the target the shell link will be referencing.
            The source information on the parent <see cref="T:JetBrains.Application.Install.InstallationData.InstalledFolder"/> is not used for the shell link.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledShellLink.#ctor(System.String,JetBrains.Application.Install.InstallationData.InstallationTargetDirRoot,JetBrains.Util.FileSystemPath,System.String)">
             <summary>
             Sets the name of the file item on the target filesystem.
             </summary>
            <param name="sShellLinkFileTargetName">
              Name of the shell link file itself on the target filesystem.
            </param>
            <param name="shellLinkTargetRoot">
              Root folder on the target file system this Shell Link will be pointing to.
              Note that this is not the location of the shell link (.lnk) file itself.
            </param>
            <param name="shellLinkTargetDir">
              Relative path from the
              <see cref="P:JetBrains.Application.Install.InstallationData.InstalledShellLink.ShellLinkTargetRoot">root folder</see>
              on the target file system this Shell Link will be pointing to.
              Note that this is not the location of the shell link (.lnk) file itself.
            </param>
            <param name="shellLinkTargetName">
              Name of the file on the target file system this Shell Link will be pointing to.
              Note that this is not the location of the shell link (.lnk) file itself.
            </param>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledShellLink.Equals(JetBrains.Application.Install.InstallationData.InstalledShellLink)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledShellLink.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledShellLink.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.Application.Install.InstallationData.InstalledShellLink.ShellLinkTargetDir">
            <summary>
            Relative path from the <see cref="P:JetBrains.Application.Install.InstallationData.InstalledShellLink.ShellLinkTargetRoot">root folder</see> on the target file system this Shell Link will be pointing to.
            Note that this is not the location of the shell link (.lnk) file itself.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.InstallationData.InstalledShellLink.ShellLinkTargetName">
            <summary>
            Name of the file on the target file system this Shell Link will be pointing to.
            Note that this is not the location of the shell link (.lnk) file itself.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.InstallationData.InstalledShellLink.ShellLinkTargetRoot">
            <summary>
            Root folder on the target file system this Shell Link will be pointing to.
            Note that this is not the location of the shell link (.lnk) file itself.
            </summary>
        </member>
        <member name="T:JetBrains.Application.DataFlowEx">
            <summary>
            DataFlow extension methods that require a Shell.
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataFlowEx.AssertUiThreadFiring``1(JetBrains.DataFlow.ISignal{``0})">
            <summary>
            Prevents any property modifications if called on any thread but the primary one.
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataFlowEx.AssertUiThreadModifications``1(JetBrains.DataFlow.ICollectionEvents{``0})">
            <summary>
            Prevents any collection modifications if called on any thread but the primary one.
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataFlowEx.AssertUiThreadModifications``1(JetBrains.DataFlow.IProperty{``0})">
            <summary>
            Prevents any property modifications if called on any thread but the primary one.
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataFlowEx.BeginSetGuarded``1(JetBrains.DataFlow.IProperty{``0},``0,System.Object)">
            <summary>
            Assigns a new value to the property under a <see cref="T:JetBrains.Threading.ReentrancyGuard"/> on the primary thread, asynchronously.
            The <see cref="M:JetBrains.Threading.ReentrancyGuard.ExecuteOrQueue(System.String,System.Action)"/> logic is not used, the asynchronous <see cref="M:JetBrains.Threading.ReentrancyGuard.Queue(System.String,System.Action)"/> is always called instead, even if allowed to <see cref="M:JetBrains.Threading.ReentrancyGuard.Execute(System.String,System.Action)"/> in the moment. This guarantees that the property value assignments will always be serialized (eg a later <see cref="M:JetBrains.Threading.ReentrancyGuard.Execute(System.String,System.Action)"/> will not be overwritten when a previous <see cref="M:JetBrains.Threading.ReentrancyGuard.Queue(System.String,System.Action)"/> gets to run).
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataFlowEx.EnsureGuarded``1(JetBrains.DataFlow.Property{``0})">
            <summary>
            Ensures that the property is modified (and the events are fired) in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see> only.
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataFlowEx.EnsureGuarded``1(JetBrains.DataFlow.Property{``0},JetBrains.DataFlow.Lifetime,JetBrains.Threading.ReentrancyGuard)">
            <summary>
            Ensures that the property is modified (and the events are fired) in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see> only.
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataFlowEx.EnsureGuarded``1(JetBrains.DataFlow.Property{``0},JetBrains.DataFlow.Lifetime,JetBrains.Threading.IThreading)">
            <summary>
            Ensures that the property is modified (and the events are fired) in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see> only.
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataFlowEx.EnsureGuarded``1(JetBrains.DataFlow.Property{``0},JetBrains.Threading.ReentrancyGuard)">
            <summary>
            Ensures that the property is modified (and the events are fired) in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see> only.
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataFlowEx.EnsureGuarded``1(JetBrains.DataFlow.IProperty{``0},JetBrains.DataFlow.Lifetime,JetBrains.Threading.ReentrancyGuard)">
            <summary>
            Ensures that the property is modified (and the events are fired) in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see> only.
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataFlowEx.EnsureGuarded``1(JetBrains.DataFlow.Signal{``0})">
            <summary>
            Ensures that the signal is fired in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see> only.
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataFlowEx.EnsureGuarded(JetBrains.DataFlow.SimpleSignal)">
            <summary>
            Ensures that the signal is fired in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see> only.
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataFlowEx.EnsureGuarded``1(JetBrains.DataFlow.CollectionEvents{``0},JetBrains.Threading.ReentrancyGuard)">
            <summary>
            Ensures that the collection is modified (and the events are fired) in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see> only.
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataFlowEx.EnsureGuarded``2(JetBrains.DataFlow.DictionaryEvents{``0,``1},JetBrains.Threading.ReentrancyGuard)">
            <summary>
            Ensures that the collection is modified (and the events are fired) in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see> only.
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataFlowEx.EnsurePrimaryThread``1(JetBrains.DataFlow.Property{``0})">
            <summary>
            Ensures that the property is modified (and the events are fired) on the <see cref="!:PlatformObsoleteStatics.PrimaryThread"/> only.
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataFlowEx.FlowIntoGuarded_NoReplay``1(JetBrains.DataFlow.IProperty{``0},JetBrains.DataFlow.Lifetime,JetBrains.DataFlow.IProperty{``0},JetBrains.Threading.ReentrancyGuard,System.Object,System.Boolean)">
            <summary>
            <para>Establishes a data flow between two properties. The assignment to the target property only happens in the <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see> on the <see cref="!:PlatformObsoleteStatics.PrimaryDispatcher">primary thread</see>.</para>
            <para>It is guaranteed that the values are properly serialized, ie a delayed early value will not overwrite a later direct execution.</para>
            <para>Returns a cookie for terminating the flow.</para>
            <para>Not suitable for high-throughput property changes, as it schedulles a new guarded execution for each change. Use <see cref="M:JetBrains.DataFlow.IPropertyEx.FlowInto_Grouped``1(JetBrains.DataFlow.IProperty{``0},JetBrains.DataFlow.Lifetime,JetBrains.DataFlow.IProperty{``0},JetBrains.Threading.GroupingEvent,JetBrains.DataFlow.StandardPreconditions.ReadonlyToken)"/> in such cases.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataFlowEx.FlowIntoGuarded_Replay``1(JetBrains.DataFlow.ICollectionEvents{``0},JetBrains.DataFlow.ICollectionEvents{``0},System.Object,System.Boolean,JetBrains.Util.Concurrency.UnguardedCallbackMerger,JetBrains.Threading.IThreading)">
            <summary>
            <para>Establishes a data flow between two collections. The changes to the target collection only happen in the <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see> on the <see cref="!:PlatformObsoleteStatics.PrimaryDispatcher">primary thread</see>.</para>
            <para>It is guaranteed that the values are properly serialized, ie a delayed early value will not overwrite a later direct execution.</para>
            <para>Returns a cookie for terminating the flow.</para>
            <para>Not suitable for high-throughput changes, as it schedulles a new guarded execution for each change.</para>
            <para>Uses the given callback merger for guarding the changes.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataFlowEx.FlowIntoGuarded_Replay``1(JetBrains.DataFlow.ICollectionEvents{``0},JetBrains.DataFlow.ICollectionEvents{``0},System.Object,System.Boolean,JetBrains.Threading.IThreading)">
            <summary>
            <para>Establishes a data flow between two collections. The changes to the target collection only happen in the <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see> on the <see cref="!:PlatformObsoleteStatics.PrimaryDispatcher">primary thread</see>.</para>
            <para>It is guaranteed that the values are properly serialized, ie a delayed early value will not overwrite a later direct execution.</para>
            <para>Returns a cookie for terminating the flow.</para>
            <para>Not suitable for high-throughput changes, as it schedulles a new guarded execution for each change.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.DataFlowEx.FlowIntoCollectionAction`1">
            <summary>
            Helper for <see cref="!:DataFlowEx.FlowIntoGuarded_Replay&lt;TValue&gt;(JetBrains.DataFlow.ICollectionEvents&lt;TValue&gt;,JetBrains.DataFlow.ICollectionEvents&lt;TValue&gt;,object,bool)"/>.
            </summary>
        </member>
        <member name="T:JetBrains.Application.ExceptionReport.ExceptionReporting">
            <summary>
              Central class of the Exception Reporting subsystem.
            </summary>
        </member>
        <member name="F:JetBrains.Application.ExceptionReport.ExceptionReporting.myDispatcher">
            <summary>
              Identifies the owning thread.
            </summary>
        </member>
        <member name="F:JetBrains.Application.ExceptionReport.ExceptionReporting.myIsInInternalMode">
            <summary>
              Whether the product is running in Internal Mode. Knows this earlier than the Shell with its <see cref="!:PlatformObsoleteStatics.IsInInternalMode"/> . Cannot be reset once the session was seen in internal mode.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ExceptionReport.ExceptionReporting.#ctor(JetBrains.DataFlow.Lifetime,JetBrains.Application.ExceptionReport.IExceptionReportService,JetBrains.Application.Progress.ITaskExecutor,System.Collections.Generic.IEnumerable{JetBrains.Application.ExceptionReport.IExceptionReportDataProvider},JetBrains.Application.IApplicationDescriptor,JetBrains.Application.ExceptionReport.ExceptionStorageLocator,JetBrains.Application.FileSystemTracker.IFileSystemTracker,JetBrains.Application.ExceptionReport.IExceptionReportStrategy,JetBrains.DataFlow.IProperty{System.Boolean},JetBrains.Application.ExceptionReport.IExceptionStorageBehavior)">
            <summary>
              Main constructor
            </summary>
            <param name="lifetime"></param>
            <param name="exceptionReportService"></param>
            <param name="taskexecutor"></param>
            <param name="exceptionReportDataProviders"></param>
            <param name="applicationDescriptor"></param>
            <param name="exceptionStorageLocator">
              Implementation of ExceptionStorageLocator that knows where to store exceptions. 
              Use NullExceptionStorageLocator it's not necessary to store exceptions.
            </param>
            <param name="fileSystemTracker">File system tracker to watch exceptions folder</param>
            <param name="defaultStrategy"></param>
            <param name="watchExceptionStorage"> Indicates whether we should watch exceptions folder </param>
            <param name="exceptionStorageBehavior"> Exceptions storage behavior component </param>
        </member>
        <member name="M:JetBrains.Application.ExceptionReport.ExceptionReporting.IsRelevantException(System.Exception)">
            <summary>
              Looks for our company/product names in the stack trace.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ExceptionReport.ExceptionReporting.AttachToLogger">
            <summary>
              Starts listening logger events with this exception reporter. Previously listening exception reporters are stacked beneath and deactivated until this method is reverted by disposing of its return value.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ExceptionReport.ExceptionReporting.SetInternalMode">
            <summary>
              Tells the Exception Reporting we've entered the Internal mode. Should be called as early as it gets known.
            </summary>
        </member>
        <member name="P:JetBrains.Application.ExceptionReport.ExceptionReporting.TaskExecutor">
            <summary>
              Gets the task executor passed to nested <see cref="M:JetBrains.Application.ExceptionReport.ExceptionReporting.SetStrategy(JetBrains.Application.ExceptionReport.IExceptionReportStrategy)">strategies</see> to handle the exceptions.
            </summary>
        </member>
        <member name="P:JetBrains.Application.ExceptionReport.ExceptionReporting.IsShowingExceptionsToUser">
            <summary>
              Central property for deciding whether to show any exceptions to the user. Sometimes we'd like to suppress exception notifications at all (eg for trade show demos), in these cases this flag goes low.
            </summary>
        </member>
        <member name="F:JetBrains.Application.ExceptionReport.ExceptionReporting.ExceptionReporterAttachedToLogger.myReportersStack">
            <summary>
              Free-threaded, lock-free reads, copy-on-write. Stacks reporters, the last one is active.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ExceptionReport.ExceptionReporting.ExceptionReporterAttachedToLogger.AddReporter(JetBrains.Application.ExceptionReport.ExceptionReporting)">
            <summary>
              Starts listening logger events with this exception reporter. Previously listening exception reporters are stacked beneath and deactivated until this method is reverted by disposing of its return value.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ExceptionReport.ExceptionReporting.ExceptionReporterAttachedToLogger.OnException(System.Object,JetBrains.DataFlow.EventArgs{System.Exception})">
            <summary>
              Exception occured. Dispatch to reporter on top of stack. Might be empty, as we would never remove exception listener.
            </summary>
        </member>
        <member name="M:JetBrains.Application.FileSystemTracker.IFileSystemTracker.AdviseFileChanges(JetBrains.DataFlow.Lifetime,JetBrains.Util.FileSystemPath,System.Action{JetBrains.ProjectModel.FileSystemChangeDelta})">
            <summary>
             Listens for changes in <paramref name="path" /> and executes <paramref name="onChangeAction" /> on it
             (on FileSystemTrackerCommit thread in async mode and on main thread in sync mode).
             Delta argument of <paramref name="onChangeAction"/> receives only changes related to <paramref name="path"/>
             </summary>
        </member>
        <member name="M:JetBrains.Application.FileSystemTracker.IFileSystemTracker.AdviseDirectoryChanges(JetBrains.DataFlow.Lifetime,JetBrains.Util.FileSystemPath,System.Boolean,System.Action{JetBrains.ProjectModel.FileSystemChangeDelta})">
            <summary>
             Listens for changes in <paramref name="path" /> and executes <paramref name="onChangeAction" /> on it
             (on FileSystemTrackerCommit thread in async mode and on main thread in sync mode)
             Delta argument of <paramref name="onChangeAction"/> receives only changes related to <paramref name="path"/>
             </summary>
        </member>
        <member name="M:JetBrains.Application.FileSystemTracker.IFileSystemTracker.CommitChanges(JetBrains.Util.FileSystemPath[])">
            <summary>
             Queues immediate file system changes commit on separate thread (async mode) or fires Changed event on main thread (sync mode).
             </summary>
        </member>
        <member name="M:JetBrains.Application.FileSystemTracker.IFileSystemTracker.IgnoreChangesInFolder(JetBrains.DataFlow.Lifetime,JetBrains.Util.FileSystemPath)">
            <summary>
            Forbids changes in folder to be propagated to the system. 
            Necessary for caches folder that may be located inside project.
            </summary>
        </member>
        <member name="P:JetBrains.Application.FileSystemTracker.IFileSystemTracker.AutoCommitEnabled">
            <summary>
            Whether file system changes are allowd to commit automaticall when detected.
            Obsolete. Use <see cref="M:JetBrains.Application.FileSystemTracker.IFileSystemTracker.SuppressAutoCommit(JetBrains.DataFlow.Lifetime,System.Object)"/> instead.
            </summary>
        </member>
        <member name="P:JetBrains.Application.FileSystemTracker.IFileSystemTracker.Changed">
            <summary>
             Fires on file system change from OS in separate guarded thread (async mode) or in main thread (sync mode).
             </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Impl.FileSystemScanner">
            <summary>
            Helper class for scanning a directory for files matching a pattern
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.BindingRedirectionsInstaller.CleanupOldEntries(JetBrains.Application.Install.Installer,System.Xml.XmlDocument)">
            <summary>
            Looks for previous patchings in the config, removes them.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.BindingRedirectionsInstaller.LoadConfigFile(JetBrains.Application.Install.Installer,JetBrains.Application.Install.InstallationData.InstallationSourceDirRoot2,System.String,JetBrains.Metadata.Utils.AssemblyNameInfo)">
            <summary>
            Loads the source config file, or creates a new one.
            Ensures it contains enough top-level elements.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.BindingRedirectionsInstaller.WriteNewEntries(JetBrains.Application.Install.Installer,System.Xml.XmlDocument)">
            <summary>
            Patches the config XML document with redirections.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.BindingRedirectionsInstaller.AssemblyBindingRedirections">
            <summary>
            Produces the default assembly binding redirections for a product assembly.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.BindingRedirectionsInstaller.Attr">
            <summary>
            Attribute names.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.BindingRedirectionsInstaller.Elem">
            <summary>
            Element names.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.BindingRedirectionsInstaller.Nsp">
            <summary>
            Namespace aliases.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.BindingRedirectionsInstaller.Xmlns">
            <summary>
            XML Namespaces.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.FileInstaller">
            <summary>
            Processes the <see cref="T:JetBrains.Application.Install.InstallFileAttribute"/> installations.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.InstallBindingRedirectionsConfigFileAttribute">
            <summary>
            Updates (compile-time) a config file to include the binding redirections for the current version of the product.
            A new file could also be created.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.InstallBindingRedirectionsConfigFileAttribute.#ctor(System.String)">
            <summary>
            Schedulles creation of a new assembly configuration file with binding redirections.
            </summary>
            <param name="sTargetConfigFileName">Local name of the resulting config file, including all of the extensions. This file will be installed into the <see cref="F:JetBrains.Application.Install.InstallationData.InstallationTargetDirRoot.InstallDir"/> folder.</param>
        </member>
        <member name="M:JetBrains.Application.Install.InstallBindingRedirectionsConfigFileAttribute.#ctor(System.String,JetBrains.Application.Install.InstallationData.InstallationSourceDirRoot2,System.String)">
            <summary>
            Schedulles patching of an existing assembly configuration file with binding redirections.
            </summary>
            <param name="sTargetConfigFileName">Local name of the resulting config file, including all of the extensions. This file will be installed into the <see cref="F:JetBrains.Application.Install.InstallationData.InstallationTargetDirRoot.InstallDir"/> folder.</param>
            <param name="sourceroot">Root folder for looking up the original file. This could be <see cref="F:JetBrains.Application.Install.InstallationData.InstallationSourceDirRoot2.ProductBinariesDir"/> (same as destination), but this is not a recommended scenario, as the file might be patched multiple times in this case. If <paramref name="sSourceRelativePath"/> is not specified, this value is ignored.</param>
            <param name="sSourceRelativePath">An optional path to the source file, relative to <paramref name="sourceroot"/>. If non-<c>Null</c>, then the binding redirections are added to the contents of that file. If <c>Null</c>, then a new file is created.</param>
        </member>
        <member name="T:JetBrains.Application.Install.InstallerVsVersionAffinity">
            <summary>
            Specifies how the installation action is interested in VisualStudio version.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.InstallerVsVersionAffinity.Neutral">
            <summary>
            The installation data is VS-version-neutral, and the installer will be called only if <see cref="P:JetBrains.Application.Install.Installer.VsVersion"/> is <c>Null</c> (to avoid duplicating the same data coming from runs for different versions).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.InstallerVsVersionAffinity.Specific">
            <summary>
            The installation data depends on the VS version, and the installer will be called only when <see cref="P:JetBrains.Application.Install.Installer.VsVersion"/> is set to a specific value. Be sure not to generate the same data (target file names, MSI GUIDs) in this mode.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.InstallerVsVersionAffinity.CallAlways">
            <summary>
            The installer is always called, regardless of the <see cref="P:JetBrains.Application.Install.Installer.VsVersion"/> value.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.InstallFileAttribute">
            <summary>
            Adds one or more arbitrary files to the installation.
            The files may reside either in Lib or Bin folders.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.InstallFileAttribute.#ctor(System.String,JetBrains.Application.Install.InstallationData.InstallationTargetDirRoot,System.String,JetBrains.Application.Install.InstallationData.InstallationSourceDirRoot2,System.String)">
            <summary>
            Adds one or more arbitrary files to the installation.
            </summary>
            <param name="targetroot">Base folder on the installation site.</param>
            <param name="sTargetRelativeDir">Relative path to the files from the base folder on the installation site.</param>
            <param name="sourceroot">Base folder on the compilation site.</param>
            <param name="sSourceRelativePath">Relative file path from the base folder on the compilation site. The file name might include wildcards for picking the files from the folder on the compilation site (source). More than one file is OK. File names will be the same on the installation site (target).</param>
            <param name="id">The unique identifier for this installation entry.</param>
        </member>
        <member name="P:JetBrains.Application.Install.InstallFileAttribute.Id">
            <summary>
            The unique identifier for this installation entry.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.InstallFileAttribute.SourceRelativePath">
            <summary>
            <para>Relative file path from the base folder on the compilation site. The file name might include wildcards for picking the files from the folder on the compilation site (source). More than one file is OK. File names will be the same on the installation site (target).</para>
            <para>Must not be a <see cref="T:JetBrains.Util.FileSystemPath"/> because of the wildcards.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.InstallFileAttribute.SourceRoot">
            <summary>
            Base folder on the compilation site.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.InstallFileAttribute.TargetRelativeDir">
            <summary>
            Relative path from the base folder on the installation site.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.InstallFileAttribute.TargetRoot">
            <summary>
            Base folder on the installation site.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.LocalInstaller">
            <summary>
            Performs local-system installations, hence “Live”.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.LocalInstaller.Install(JetBrains.Application.Install.InstallationData.InstallationData,JetBrains.Application.Install.RegistrationStage,System.Collections.Generic.IDictionary{System.String,System.String},System.Func{JetBrains.Application.Install.InstallationData.InstallationTargetDirRoot,JetBrains.Util.FileSystemPath},System.Action{System.String})">
            <summary>
            Performs the local installation of the given installation data by writing the Registry keys and copying the files.
            </summary>
            <param name="dataxml">The installation data.</param>
            <param name="stage">Stage, either install or uninstall.</param>
            <param name="LogMessage">The logging facility.</param>
            <param name="ResolveTargetDirRoot">Resolves the target directory, for copying the files into.</param>
            <param name="macros">The maros to be substituted on install, if needed.</param>
        </member>
        <member name="M:JetBrains.Application.Install.LocalInstaller.ResolveTargetDirRoot(JetBrains.Application.Install.Installer,JetBrains.Application.Install.InstallationData.InstallationTargetDirRoot)">
            <summary>
            When doing local installs, resolves target paths on the local filesystem.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.LocalInstaller.GetWindowsRegistryRootKey(JetBrains.Application.Install.InstallationData.InstalledRegistryHive)">
            <summary>
            Gets the proper Windows Registry root key.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.LocalInstaller.InstallFiles(JetBrains.Application.Install.InstallationData.InstallationData,JetBrains.Application.Install.RegistrationStage,System.Action{System.String},System.Func{JetBrains.Application.Install.InstallationData.InstallationTargetDirRoot,JetBrains.Util.FileSystemPath})">
            <summary>
            Copies or deletes the files.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.LocalInstaller.InstallRegistry(JetBrains.Application.Install.InstallationData.InstalledRegistry,JetBrains.Application.Install.RegistrationStage,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Executes the registration/unregistration operations on the Registry keys.
            </summary>
            <param name="registry">The Registry to process.</param>
            <param name="registrationStage">Processing type.</param>
            <param name="macros">The macros to substitute when processing the keys.</param>
        </member>
        <member name="M:JetBrains.Application.Install.LocalInstaller.RegisterKey(JetBrains.Application.Install.InstallationData.InstalledRegistryKey,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Writes the key to the Registry.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.LocalInstaller.RegisterValue(JetBrains.Application.Install.InstallationData.InstalledRegistryValue,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Writes the value to the Registry.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.LocalInstaller.UnregisterKey(JetBrains.Application.Install.InstallationData.InstalledRegistryKey,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Deletes the key from the Registry.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.LocalInstaller.UnregisterValue(JetBrains.Application.Install.InstallationData.InstalledRegistryValue,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Deletes the value from the Registry.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Progress.ProgressIndicatorMarshalled">
            <summary>
            As the original <see cref="T:JetBrains.Application.Progress.ProgressIndicator"/> is free-threaded, wraps it into a new <see cref="T:JetBrains.Application.Progress.IProgressIndicatorModel"/> that fires its changes on the primary thread only.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Progress.ProgressIndicatorMarshalled.Create(JetBrains.DataFlow.Lifetime,JetBrains.Application.Progress.IProgressIndicatorModel,JetBrains.Threading.IThreading)">
            <summary>
            As the original <see cref="T:JetBrains.Application.Progress.ProgressIndicator"/> is free-threaded, wraps it into a new <see cref="T:JetBrains.Application.Progress.IProgressIndicatorModel"/> that fires its changes on the primary thread only.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Progress.ProgressIndicatorMarshalled.CreateWithoutSafeThreadCheck(JetBrains.DataFlow.Lifetime,JetBrains.Application.Progress.IProgressIndicatorModel,JetBrains.Threading.IThreading)">
            <summary>
            As the original <see cref="T:JetBrains.Application.Progress.ProgressIndicator"/> is free-threaded, wraps it into a new <see cref="T:JetBrains.Application.Progress.IProgressIndicatorModel"/> that fires its changes on the primary thread only.
            Note: you should call the <see cref="M:JetBrains.Application.Progress.ProgressIndicatorMarshalled.Create(JetBrains.DataFlow.Lifetime,JetBrains.Application.Progress.IProgressIndicatorModel,JetBrains.Threading.IThreading)"/> version whenever possible.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Progress.SimpleTaskExecutor">
            <summary>
            A task executor that just calls the task method.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Progress.SimpleTaskExecutor.PushProgressCanceledInterruptableCookie(JetBrains.Application.Progress.IProgressIndicator)">
            <summary>
            Throws the <see cref="T:JetBrains.Application.Progress.ProcessCancelledException"/> on <see cref="P:JetBrains.Application.Progress.IProgressIndicatorModel.IsCanceled"/>.
            This is the simple non-UI implementation. UI-related implementations should use a similar method from the <c>UITaskExecutorRun</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Progress.TaskCancelable">
            <summary>
            Whether an <see cref="T:JetBrains.Application.Progress.ITaskExecutor"/> task could be user-canceled.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Progress.TaskCancelable.No">
            <summary>
            <para>The task does not quite support canceling, so there's no use in displaying the "Cancel" button to the user.</para>
            <para>Note that the task might still be canceled and your <see cref="T:JetBrains.Application.Progress.ITaskExecutor"/> run might still return <c>False</c> in some cases, like throwing <see cref="T:JetBrains.Application.Progress.ProcessCancelledException"/> from the task implementation.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Progress.TaskCancelable.Yes">
            <summary>
            The task supports canceling, looks for <see cref="P:JetBrains.Application.Progress.IProgressIndicator.IsCanceled"/>, and user should be presented with the "Cancel" option in the progress UI.
            </summary>
        </member>
        <member name="T:JetBrains.Threading.Invocator">
            <summary>
            <para>A combined invocator that incapsulates both <see cref="P:JetBrains.Threading.Invocator.ReentrancyGuard"/> and <see cref="T:JetBrains.Threading.TimedActionsHost"/>.</para>
            <para>When disposed of, shuts down the <see cref="T:JetBrains.Threading.TimedActionsHost"/> and cancels all of its timed actions. It's OK for individual alarm consumers to dispose of them as well.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Threading.Invocator.myIsRecurringActivityAllowed">
            <summary>
            Gets or sets whether the application is currently active (and background activities are allowed).
            Used to suspend recurring actions execution when inactive.
            </summary>
        </member>
        <member name="P:JetBrains.Threading.Invocator.TimedActions">
            <summary>
            Provides access to the underlying <see cref="T:JetBrains.Threading.TimedActionsHost"/>, <see cref="P:JetBrains.Threading.Invocator.ReentrancyGuard"/>, <see cref="T:JetBrains.Threading.JetDispatcher"/>, and <see cref="T:System.Threading.Thread"/>.
            </summary>
        </member>
        <member name="P:JetBrains.Threading.Invocator.ReentrancyGuard">
            <summary>
            Gets the reentrancy guard that implements the non-timed actions of this Invocator.
            </summary>
        </member>
        <member name="P:JetBrains.Threading.Invocator.Dispatcher">
            <summary>
            Gets the dispatcher of the thread served by this Invocator.
            On a Shell's invocator, this would be the application's main thread.
            </summary>
        </member>
        <member name="P:JetBrains.Threading.Invocator.IsRecurringActivityAllowed">
            <summary>
            Gets or sets whether the application is currently active (and background activities are allowed).
            Used to suspend recurring actions execution when inactive.
            </summary>
        </member>
        <member name="M:JetBrains.Threading.IThreadingEx.LogAssertGuarded(JetBrains.Threading.IThreading)">
            <summary>
            <para>Checks that the activity is executed on the proper thread and is being guarded from reentrancy.</para>
            <para>Does not break execution, just logs the failure — the common case of the failure is adding new guard-checks, in which case the features could go on functioning “as before” without breaking execution, but logging the failure.</para>
            </summary>
            <param name="thіs"></param>
        </member>
        <member name="M:JetBrains.Threading.IThreadingEx.ExecuteOrQueue(JetBrains.Threading.IThreading,System.String,System.Action)">
            <summary>
            <para>Executes an action on the <see cref="P:JetBrains.Threading.IThreading.Dispatcher">primary thread</see> in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see>.</para>
            <para>If called on a foreign thread, executes the action asynchronously, like <see cref="M:JetBrains.Threading.IThreadingEx.Queue(JetBrains.Threading.IThreading,JetBrains.DataFlow.Lifetime,System.String,System.Action)"/>.</para>
            <para>If called on the guarded thread, checks for reentrancy. If there are no guarded executions on the stack yet, executes the action immediately and synchronously, like <see cref="M:JetBrains.Threading.ReentrancyGuard.Execute(System.String,System.Action)"/>. Otherwise, postpones the action for asynchronous execution, like <see cref="M:JetBrains.Threading.IThreadingEx.Queue(JetBrains.Threading.IThreading,JetBrains.DataFlow.Lifetime,System.String,System.Action)"/> does.</para>
            </summary>
            <param name="thіs"></param>
            <param name="name">The name for the task.</param>
            <param name="action">The action to execute. Exceptions will be trapped.</param>
            <returns><c>True</c> if executed immediately, <c>False</c> if queued (<see cref="M:JetBrains.Threading.ReentrancyGuard.TryExecute(System.String,System.Action)"/>-compatible behavior).</returns>
        </member>
        <member name="M:JetBrains.Threading.IThreadingEx.ExecuteOrQueueEx(JetBrains.Threading.IThreading,System.String,System.Action)">
            <summary>
            <para>Executes an action on the <see cref="P:JetBrains.Threading.IThreading.Dispatcher">primary thread</see> in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see>.</para>
            <para>If called on a foreign thread, executes the action asynchronously, like <see cref="M:JetBrains.Threading.IThreadingEx.Queue(JetBrains.Threading.IThreading,JetBrains.DataFlow.Lifetime,System.String,System.Action)"/>.</para>
            <para>If called on the guarded thread, checks for reentrancy. If there are no guarded executions on the stack yet, executes the action immediately and synchronously, like <see cref="M:JetBrains.Threading.ReentrancyGuard.Execute(System.String,System.Action)"/>. Otherwise, postpones the action for asynchronous execution, like <see cref="M:JetBrains.Threading.IThreadingEx.Queue(JetBrains.Threading.IThreading,JetBrains.DataFlow.Lifetime,System.String,System.Action)"/> does.</para>
            <para>If Async behavior is prohibited, like in test environment, always executes synchronously.</para>
            </summary>
            <param name="thіs"></param>
            <param name="name">The name for the task.</param>
            <param name="action">The action to execute. Exceptions will be trapped.</param>
            <returns><c>True</c> if executed immediately, <c>False</c> if queued (<see cref="M:JetBrains.Threading.ReentrancyGuard.TryExecute(System.String,System.Action)"/>-compatible behavior).</returns>
        </member>
        <member name="M:JetBrains.Threading.IThreadingEx.ExecuteOrQueue(JetBrains.Threading.IThreading,JetBrains.DataFlow.Lifetime,System.String,System.Action)">
            <summary>
            <para>Executes an action on the <see cref="P:JetBrains.Threading.IThreading.Dispatcher">primary thread</see> in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see>.</para>
            <para>If called on a foreign thread, executes the action asynchronously, like <see cref="M:JetBrains.Threading.IThreadingEx.Queue(JetBrains.Threading.IThreading,JetBrains.DataFlow.Lifetime,System.String,System.Action)"/>.</para>
            <para>If called on the guarded thread, checks for reentrancy. If there are no guarded executions on the stack yet, executes the action immediately and synchronously, like <see cref="M:JetBrains.Threading.ReentrancyGuard.Execute(System.String,System.Action)"/>. Otherwise, postpones the action for asynchronous execution, like <see cref="M:JetBrains.Threading.IThreadingEx.Queue(JetBrains.Threading.IThreading,JetBrains.DataFlow.Lifetime,System.String,System.Action)"/> does.</para>
            </summary>
            <param name="thіs"></param>
            <param name="lifetime"></param>
            <param name="name">The name for the task.</param>
            <param name="action">The action to execute. Exceptions will be trapped.</param>
            <returns><c>True</c> if executed immediately, <c>False</c> if queued (<see cref="M:JetBrains.Threading.ReentrancyGuard.TryExecute(System.String,System.Action)"/>-compatible behavior).</returns>
        </member>
        <member name="M:JetBrains.Threading.IThreadingEx.ExecuteOrQueueEx(JetBrains.Threading.IThreading,JetBrains.DataFlow.Lifetime,System.String,System.Action)">
            <summary>
            <para>Executes an action on the <see cref="P:JetBrains.Threading.IThreading.Dispatcher">primary thread</see> in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see>.</para>
            <para>If called on a foreign thread, executes the action asynchronously, like <see cref="M:JetBrains.Threading.IThreadingEx.Queue(JetBrains.Threading.IThreading,JetBrains.DataFlow.Lifetime,System.String,System.Action)"/>.</para>
            <para>If called on the guarded thread, checks for reentrancy. If there are no guarded executions on the stack yet, executes the action immediately and synchronously, like <see cref="M:JetBrains.Threading.ReentrancyGuard.Execute(System.String,System.Action)"/>. Otherwise, postpones the action for asynchronous execution, like <see cref="M:JetBrains.Threading.IThreadingEx.Queue(JetBrains.Threading.IThreading,JetBrains.DataFlow.Lifetime,System.String,System.Action)"/> does.</para>
            <para>If Async behavior is prohibited, like in test environment, always executes synchronously.</para>
            </summary>
            <param name="thіs"></param>
            <param name="lifetime"></param>
            <param name="name">The name for the task.</param>
            <param name="action">The action to execute. Exceptions will be trapped.</param>
            <returns><c>True</c> if executed immediately, <c>False</c> if queued (<see cref="M:JetBrains.Threading.ReentrancyGuard.TryExecute(System.String,System.Action)"/>-compatible behavior).</returns>
        </member>
        <member name="M:JetBrains.Threading.IThreadingEx.Queue(JetBrains.Threading.IThreading,JetBrains.DataFlow.Lifetime,System.String,System.Action)">
            <summary>
            <para>Queues the action to execute asynchronously on the <see cref="P:JetBrains.Threading.IThreading.Dispatcher">primary thread</see> in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see>, as soon as possible. Reclaims the queueing and cancels the action from executing when the lifetime ends.</para>
            <para>The reentrancy between guarded actions is prevented.</para>
            </summary>
            <param name="thіs"></param>
            <param name="lifetime"></param>
            <param name="name">The name for the task.</param>
            <param name="F">The action to execute. Exceptions will be trapped.</param>
            <returns>You may optionally dispose of the return value to prevent the action from executing later.</returns>
        </member>
        <member name="M:JetBrains.Threading.IThreadingEx.Queue(JetBrains.Threading.IThreading,System.String,System.Action)">
            <summary>
            <para>Queues the action to execute asynchronously on the <see cref="P:JetBrains.Threading.IThreading.Dispatcher">primary thread</see> in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see>, as soon as possible. Free-threaded.</para>
            <para>The reentrancy between guarded actions is prevented.</para>
            </summary>
            <param name="thіs"></param>
            <param name="name">The name for the task.</param>
            <param name="action">The action to execute. Exceptions will be trapped.</param>
        </member>
        <member name="M:JetBrains.Threading.IThreadingEx.QueueAt(JetBrains.Threading.IThreading,System.String,System.TimeSpan,System.Action)">
            <summary>
            <para>Queues the action to execute once on the <see cref="P:JetBrains.Threading.IThreading.Dispatcher">primary thread</see> in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see> when the timeout elapses.</para>
            <para>Returns a token that cancels the action execution. The token disposal is optional.</para>
            <para>A <see cref="T:JetBrains.Threading.ReentrancyGuard"/> is preventing reentrancy between the actions.</para>
            </summary>
            <param name="thіs"></param>
            <param name="name">The name for the task.</param>
            <param name="action">The action to execute. Exceptions will be trapped.</param>
            <param name="interval">A non-negative time interval.</param>
        </member>
        <member name="M:JetBrains.Threading.IThreadingEx.QueueAt(JetBrains.Threading.IThreading,JetBrains.DataFlow.Lifetime,System.String,System.TimeSpan,System.Action)">
            <summary>
            <para>Queues the action to execute once on the <see cref="P:JetBrains.Threading.IThreading.Dispatcher">primary thread</see> in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see> when the timeout elapses.</para>
            <para>A <see cref="T:JetBrains.Threading.ReentrancyGuard"/> is preventing reentrancy among the actions.</para>
            </summary>
            <param name="thіs"></param>
            <param name="lifetime">Limiting lifetime. If the lifetime ends before the action is executed, the execution is canceled.</param>
            <param name="name">The name for the task.</param>
            <param name="action">The action to execute. Exceptions will be trapped.</param>
            <param name="interval">A non-negative time interval.</param>
        </member>
        <member name="M:JetBrains.Threading.IThreadingEx.QueueAt_NoReentrancyGuarding(JetBrains.Threading.IThreading,JetBrains.DataFlow.Lifetime,System.String,System.TimeSpan,System.Action)">
            <summary>
            <para>Queues the action to execute once on the <see cref="P:JetBrains.Threading.IThreading.Dispatcher">primary thread</see> when the timeout elapses.</para>
            <para>The action does not use <see cref="T:JetBrains.Threading.ReentrancyGuard"/> to execute.</para>
            </summary>
            <param name="thіs"></param>
            <param name="lifetime">Limiting lifetime. If the lifetime ends before the action is executed, the execution is canceled.</param>
            <param name="name">The name for the task.</param>
            <param name="action">The action to execute. Exceptions will be trapped.</param>
            <param name="interval">A non-negative time interval.</param>
        </member>
        <member name="M:JetBrains.Threading.IThreadingEx.CreateGroupingEvent(JetBrains.Threading.IThreading,JetBrains.DataFlow.Lifetime,System.String,System.TimeSpan,System.Action)">
            <summary>
            <para>Creates and registers an event that groups multiple incoming signals within a time span and issues only one outgoing signal for them.</para>
            <para>This allows to accomodate for external events firing at a high rate and execute the handler only when their activity suspends.</para>
            <para>The object is thread-safe: the incoming event may fire on any thread, the outgoing activity always happens on the <see cref="P:JetBrains.Threading.IThreading.Dispatcher">primary thread</see> in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see>.</para>
            <para>This function is free-threaded.</para>
            </summary>
            <param name="thіs"></param>
            <param name="lifetime">Limiting lifetime. If the lifetime ends before the action is executed, the execution is canceled.</param>
            <param name="name">A name to identify the event.</param>
            <param name="interval">The grouping interval. The incoming events are grouped until there's a pause of the <paramref name="interval"/> length, and after that the outgoing event is fired. The interval must be not above <see cref="F:JetBrains.Threading.GroupingEvent.MaxInterval"/>.</param>
            <param name="action">Optional. The action for the outgoing event. This action will be executed on the primaty thread and under the <see cref="T:JetBrains.Threading.ReentrancyGuard"/>. If you omit this action, advise the <see cref="P:JetBrains.Threading.GroupingEvent.Outgoing"/> event on the return value.</param>
            <returns>The event on which the incoming events can be fired. Must be disposed of.</returns>
        </member>
        <member name="M:JetBrains.Threading.IThreadingEx.QueueRecurring(JetBrains.Threading.IThreading,System.String,System.TimeSpan,System.Action)">
            <summary>
            <para>Queues the action to execute asynchronously on the <see cref="P:JetBrains.Threading.IThreading.Dispatcher">primary thread</see> in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see> at recurring intervals. Can be used on the primary thread only.</para>
            <para>Returns a token that cancels the recurring action execution. This token must be eventually disposed of.</para>
            <para>When the application gets inactive, the action is executed once, and then suspends until the application gets activated again.</para>
            <para>A <see cref="T:JetBrains.Threading.ReentrancyGuard"/> is preventing reentrancy between the actions.</para>
            </summary>
            <param name="thіs"></param>
            <param name="name">The name for the task.</param>
            <param name="action">The action to execute. Exceptions will be trapped.</param>
            <param name="interval">A non-negative time interval.</param>
        </member>
        <member name="M:JetBrains.Threading.IThreadingEx.QueueRecurring(JetBrains.Threading.IThreading,JetBrains.DataFlow.Lifetime,System.String,System.TimeSpan,System.Action)">
            <summary>
            <para>Queues the action to execute asynchronously on the <see cref="P:JetBrains.Threading.IThreading.Dispatcher">primary thread</see> in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see> at recurring intervals. Can be used on the primary thread only.</para>
            <para>Returns a token that cancels the recurring action execution. This token must be eventually disposed of.</para>
            <para>When the application gets inactive, the action is executed once, and then suspends until the application gets activated again.</para>
            <para>A <see cref="T:JetBrains.Threading.ReentrancyGuard"/> is preventing reentrancy between the actions.</para>
            </summary>
            <param name="thіs"></param>
            <param name="lifetime">Limiting lifetime. If the lifetime ends before the action is executed, the execution is canceled.</param>
            <param name="name">The name for the task.</param>
            <param name="action">The action to execute. Exceptions will be trapped.</param>
            <param name="interval">A non-negative time interval.</param>
        </member>
        <member name="M:JetBrains.Threading.IThreadingEx.ExecuteOrQueueWhenNotGuarded(JetBrains.Threading.IThreading,JetBrains.DataFlow.Lifetime,System.String,System.Action)">
            <summary>
            Executes the activity at the moment when there's no <see cref="T:JetBrains.Threading.ReentrancyGuard"/> running.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Threading.MultiCoreFiberStrategy.Disable">
            <summary>
            Do not use multi-core fibers
            </summary>
        </member>
        <member name="F:JetBrains.Application.Threading.MultiCoreFiberStrategy.Normal">
            <summary>
            Regular fiber usage. Number of fibers equals to processur number
            </summary>
        </member>
        <member name="F:JetBrains.Application.Threading.MultiCoreFiberStrategy.Agressive">
            <summary>
            Agressive fiber usage. Number od fibers is twice processor count
            </summary>
        </member>
        <member name="M:JetBrains.Application.Threading.IMultiCoreFibers.EnqueueJob(System.Action)">
            <summary>
            Add job to the end fof the queue
            </summary>
        </member>
        <member name="M:JetBrains.Application.Threading.IMultiCoreFibers.EnqueuePriorityJob(System.Action)">
            <summary>
            Add job to the beginning fof the queue
            </summary>
        </member>
        <member name="T:JetBrains.Application.Threading.MultiCoreFibersPool">
            <summary>
            Utility class to parallelize jobs on multiple processor cores
            </summary>
        </member>
        <member name="T:JetBrains.UI.CrossFramework.EitherControl">
            <summary>
            Adapts the WinForms and Avalon controls to one another.
            </summary>
        </member>
        <member name="F:JetBrains.UI.CrossFramework.EitherControl.myControl">
            <summary>
            Stores the WinForms control, if explicitly inited.
            <see cref="F:JetBrains.UI.CrossFramework.EitherControl.myControl"/> and <see cref="F:JetBrains.UI.CrossFramework.EitherControl.myElement"/> are mutually exclusive.
            </summary>
        </member>
        <member name="F:JetBrains.UI.CrossFramework.EitherControl.myElement">
            <summary>
            Stores the Avalon element, if explicitly inited.
            <see cref="F:JetBrains.UI.CrossFramework.EitherControl.myControl"/> and <see cref="F:JetBrains.UI.CrossFramework.EitherControl.myElement"/> are mutually exclusive.
            </summary>
        </member>
        <member name="F:JetBrains.UI.CrossFramework.EitherControl.myElementHost">
            <summary>
            Stores the element host that adapts an Avalon control to the WinForms host, in case we were created with an Avalon control. Lazy-created.
            </summary>
        </member>
        <member name="F:JetBrains.UI.CrossFramework.EitherControl.myWindowsFormsHost">
            <summary>
            Stores the winforms host that adapts a WinForms control to the Avalon host, in case we were created with a WinForms control. Lazy-created.
            </summary>
        </member>
        <member name="F:JetBrains.UI.CrossFramework.EitherControl.myAutomation">
            <summary>
            The automation (viewmodel) object to which a data template should be applied to present it correctly.
            </summary>
        </member>
        <member name="M:JetBrains.UI.CrossFramework.EitherControl.#ctor(System.Windows.Forms.Control)">
            <summary>
            Initializes from a WinForms control.
            </summary>
        </member>
        <member name="M:JetBrains.UI.CrossFramework.EitherControl.#ctor(System.Windows.UIElement)">
            <summary>
            Initializes from an Avalon element.
            </summary>
        </member>
        <member name="M:JetBrains.UI.CrossFramework.EitherControl.#ctor(JetBrains.UI.Wpf.IAutomation)">
            <summary>
            Initializes from an Avalon element.
            </summary>
        </member>
        <member name="M:JetBrains.UI.CrossFramework.EitherControl.FromObject(System.Object)">
            <summary>
            Detects the control type, throws if neither. Calls the appropriate ctor.
            </summary>
        </member>
        <member name="M:JetBrains.UI.CrossFramework.EitherControl.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.UI.CrossFramework.EitherControl.Control">
            <summary>
            Gets the contained either-control as a Windows Forms control, creating a wrapper as needed.
            </summary>
        </member>
        <member name="P:JetBrains.UI.CrossFramework.EitherControl.Element">
            <summary>
            Gets the contained either-control as an Avalon UI element, creating a wrapper as needed.
            </summary>
        </member>
        <member name="P:JetBrains.UI.CrossFramework.EitherControl.IsAvalon">
            <summary>
            Gets whether this natively is an Avalon Element (or an Automation object), and using it as a WinForms Control will cause wrapping into a <see cref="T:System.Windows.Forms.Integration.ElementHost"/>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.CrossFramework.EitherControl.IsDisposed">
            <summary>
            Gets whether the WinForms controls have been disposed of.
            </summary>
        </member>
        <member name="P:JetBrains.UI.CrossFramework.EitherControl.IsWinForms">
            <summary>
            Gets whether this natively is a WinForms Control, and using it as an Avalon Element will cause wrapping into a <see cref="T:System.Windows.Forms.Integration.WindowsFormsHost"/>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.CrossFramework.EitherControl.IsAutomation">
            <summary>
            <para>Gets whether this control is given as an automation object and should be placed as a content into a content control to be presented correctly.</para>
            <para>Note that getting such a control as a WinForms control will probably not work correctly.</para>
            </summary>
        </member>
        <member name="P:JetBrains.UI.CrossFramework.EitherControl.IsWrapperCreated">
            <summary>
            Gets whether this control was ever requested in a non-native type, for which a wrapper has been created.
            If you'd like to be more specific about which kind of wrapper was created, it can be deduced from the <see cref="P:JetBrains.UI.CrossFramework.EitherControl.IsAvalon"/>/<see cref="P:JetBrains.UI.CrossFramework.EitherControl.IsWinForms"/> properties.
            </summary>
        </member>
        <member name="P:JetBrains.UI.CrossFramework.EitherControl.Automation">
            <summary>
            Returns the automation object if incapsulated by this control. It is never autogenerated.
            </summary>
        </member>
        <member name="T:JetBrains.UI.CrossFramework.EitherControl.DockedWindowsFormsHost">
            <summary>
            Represents workaround for such cases when Windows Forms 
            control is docked or anchored to all availbale space
            </summary>
        </member>
        <member name="T:JetBrains.UI.Wpf.IAutomation">
            <summary>
            Base interface for Automation Objects (roughly corresponding to the ViewModel tier of MVVM) which would like to participate in autodiscovery of automation object views.
            </summary>
            <remarks>The <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> is a dummy inclusion to avoid memory leaks on part of WPF because it would use <see cref="T:System.ComponentModel.TypeDescriptor"/>'s means for tracking possible value changes in absence of this interface, which causes the automation objects to be leaked over eternal references from static objects.</remarks>
        </member>
        <member name="T:JetBrains.UI.Wpf.AAutomation">
            <summary>
            Base implementation of <see cref="T:JetBrains.UI.Wpf.IAutomation"/> which handles dummy-implementing the <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface. You may use this as a base if you would not like to implement the interface member in your own code.
            </summary>
        </member>
        <member name="T:JetBrains.Application.ExceptionReport.StoringExceptionReportService">
            <summary>
            Stores all of the reported exceptions (with either reporting method) without showing them to the user.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Defines">
             <summary>Pre-compile-time defined constants that emulate the C++ #define that has a value.</summary>
            <remarks>The set of #defines and their default values are given in an MSBuild file. The defauls could be overridden on the build server.</remarks>
        </member>
        <member name="F:JetBrains.Application.Defines.CompanyName">
             <summary>
              <para>
                <c>#define CompanyName JetBrains</c>
              </para>
              <para>Short company name.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.DateTimeForSubscriptionCheck">
             <summary>
              <para>
                <c>#define DateTimeForSubscriptionCheck </c>
              </para>
              <para>The date when the recent product's 2-digit version is released. Used for subscription license check.</para>
              <para>If the date is not set, product build time is used.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.DateTimeProductBirth">
             <summary>
              <para>
                <c>#define DateTimeProductBirth 2009-07-13</c>
              </para>
              <para>The date when the product was founded. Used for the lower copyright year and so on.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.GuidProductUpgradeCodeInstallationCenter">
             <summary>
              <para>
                <c>#define GuidProductUpgradeCodeInstallationCenter {DF895576-40DD-4008-A845-E18D5A796D0E}</c>
              </para>
              <para>Upgrade Code for the Installation Center family setups. In use starting with Platform-4.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.GuidVsActionsCommandSet">
             <summary>
              <para>
                <c>#define GuidVsActionsCommandSet {440D4099-5E59-4754-8169-AA01124DB1B8}</c>
              </para>
              <para>GUID for the command set of the product actions defined in Actions.Xml.
                 Each updatable action gets its GUID:ID pair with this GUID (this includes both action groups and executable actions).
                 Not sure about actions-with-group, though. 
                 In a VS-integrated product, must be overridden with a meaningful GUID.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.GuidVsDynamicCommandSet">
             <summary>
              <para>
                <c>#define GuidVsDynamicCommandSet {2C8417FA-DB9F-4E46-991E-9D886256A28E}</c>
              </para>
              <para>Command set GUID for the dynamic commands to be registered by the product at runtime. 
                In a VS-integrated product, must be overridden with a meaningful GUID.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.GuidVsGroupsCommandSet">
             <summary>
              <para>
                <c>#define GuidVsGroupsCommandSet {7FDFDEA5-CE22-4783-BABC-EA7F4EF137D3}</c>
              </para>
              <para>Command set GUID for the VS Command Groups that are generated to accomodate commands (created from IExecutableActions) in menus (created from IActionGroups).
                The IDs are entirely autogenerated by VSCT/CTO tool. 
                In a VS-integrated product, must be overridden with a meaningful GUID.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.GuidVsPackageCoClass">
             <summary>
              <para>
                <c>#define GuidVsPackageCoClass {7FFD1A80-7A5A-49B2-A39B-491C750984FF}</c>
              </para>
              <para>GUID of the VS Package COM object CoClass. Used on the autogenerated VS package class, and everywhere in the Registry. 
                In a VS-integrated product, must be overridden with a meaningful GUID.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.IsDotCover">
             <summary>
              <para>
                <c>#define IsDotCover True</c>
              </para>
              <para>Demo Define.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.IsModeAnnotateCallStacks">
             <summary>
              <para>
                <c>#define IsModeAnnotateCallStacks False</c>
              </para>
              <para>Whether call stacks should be annotated when calling standard object methods. If there's a graph of standard objects identifyable only by names (eg IProperty, ICollection, ISignal, etc), a callstack of their interaction does not give out the names of the entities, unless this option is turned on. Has a perf impact.</para>
              <para>Default is ON. OFF for production builds.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.IsModeAssert">
             <summary>
              <para>
                <c>#define IsModeAssert False</c>
              </para>
              <para>Whether debug asserts should be active and throw runtime exceptions.</para>
              <para>Default is ON. OFF for production builds.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.IsModeReportExceptions">
             <summary>
              <para>
                <c>#define IsModeReportExceptions False</c>
              </para>
              <para>Whether exceptions are shown to the users. When OFF, the exceptions are silently omitted.</para>
              <para>Default is ON. OFF for production builds.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.IsModeStatistics">
             <summary>
              <para>
                <c>#define IsModeStatistics False</c>
              </para>
              <para>Whether statistics should be collected by the Statistics class.</para>
              <para>Default is OFF.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.IsMsiIncludePdb">
             <summary>
              <para>
                <c>#define IsMsiIncludePdb False</c>
              </para>
              <para>Whether PDBs for product binaries should be packed into the Setup.</para>
              <para>If True, it is an error if a PDB is missing.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.IsMsiIncludeXmlDoc">
             <summary>
              <para>
                <c>#define IsMsiIncludeXmlDoc True</c>
              </para>
              <para>Whether XmlDocs for product binaries should be packed into the Setup.</para>
              <para>If True, it is an error if an XmlDoc file is missing.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.IsMsiProductBinariesStrongName">
             <summary>
              <para>
                <c>#define IsMsiProductBinariesStrongName True</c>
              </para>
              <para>Whether product binaries packed into MSI must have strong names. If True, Setup build will fail unless assemblies have strong names.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.IsReleaseLicenseAgreement">
             <summary>
              <para>
                <c>#define IsReleaseLicenseAgreement True</c>
              </para>
              <para>Whether the Release license RTF file should be embedded into the installer. Default is False, which takes the pre-release file.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.LicenseProductFamily">
             <summary>
              <para>
                <c>#define LicenseProductFamily 59BB7CF0-D203-4E54-9A5F-04FBB1AEBCD4</c>
              </para>
              <para>A license GUID identifying the product family of the license. Now as we're using version numbers in the license (unlike early versions of ReSharper), this should be persisted throughout the product lifetime.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.LicenseSeed">
             <summary>
              <para>
                <c>#define LicenseSeed RLA90VMnIfMXmT4jbUVOo64qnJqs6APs7SgNXcQVoeeLMp5BpmU4fdw+impX+Wpd</c>
              </para>
              <para>The license state written to the Registry by the installer, which provides for a free trial.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.LicenseSupportIdentifier">
             <summary>
              <para>
                <c>#define LicenseSupportIdentifier 26E2C523-24CE-42F7-A0D9-1C6251B72772</c>
              </para>
              <para>An identifier for the evaluation license. Change it to reset the evaluation period.</para>
              <para>Note: do not change LicenseSupportIdentifier here, edit the property on TeamCity instead.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.ModeAnnotateCallStacksName">
             <summary>
              <para>
                <c>#define ModeAnnotateCallStacksName JET_MODE_ANNOTATE_CALL_STACKS</c>
              </para>
              <para>Name of the IsModeAssert-induced conditional compilation symbol.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.ModeAssertName">
             <summary>
              <para>
                <c>#define ModeAssertName JET_MODE_ASSERT</c>
              </para>
              <para>Name of the IsModeAssert-induced conditional compilation symbol.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.ModeReportExceptionsName">
             <summary>
              <para>
                <c>#define ModeReportExceptionsName JET_MODE_REPORT_EXCEPTIONS</c>
              </para>
              <para>Name of the IsModeReportExceptions-induced conditional compilation symbol.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.ModeStatisticsName">
             <summary>
              <para>
                <c>#define ModeStatisticsName JET_MODE_STATISTICS</c>
              </para>
              <para>Name of the IsModeAssert-induced conditional compilation symbol.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.MsiSupportedVsVersionsList">
             <summary>
              <para>
                <c>#define MsiSupportedVsVersionsList 8.0;9.0;10.0;11.0</c>
              </para>
              <para>The list of VS Versions the installer should be able to install. Note that adding a new version requires modification of WiX code (and maybe some of the C++ code too). Removing versions from this list should generally go smoothly. Must follow the C++ vs versions lsit format, which is semicolon-separater major.minor.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.NetfxRequiredVersionBuild">
             <summary>
              <para>
                <c>#define NetfxRequiredVersionBuild 0</c>
              </para>
              <para>The minimum .NET Framework version (Build component) required for installing &amp; runnning this product. The platform default is the minimum version required by the platform itself. Usually it's the same for the product.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.NetfxRequiredVersionMajor">
             <summary>
              <para>
                <c>#define NetfxRequiredVersionMajor 3</c>
              </para>
              <para>The minimum .NET Framework version (Major component) required for installing &amp; runnning this product. The platform default is the minimum version required by the platform itself. Usually it's the same for the product.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.NetfxRequiredVersionMinor">
             <summary>
              <para>
                <c>#define NetfxRequiredVersionMinor 5</c>
              </para>
              <para>The minimum .NET Framework version (Minor component) required for installing &amp; runnning this product. The platform default is the minimum version required by the platform itself. Usually it's the same for the product.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.NetfxRequiredVersionRevision">
             <summary>
              <para>
                <c>#define NetfxRequiredVersionRevision 0</c>
              </para>
              <para>The minimum .NET Framework version (Revision component) required for installing &amp; runnning this product. The platform default is the minimum version required by the platform itself. Usually it's the same for the product.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.NumLicenseAppVersion">
             <summary>
              <para>
                <c>#define NumLicenseAppVersion 2002</c>
              </para>
              <para>Application version for the licensing subsystem. Usually changes along with the ProductVersionMajor, but has its own numbering plan.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.NumLicenseFeedbackRequestDays">
             <summary>
              <para>
                <c>#define NumLicenseFeedbackRequestDays 10</c>
              </para>
              <para>Number of days after installation and before feedback of whatever kind is requested.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.NumLicenseFreeTrialDays">
             <summary>
              <para>
                <c>#define NumLicenseFreeTrialDays 30</c>
              </para>
              <para>Free trial days for a newly-installed product.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.NumLicenseLeftDaysNotification">
             <summary>
              <para>
                <c>#define NumLicenseLeftDaysNotification 3</c>
              </para>
              <para>Number of days before license expires to notify the user of that.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.NumTimeBombDays">
             <summary>
              <para>
                <c>#define NumTimeBombDays 0</c>
              </para>
              <para>The product will be inoperational when this time since build date expires. 0 means never expire (release mode), which is the default.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.NUnitCpu">
             <summary>
              <para>
                <c>#define NUnitCpu x86</c>
              </para>
              <para>CPU platform of the NUnit runner process. Tests will be executed in this environment. Values: x86, x64, ANY.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.NUnitInParallel">
             <summary>
              <para>
                <c>#define NUnitInParallel True</c>
              </para>
              <para>Allows running NUnit in parallel (one process per assembly, max CPU-count processes total).</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.NUnitRuntime">
             <summary>
              <para>
                <c>#define NUnitRuntime v4.0</c>
              </para>
              <para>CLR version of the NUnit runner process. Tests will be executed in this environment. Values: v1.1, v2.0, v4.0, ANY.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.NUnitVersion">
             <summary>
              <para>
                <c>#define NUnitVersion NUnit-2.6.1</c>
              </para>
              <para>Version of the NUnit runner used on TeamCity server. The special ReSharper make does better formatting of exception stack traces (without reversing the stacks).</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.PragmaOnce_Platform_Defines_Targets">
             <summary>
              <para>
                <c>#define PragmaOnce_Platform_Defines_Targets True</c>
              </para>
              <para>Pragma Once.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.PragmaOnce_Product_Defines_Targets">
             <summary>
              <para>
                <c>#define PragmaOnce_Product_Defines_Targets True</c>
              </para>
              <para>Pragma Once.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.ProductDisplayName">
             <summary>
              <para>
                <c>#define ProductDisplayName dotCover</c>
              </para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.ProductFullName">
             <summary>
              <para>
                <c>#define ProductFullName dotCover 2.2</c>
              </para>
              <para>This full name is actually displayed in the User Interface in the About Boxes and such.
                  It should include the short product name and the marketing version of the product.
                  The bugfix upgate versions are visible thru this field only (eg “ProductName + " 3.0.2"”) and do not get into the actual technical file versions. Those can be found in the ProductInformation file linked into each of the projects.</para>
              <para>You MUST NOT use this define where an Application Descriptor is available (this includes any time when Shell is running). This is ONLY 
                for out-of-shell and build-time uses.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.ProductName">
             <summary>
              <para>
                <c>#define ProductName dotCover</c>
              </para>
              <para>Name of the current product. If there're multiple products built on these sources, their least common generic name.</para>
              <para>The short ID-like product name, without any version suffixes.</para>
              <para>You MUST NOT use this define where an Application Descriptor is available (this includes any time when Shell is running). This is ONLY 
                for out-of-shell and build-time uses.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.ProductStandaloneApplicationCaps">
             <summary>
              <para>
                <c>#define ProductStandaloneApplicationCaps None</c>
              </para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.ProductUpgradeCodeLegacyVS0800">
             <summary>
              <para>
                <c>#define ProductUpgradeCodeLegacyVS0800 </c>
              </para>
              <para>Main historical Upgrade Code for the R# product line. In 3.0 era, was used by the VS80 branch only. Not used by the new products.</para>
              <para>Used by Installation Centers for detecting pre-Platform-4 products in VS80.</para>
              <para>Empty by default. Not a GUID type just to allow empty string values.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.ProductUpgradeCodeLegacyVS0900">
             <summary>
              <para>
                <c>#define ProductUpgradeCodeLegacyVS0900 </c>
              </para>
              <para>Side Upgrade Code for the R# products. Was in use in the 3.0 era only, was used by the VS90 branch that had an upgrade line separate from that of VS80. Should be checked for when detecting older versions.</para>
              <para>Used by Installation Centers for detecting pre-Platform-4 products in VS90.</para>
              <para>Empty by default. Not a GUID type just to allow empty string values.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.ProductUpgradeCodeLegacyVS1000">
             <summary>
              <para>
                <c>#define ProductUpgradeCodeLegacyVS1000 </c>
              </para>
              <para>Same as other ProductUpgradeCodeLegacy, but empty in all the products. Introduced for safe looping thru VS versions. Not a GUID type just to allow empty string values.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.ProductVisualStudioIntegrationCaps">
             <summary>
              <para>
                <c>#define ProductVisualStudioIntegrationCaps Optional</c>
              </para>
              <para>A required parameter of a platform-based MSI Setup which defines the VS integration capabilities of the product.</para>
              <para>Defines whether the installer should suggest integrating the product into Visual Studio. Possible values are:</para>
              <para>“None” — the product has no VS integration capabilities. Example: early versions of some products like DotTrace Memory, Peek.</para>
              <para>“Optional” — the product can be used without VS, but also provides VS integration. Example: DotTrace Performance.</para>
              <para>“Required” — the product only exists as a VS extension and usually should not be installed without VS integration. Example: ReSharper.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.SccRevision">
             <summary>
              <para>
                <c>#define SccRevision CompiledWithoutBuildServer</c>
              </para>
              <para>Source code control revision string, if available. For a single SVN root, should be the revision number; for complicated cases — a freehand string exposing the source code control state.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.UriBuy">
             <summary>
              <para>
                <c>#define UriBuy http://www.jetbrains.com/dotcover/buy/</c>
              </para>
              <para>URI of the Webpage where the user could buy the product.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.UriCompany">
             <summary>
              <para>
                <c>#define UriCompany http://www.jetbrains.com</c>
              </para>
              <para>URI of the company Website.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.UriEvaluate">
             <summary>
              <para>
                <c>#define UriEvaluate http://www.jetbrains.com/dotcover/download/</c>
              </para>
              <para>URI of the Webpage where the user can download an evaluation version of the product.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.UriProduct">
             <summary>
              <para>
                <c>#define UriProduct http://www.jetbrains.com/dotcover/</c>
              </para>
              <para>Main product webpage URI. Also used for ARPURLINFOABOUT in the installer.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.UriProductCommunityNewsgroups">
             <summary>
              <para>
                <c>#define UriProductCommunityNewsgroups news://news.jetbrains.com/jetbrains.dotcover.community</c>
              </para>
              <para>URI to the product community (support/discussion) newsgroups.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.UriProductHelp">
             <summary>
              <para>
                <c>#define UriProductHelp http://www.jetbrains.com/support/dotcover/index.html</c>
              </para>
              <para>URI to Product Help. Used for Online F1 in the product and ARPHELPLINK in the installer.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.UriProductSupportEmail">
             <summary>
              <para>
                <c>#define UriProductSupportEmail mailto:support@jetbrains.com</c>
              </para>
              <para>Email to request for product support. The default is suitable for all JetBrains products.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.UriProductUninstallFeedback">
             <summary>
              <para>
                <c>#define UriProductUninstallFeedback http://www.jetbrains.com/dotcover/uninstall/dotcover.jsp</c>
              </para>
              <para>An URI to submit the Uninstall Feedback from the installer.</para>
              <para>This URI has query string parameters that are defined in the installer itself (one of its CAs).</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.UriProductUpdateInfoForInstaller">
             <summary>
              <para>
                <c>#define UriProductUpdateInfoForInstaller http://blogs.jetbrains.com/dotnet/category/news/</c>
              </para>
              <para>Installer's ARPURLUPDATEINFO. Default is applicable for dotnet products.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.UriUpdatesFilterXslt">
             <summary>
              <para>
                <c>#define UriUpdatesFilterXslt http://www.jetbrains.com/dotcover/updates/updates.dotcover.xslt</c>
              </para>
              <para>URI to get the XSLT with updates info from (see UpdatesManager).</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.VsPackageLoadKey">
             <summary>
              <para>
                <c>#define VsPackageLoadKey JetBrains s.r.o.;dotCover;2.2;standard;DMHKK0ETMTR2PMMMMJQ0QCZ1MCAKMPQJKAQPKAHID1PTQ9E1KKHIIPI1MTE3E2M0D1DQH1Q0R0PAPHKIEKC1H9QTADRRP9MECMHCKZI1KTMMQ8I9E3J1QKZREIRQEAP9</c>
              </para>
              <para>VS PLK, as received from the Microsoft website. See “Changing Product Name and Version SOP” on how to do that. 
            		Format: “CompanyName;ProductName;ProductVersion2;VsMinEdition;PLK”. See VsPackageClassEmitter::PackageInfo for format details.</para>
              <para>VS PLK, as received from the Microsoft website. See "Changing Product Name and Version SOP" on how to do that. 
                Format: "CompanyName;ProductName;ProductVersion2;VsMinEdition;PLK". See VsPackageClassEmitter::PackageInfo for format details.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.Defines.Const">
             <summary>Literal versions of the properties.</summary>
            <remarks>Use these const fields only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly.</remarks>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.CompanyName">
             <summary>
              <para>
                <c>#define CompanyName JetBrains</c>
              </para>
              <para>Short company name.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.DateTimeForSubscriptionCheck">
             <summary>
              <para>
                <c>#define DateTimeForSubscriptionCheck </c>
              </para>
              <para>The date when the recent product's 2-digit version is released. Used for subscription license check.</para>
              <para>If the date is not set, product build time is used.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.DateTimeProductBirth">
             <summary>
              <para>
                <c>#define DateTimeProductBirth 2009-07-13</c>
              </para>
              <para>The date when the product was founded. Used for the lower copyright year and so on.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.GuidProductUpgradeCodeInstallationCenter">
             <summary>
              <para>
                <c>#define GuidProductUpgradeCodeInstallationCenter {DF895576-40DD-4008-A845-E18D5A796D0E}</c>
              </para>
              <para>Upgrade Code for the Installation Center family setups. In use starting with Platform-4.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.GuidVsActionsCommandSet">
             <summary>
              <para>
                <c>#define GuidVsActionsCommandSet {440D4099-5E59-4754-8169-AA01124DB1B8}</c>
              </para>
              <para>GUID for the command set of the product actions defined in Actions.Xml.
                 Each updatable action gets its GUID:ID pair with this GUID (this includes both action groups and executable actions).
                 Not sure about actions-with-group, though. 
                 In a VS-integrated product, must be overridden with a meaningful GUID.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.GuidVsDynamicCommandSet">
             <summary>
              <para>
                <c>#define GuidVsDynamicCommandSet {2C8417FA-DB9F-4E46-991E-9D886256A28E}</c>
              </para>
              <para>Command set GUID for the dynamic commands to be registered by the product at runtime. 
                In a VS-integrated product, must be overridden with a meaningful GUID.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.GuidVsGroupsCommandSet">
             <summary>
              <para>
                <c>#define GuidVsGroupsCommandSet {7FDFDEA5-CE22-4783-BABC-EA7F4EF137D3}</c>
              </para>
              <para>Command set GUID for the VS Command Groups that are generated to accomodate commands (created from IExecutableActions) in menus (created from IActionGroups).
                The IDs are entirely autogenerated by VSCT/CTO tool. 
                In a VS-integrated product, must be overridden with a meaningful GUID.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.GuidVsPackageCoClass">
             <summary>
              <para>
                <c>#define GuidVsPackageCoClass {7FFD1A80-7A5A-49B2-A39B-491C750984FF}</c>
              </para>
              <para>GUID of the VS Package COM object CoClass. Used on the autogenerated VS package class, and everywhere in the Registry. 
                In a VS-integrated product, must be overridden with a meaningful GUID.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.IsDotCover">
             <summary>
              <para>
                <c>#define IsDotCover True</c>
              </para>
              <para>Demo Define.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.IsModeAnnotateCallStacks">
             <summary>
              <para>
                <c>#define IsModeAnnotateCallStacks False</c>
              </para>
              <para>Whether call stacks should be annotated when calling standard object methods. If there's a graph of standard objects identifyable only by names (eg IProperty, ICollection, ISignal, etc), a callstack of their interaction does not give out the names of the entities, unless this option is turned on. Has a perf impact.</para>
              <para>Default is ON. OFF for production builds.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.IsModeAssert">
             <summary>
              <para>
                <c>#define IsModeAssert False</c>
              </para>
              <para>Whether debug asserts should be active and throw runtime exceptions.</para>
              <para>Default is ON. OFF for production builds.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.IsModeReportExceptions">
             <summary>
              <para>
                <c>#define IsModeReportExceptions False</c>
              </para>
              <para>Whether exceptions are shown to the users. When OFF, the exceptions are silently omitted.</para>
              <para>Default is ON. OFF for production builds.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.IsModeStatistics">
             <summary>
              <para>
                <c>#define IsModeStatistics False</c>
              </para>
              <para>Whether statistics should be collected by the Statistics class.</para>
              <para>Default is OFF.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.IsMsiIncludePdb">
             <summary>
              <para>
                <c>#define IsMsiIncludePdb False</c>
              </para>
              <para>Whether PDBs for product binaries should be packed into the Setup.</para>
              <para>If True, it is an error if a PDB is missing.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.IsMsiIncludeXmlDoc">
             <summary>
              <para>
                <c>#define IsMsiIncludeXmlDoc True</c>
              </para>
              <para>Whether XmlDocs for product binaries should be packed into the Setup.</para>
              <para>If True, it is an error if an XmlDoc file is missing.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.IsMsiProductBinariesStrongName">
             <summary>
              <para>
                <c>#define IsMsiProductBinariesStrongName True</c>
              </para>
              <para>Whether product binaries packed into MSI must have strong names. If True, Setup build will fail unless assemblies have strong names.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.IsReleaseLicenseAgreement">
             <summary>
              <para>
                <c>#define IsReleaseLicenseAgreement True</c>
              </para>
              <para>Whether the Release license RTF file should be embedded into the installer. Default is False, which takes the pre-release file.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.LicenseProductFamily">
             <summary>
              <para>
                <c>#define LicenseProductFamily 59BB7CF0-D203-4E54-9A5F-04FBB1AEBCD4</c>
              </para>
              <para>A license GUID identifying the product family of the license. Now as we're using version numbers in the license (unlike early versions of ReSharper), this should be persisted throughout the product lifetime.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.LicenseSeed">
             <summary>
              <para>
                <c>#define LicenseSeed RLA90VMnIfMXmT4jbUVOo64qnJqs6APs7SgNXcQVoeeLMp5BpmU4fdw+impX+Wpd</c>
              </para>
              <para>The license state written to the Registry by the installer, which provides for a free trial.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.LicenseSupportIdentifier">
             <summary>
              <para>
                <c>#define LicenseSupportIdentifier 26E2C523-24CE-42F7-A0D9-1C6251B72772</c>
              </para>
              <para>An identifier for the evaluation license. Change it to reset the evaluation period.</para>
              <para>Note: do not change LicenseSupportIdentifier here, edit the property on TeamCity instead.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.ModeAnnotateCallStacksName">
             <summary>
              <para>
                <c>#define ModeAnnotateCallStacksName JET_MODE_ANNOTATE_CALL_STACKS</c>
              </para>
              <para>Name of the IsModeAssert-induced conditional compilation symbol.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.ModeAssertName">
             <summary>
              <para>
                <c>#define ModeAssertName JET_MODE_ASSERT</c>
              </para>
              <para>Name of the IsModeAssert-induced conditional compilation symbol.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.ModeReportExceptionsName">
             <summary>
              <para>
                <c>#define ModeReportExceptionsName JET_MODE_REPORT_EXCEPTIONS</c>
              </para>
              <para>Name of the IsModeReportExceptions-induced conditional compilation symbol.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.ModeStatisticsName">
             <summary>
              <para>
                <c>#define ModeStatisticsName JET_MODE_STATISTICS</c>
              </para>
              <para>Name of the IsModeAssert-induced conditional compilation symbol.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.MsiSupportedVsVersionsList">
             <summary>
              <para>
                <c>#define MsiSupportedVsVersionsList 8.0;9.0;10.0;11.0</c>
              </para>
              <para>The list of VS Versions the installer should be able to install. Note that adding a new version requires modification of WiX code (and maybe some of the C++ code too). Removing versions from this list should generally go smoothly. Must follow the C++ vs versions lsit format, which is semicolon-separater major.minor.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.NetfxRequiredVersionBuild">
             <summary>
              <para>
                <c>#define NetfxRequiredVersionBuild 0</c>
              </para>
              <para>The minimum .NET Framework version (Build component) required for installing &amp; runnning this product. The platform default is the minimum version required by the platform itself. Usually it's the same for the product.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.NetfxRequiredVersionMajor">
             <summary>
              <para>
                <c>#define NetfxRequiredVersionMajor 3</c>
              </para>
              <para>The minimum .NET Framework version (Major component) required for installing &amp; runnning this product. The platform default is the minimum version required by the platform itself. Usually it's the same for the product.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.NetfxRequiredVersionMinor">
             <summary>
              <para>
                <c>#define NetfxRequiredVersionMinor 5</c>
              </para>
              <para>The minimum .NET Framework version (Minor component) required for installing &amp; runnning this product. The platform default is the minimum version required by the platform itself. Usually it's the same for the product.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.NetfxRequiredVersionRevision">
             <summary>
              <para>
                <c>#define NetfxRequiredVersionRevision 0</c>
              </para>
              <para>The minimum .NET Framework version (Revision component) required for installing &amp; runnning this product. The platform default is the minimum version required by the platform itself. Usually it's the same for the product.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.NumLicenseAppVersion">
             <summary>
              <para>
                <c>#define NumLicenseAppVersion 2002</c>
              </para>
              <para>Application version for the licensing subsystem. Usually changes along with the ProductVersionMajor, but has its own numbering plan.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.NumLicenseFeedbackRequestDays">
             <summary>
              <para>
                <c>#define NumLicenseFeedbackRequestDays 10</c>
              </para>
              <para>Number of days after installation and before feedback of whatever kind is requested.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.NumLicenseFreeTrialDays">
             <summary>
              <para>
                <c>#define NumLicenseFreeTrialDays 30</c>
              </para>
              <para>Free trial days for a newly-installed product.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.NumLicenseLeftDaysNotification">
             <summary>
              <para>
                <c>#define NumLicenseLeftDaysNotification 3</c>
              </para>
              <para>Number of days before license expires to notify the user of that.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.NumTimeBombDays">
             <summary>
              <para>
                <c>#define NumTimeBombDays 0</c>
              </para>
              <para>The product will be inoperational when this time since build date expires. 0 means never expire (release mode), which is the default.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.NUnitCpu">
             <summary>
              <para>
                <c>#define NUnitCpu x86</c>
              </para>
              <para>CPU platform of the NUnit runner process. Tests will be executed in this environment. Values: x86, x64, ANY.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.NUnitInParallel">
             <summary>
              <para>
                <c>#define NUnitInParallel True</c>
              </para>
              <para>Allows running NUnit in parallel (one process per assembly, max CPU-count processes total).</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.NUnitRuntime">
             <summary>
              <para>
                <c>#define NUnitRuntime v4.0</c>
              </para>
              <para>CLR version of the NUnit runner process. Tests will be executed in this environment. Values: v1.1, v2.0, v4.0, ANY.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.NUnitVersion">
             <summary>
              <para>
                <c>#define NUnitVersion NUnit-2.6.1</c>
              </para>
              <para>Version of the NUnit runner used on TeamCity server. The special ReSharper make does better formatting of exception stack traces (without reversing the stacks).</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.PragmaOnce_Platform_Defines_Targets">
             <summary>
              <para>
                <c>#define PragmaOnce_Platform_Defines_Targets True</c>
              </para>
              <para>Pragma Once.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.PragmaOnce_Product_Defines_Targets">
             <summary>
              <para>
                <c>#define PragmaOnce_Product_Defines_Targets True</c>
              </para>
              <para>Pragma Once.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.ProductDisplayName">
             <summary>
              <para>
                <c>#define ProductDisplayName dotCover</c>
              </para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.ProductFullName">
             <summary>
              <para>
                <c>#define ProductFullName dotCover 2.2</c>
              </para>
              <para>This full name is actually displayed in the User Interface in the About Boxes and such.
                  It should include the short product name and the marketing version of the product.
                  The bugfix upgate versions are visible thru this field only (eg “ProductName + " 3.0.2"”) and do not get into the actual technical file versions. Those can be found in the ProductInformation file linked into each of the projects.</para>
              <para>You MUST NOT use this define where an Application Descriptor is available (this includes any time when Shell is running). This is ONLY 
                for out-of-shell and build-time uses.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.ProductName">
             <summary>
              <para>
                <c>#define ProductName dotCover</c>
              </para>
              <para>Name of the current product. If there're multiple products built on these sources, their least common generic name.</para>
              <para>The short ID-like product name, without any version suffixes.</para>
              <para>You MUST NOT use this define where an Application Descriptor is available (this includes any time when Shell is running). This is ONLY 
                for out-of-shell and build-time uses.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.ProductStandaloneApplicationCaps">
             <summary>
              <para>
                <c>#define ProductStandaloneApplicationCaps None</c>
              </para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.ProductUpgradeCodeLegacyVS0800">
             <summary>
              <para>
                <c>#define ProductUpgradeCodeLegacyVS0800 </c>
              </para>
              <para>Main historical Upgrade Code for the R# product line. In 3.0 era, was used by the VS80 branch only. Not used by the new products.</para>
              <para>Used by Installation Centers for detecting pre-Platform-4 products in VS80.</para>
              <para>Empty by default. Not a GUID type just to allow empty string values.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.ProductUpgradeCodeLegacyVS0900">
             <summary>
              <para>
                <c>#define ProductUpgradeCodeLegacyVS0900 </c>
              </para>
              <para>Side Upgrade Code for the R# products. Was in use in the 3.0 era only, was used by the VS90 branch that had an upgrade line separate from that of VS80. Should be checked for when detecting older versions.</para>
              <para>Used by Installation Centers for detecting pre-Platform-4 products in VS90.</para>
              <para>Empty by default. Not a GUID type just to allow empty string values.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.ProductUpgradeCodeLegacyVS1000">
             <summary>
              <para>
                <c>#define ProductUpgradeCodeLegacyVS1000 </c>
              </para>
              <para>Same as other ProductUpgradeCodeLegacy, but empty in all the products. Introduced for safe looping thru VS versions. Not a GUID type just to allow empty string values.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.ProductVisualStudioIntegrationCaps">
             <summary>
              <para>
                <c>#define ProductVisualStudioIntegrationCaps Optional</c>
              </para>
              <para>A required parameter of a platform-based MSI Setup which defines the VS integration capabilities of the product.</para>
              <para>Defines whether the installer should suggest integrating the product into Visual Studio. Possible values are:</para>
              <para>“None” — the product has no VS integration capabilities. Example: early versions of some products like DotTrace Memory, Peek.</para>
              <para>“Optional” — the product can be used without VS, but also provides VS integration. Example: DotTrace Performance.</para>
              <para>“Required” — the product only exists as a VS extension and usually should not be installed without VS integration. Example: ReSharper.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.SccRevision">
             <summary>
              <para>
                <c>#define SccRevision CompiledWithoutBuildServer</c>
              </para>
              <para>Source code control revision string, if available. For a single SVN root, should be the revision number; for complicated cases — a freehand string exposing the source code control state.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.UriBuy">
             <summary>
              <para>
                <c>#define UriBuy http://www.jetbrains.com/dotcover/buy/</c>
              </para>
              <para>URI of the Webpage where the user could buy the product.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.UriCompany">
             <summary>
              <para>
                <c>#define UriCompany http://www.jetbrains.com</c>
              </para>
              <para>URI of the company Website.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.UriEvaluate">
             <summary>
              <para>
                <c>#define UriEvaluate http://www.jetbrains.com/dotcover/download/</c>
              </para>
              <para>URI of the Webpage where the user can download an evaluation version of the product.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.UriProduct">
             <summary>
              <para>
                <c>#define UriProduct http://www.jetbrains.com/dotcover/</c>
              </para>
              <para>Main product webpage URI. Also used for ARPURLINFOABOUT in the installer.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.UriProductCommunityNewsgroups">
             <summary>
              <para>
                <c>#define UriProductCommunityNewsgroups news://news.jetbrains.com/jetbrains.dotcover.community</c>
              </para>
              <para>URI to the product community (support/discussion) newsgroups.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.UriProductHelp">
             <summary>
              <para>
                <c>#define UriProductHelp http://www.jetbrains.com/support/dotcover/index.html</c>
              </para>
              <para>URI to Product Help. Used for Online F1 in the product and ARPHELPLINK in the installer.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.UriProductSupportEmail">
             <summary>
              <para>
                <c>#define UriProductSupportEmail mailto:support@jetbrains.com</c>
              </para>
              <para>Email to request for product support. The default is suitable for all JetBrains products.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.UriProductUninstallFeedback">
             <summary>
              <para>
                <c>#define UriProductUninstallFeedback http://www.jetbrains.com/dotcover/uninstall/dotcover.jsp</c>
              </para>
              <para>An URI to submit the Uninstall Feedback from the installer.</para>
              <para>This URI has query string parameters that are defined in the installer itself (one of its CAs).</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.UriProductUpdateInfoForInstaller">
             <summary>
              <para>
                <c>#define UriProductUpdateInfoForInstaller http://blogs.jetbrains.com/dotnet/category/news/</c>
              </para>
              <para>Installer's ARPURLUPDATEINFO. Default is applicable for dotnet products.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.UriUpdatesFilterXslt">
             <summary>
              <para>
                <c>#define UriUpdatesFilterXslt http://www.jetbrains.com/dotcover/updates/updates.dotcover.xslt</c>
              </para>
              <para>URI to get the XSLT with updates info from (see UpdatesManager).</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.VsPackageLoadKey">
             <summary>
              <para>
                <c>#define VsPackageLoadKey JetBrains s.r.o.;dotCover;2.2;standard;DMHKK0ETMTR2PMMMMJQ0QCZ1MCAKMPQJKAQPKAHID1PTQ9E1KKHIIPI1MTE3E2M0D1DQH1Q0R0PAPHKIEKC1H9QTADRRP9MECMHCKZI1KTMMQ8I9E3J1QKZREIRQEAP9</c>
              </para>
              <para>VS PLK, as received from the Microsoft website. See “Changing Product Name and Version SOP” on how to do that. 
            		Format: “CompanyName;ProductName;ProductVersion2;VsMinEdition;PLK”. See VsPackageClassEmitter::PackageInfo for format details.</para>
              <para>VS PLK, as received from the Microsoft website. See "Changing Product Name and Version SOP" on how to do that. 
                Format: "CompanyName;ProductName;ProductVersion2;VsMinEdition;PLK". See VsPackageClassEmitter::PackageInfo for format details.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
    </members>
</doc>
