<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JetBrains.Platform.dotCover.ProjectModel</name>
    </assembly>
    <members>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons">
             <summary>
              <para>
                <para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/>.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
              <para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
              <h1>XAML</h1>
              <para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
              <para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"/> property to the <see cref="T:JetBrains.UI.Icons.ThemedIconExtension"/> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class) as a parameter.</para>
              <para>Example:</para>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+Assembly}" /&gt;</code>
              <h1>Attributes</h1>
              <para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
              <para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"/> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
              <para>Example:</para>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.Assembly))]</code>
              <h1>CodeBehind</h1>
              <para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
              <para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"/>, statically defined in <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"/> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"/> to use with GDI+ / Windows Forms.</para>
              <para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes — either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> and its extensions for the related facilities.</para>
              <para>Example:</para>
              <code>// Getting IconId identifier object to use with APIs
            IconId iconid = ProjectModelThemedIcons.Assembly.Id;</code>
              <code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = CompiledIconClassAttribute.TryGetCompiledIconClassId(typeof(ProjectModelThemedIcons.Assembly), OnError.Throw);</code>
              <code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
              <code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;ProjectModelThemedIcons.Assembly&gt;()</code>
              <h1>Icons Origin</h1>
              <para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Assembly">
             <summary>
              <para>
                <para>Autogenerated identifier class for the Assembly Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Assembly.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+Assembly}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.Assembly))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.Assembly.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.Assembly&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Assembly.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the Assembly Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Assembly"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+Assembly}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.Assembly))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.Assembly.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.Assembly&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.AssemblyReference">
             <summary>
              <para>
                <para>Autogenerated identifier class for the AssemblyReference Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.AssemblyReference.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+AssemblyReference}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.AssemblyReference))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.AssemblyReference.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.AssemblyReference&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.AssemblyReference.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the AssemblyReference Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.AssemblyReference"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+AssemblyReference}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.AssemblyReference))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.AssemblyReference.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.AssemblyReference&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.CsharpProj">
             <summary>
              <para>
                <para>Autogenerated identifier class for the CsharpProj Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.CsharpProj.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+CsharpProj}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.CsharpProj))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.CsharpProj.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.CsharpProj&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.CsharpProj.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the CsharpProj Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.CsharpProj"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+CsharpProj}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.CsharpProj))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.CsharpProj.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.CsharpProj&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.CsharpProject">
             <summary>
              <para>
                <para>Autogenerated identifier class for the CsharpProject Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.CsharpProject.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+CsharpProject}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.CsharpProject))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.CsharpProject.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.CsharpProject&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.CsharpProject.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the CsharpProject Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.CsharpProject"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+CsharpProject}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.CsharpProject))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.CsharpProject.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.CsharpProject&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Directory">
             <summary>
              <para>
                <para>Autogenerated identifier class for the Directory Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Directory.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+Directory}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.Directory))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.Directory.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.Directory&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Directory.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the Directory Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Directory"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+Directory}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.Directory))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.Directory.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.Directory&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.LayerSolutionPersonal">
             <summary>
              <para>
                <para>Autogenerated identifier class for the LayerSolutionPersonal Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.LayerSolutionPersonal.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+LayerSolutionPersonal}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.LayerSolutionPersonal))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.LayerSolutionPersonal.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.LayerSolutionPersonal&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.LayerSolutionPersonal.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the LayerSolutionPersonal Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.LayerSolutionPersonal"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+LayerSolutionPersonal}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.LayerSolutionPersonal))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.LayerSolutionPersonal.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.LayerSolutionPersonal&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.LayerSolutionShared">
             <summary>
              <para>
                <para>Autogenerated identifier class for the LayerSolutionShared Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.LayerSolutionShared.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+LayerSolutionShared}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.LayerSolutionShared))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.LayerSolutionShared.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.LayerSolutionShared&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.LayerSolutionShared.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the LayerSolutionShared Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.LayerSolutionShared"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+LayerSolutionShared}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.LayerSolutionShared))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.LayerSolutionShared.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.LayerSolutionShared&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.MissingFile">
             <summary>
              <para>
                <para>Autogenerated identifier class for the MissingFile Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.MissingFile.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+MissingFile}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.MissingFile))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.MissingFile.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.MissingFile&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.MissingFile.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the MissingFile Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.MissingFile"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+MissingFile}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.MissingFile))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.MissingFile.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.MissingFile&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.SdkModule">
             <summary>
              <para>
                <para>Autogenerated identifier class for the SdkModule Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.SdkModule.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+SdkModule}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.SdkModule))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.SdkModule.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.SdkModule&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.SdkModule.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the SdkModule Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.SdkModule"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+SdkModule}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.SdkModule))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.SdkModule.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.SdkModule&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.SolutionFolder">
             <summary>
              <para>
                <para>Autogenerated identifier class for the SolutionFolder Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.SolutionFolder.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+SolutionFolder}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.SolutionFolder))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.SolutionFolder.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.SolutionFolder&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.SolutionFolder.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the SolutionFolder Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.SolutionFolder"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+SolutionFolder}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.SolutionFolder))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.SolutionFolder.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.SolutionFolder&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Unknown">
             <summary>
              <para>
                <para>Autogenerated identifier class for the Unknown Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Unknown.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+Unknown}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.Unknown))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.Unknown.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.Unknown&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Unknown.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the Unknown Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Unknown"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+Unknown}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.Unknown))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.Unknown.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.Unknown&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.VbasicProj">
             <summary>
              <para>
                <para>Autogenerated identifier class for the VbasicProj Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.VbasicProj.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+VbasicProj}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.VbasicProj))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.VbasicProj.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.VbasicProj&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.VbasicProj.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the VbasicProj Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.VbasicProj"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+VbasicProj}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.VbasicProj))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.VbasicProj.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.VbasicProj&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.VbasicProject">
             <summary>
              <para>
                <para>Autogenerated identifier class for the VbasicProject Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.VbasicProject.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+VbasicProject}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.VbasicProject))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.VbasicProject.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.VbasicProject&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.VbasicProject.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the VbasicProject Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.VbasicProject"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+VbasicProject}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.VbasicProject))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ProjectModelThemedIcons.VbasicProject.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.VbasicProject&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ProjectModel.Caches.ISolutionCachesConfiguration">
            <summary>
            Determined location of R# cache directory
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Caches.SolutionCachesConfiguration.myTempFolderIfCachesPersistenceIsForbidden">
            <summary>
            Hack not to pollute hdd with SWEA caches - it's too complicated to switch them off
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Configuration.SolutionSettingsComponent.GetSettingsDocument(JetBrains.Application.Configuration.XmlExternalizationScope)">
            <summary>
            Looks for either the current or legacy solution settings.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Configuration.SolutionSettingsComponent.GetSettingsDocument_LegacyVersion(JetBrains.Application.Configuration.XmlExternalizationScope)">
            <summary>
            Looks for the solution settings from the previous version of R#.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.DataContext.DataContextsEx.ToProjectModelElementsDataConstant(JetBrains.ProjectModel.IProjectModelElement)">
            <summary>
            Returns the project model element as the project model elements data constant: a list of one non-Null item, or Null.
            Prevents getting collections with null elements inside.
            In other words, makes it valid for the data rule.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.DataContext.DataContextsEx.ToProjectModelElementsDataConstant(JetBrains.ProjectModel.IProjectModelElement[])">
            <summary>
            Makes sure the project model elements collection does not contain Null items and is non-empty.
            Filters out Nulls, returns Null instead of empty collections.
            In other words, makes it valid for the data rule.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.ProjectFileType.Extensions">
            <summary>
            Do not use directly. Use IProjectFileExtensions.GetExtensions instead.
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.KnownProjectFileType.Name">
            <summary>
            Specifies special ID for services, which has semantic "for any project file type"
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.IFileExtensionMapping.GetFileTypes(System.String)">
            <summary>
            Do not use directly. Use <see cref="M:JetBrains.ProjectModel.IProjectFileExtensions.GetFileType(System.String)"/> instead.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.IFileExtensionMapping.GetExtensions(JetBrains.ProjectModel.ProjectFileType)">
            <summary>
            Do not use directly. Use <see cref="M:JetBrains.ProjectModel.IProjectFileExtensions.GetExtensions(JetBrains.ProjectModel.ProjectFileType)"/> instead.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Properties.IProjectConfiguration.GetOutputDirectory(JetBrains.Util.FileSystemPath)">
            <summary>
            Output path of the configuration, i.e. path where output files are placed
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Properties.IProjectConfiguration.UpdateFrom(JetBrains.ProjectModel.Properties.IProjectConfiguration)">
            <summary>
            Tries updating values from <seealso cref="!:configuration"/> if posiible
            </summary>
            <param name="configuration">Other settings</param>
            <returns>true if values updated, false otherwise</returns>
        </member>
        <member name="P:JetBrains.ProjectModel.Properties.IProjectConfiguration.Project">
            <summary>
            Project which the configuration belongs to.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Properties.IProjectConfiguration.Name">
            <summary>
            Name of the configuration
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.impl.IFrameworkDetectionHelper.GetNetFrameworkDirectory(System.Version)">
            <summary>
            Returns .NET framework directory, usually under .NET Frameworks install root
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.IQuerySolutionCloseHandler.QuerySolutionClose(JetBrains.ProjectModel.ISolution)">
            <summary>
            Implementation returns false when solution can not be closed.
            </summary>
            <returns></returns>
        </member>
        <member name="T:JetBrains.ProjectModel.Impl.ShellFileIcon">
            <summary>
            Gets icons for shell file types.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Impl.ShellFileIcon.Create(JetBrains.Util.FileSystemPath,JetBrains.ProjectModel.Impl.ShellFileIconId.IconSize)">
            <summary>
            Creates an icon identifier which represents the Shell file icon for this file type (determined by file extension).
            Shell is queried for the actual icon image only when this IconID is resolved into an image, so you cannot know in advance whether the specific image is available with Shell when you create the ID here.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Impl.ShellFileIcon.Create(System.String,JetBrains.ProjectModel.Impl.ShellFileIconId.IconSize)">
            <summary>
            Creates an icon identifier which represents the Shell file icon for this file type (determined by file extension).
            Shell is queried for the actual icon image only when this IconID is resolved into an image, so you cannot know in advance whether the specific image is available with Shell when you create the ID here.
            The extension is either with or without the leading dot.
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Impl.ShellFileIconId">
            <summary>
            An ID to the dynamically-generated shell file icon.
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Impl.ShellFileIconId.ExtensionWithDot">
            <summary>
            Lowercase file extension with a leading dot.
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Impl.ShellFileIconId.IconSize.LargeIcon">
            <summary>
            Large in Shell terms, which is usually 32x32.
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Impl.ShellFileIconId.IconSize.SmallIcon">
            <summary>
            Small icon, 16x16.
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.ProjectItemBase">
            <summary>
            Base class for project item implementations
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.IProjectItem">
            <remarks>
            Interface to a project item. Project item is a member of a project's hierarchy
            </remarks>
        </member>
        <member name="T:JetBrains.ProjectModel.IProjectElement">
            <summary>
            Root interface for all objects associated with a project
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.IProjectModelElement">
            <summary>
            Handy root interface for all object of ProjectModel
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.IProjectModelElement.GetProperty(JetBrains.Util.Key)">
            <summary>
            Retrieves the value of a property given the property's name
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.IProjectModelElement.IsValid">
            <summary>
            Returns true if the project item is a member of a valid solution hierarchy.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.IProjectElement.GetProject">
            <summary>
            Gets the project that owns this project element.
            On an <see cref="T:JetBrains.ProjectModel.IProject"/>, returns self.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.IProjectElement.GetPersistentID">
            <summary>
            Returns persistent ID of the project element. This ID remains valid between sessions,
            but does not survive after renaming or moving the element.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.IProjectItem.GetPresentableProjectPath">
            <summary>
            Returns project path as a string containing names of the project items from the root to the item delimited by “<c>/</c>”.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.IProjectItem.ParentFolder">
            <summary>
            Parent item for the item.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.IProjectItem.Location">
            <summary>
            Location of the file associated with the item.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.IProjectItem.Kind">
            <summary>
            Returns the type of the project item.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.IProjectItem.IsLinked">
            <summary>
            Returns true if the project item is linked to its parent folder. This means that the persistent version
            of the item is not located in the persistent version of the parent folder.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectItemBase.DoRename(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.IProjectFolder">
            <summary>
            Represents a folder in a project
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.IProjectFolder.FindProjectItemByLocation(JetBrains.Util.FileSystemPath)">
            <summary>
            Returns random project item inside given folder at the given location.
            Use the method if and only if you're 100% sure there's only one project item expected. 
            Use <see cref="M:JetBrains.ProjectModel.ProjectFolderEx.FindProjectItemsByLocation(JetBrains.ProjectModel.IProjectFolder,JetBrains.Util.FileSystemPath)"/> otherwise.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.IProjectFolder.GetSubItem(System.String)">
            <summary>
            Returns any sub item given the name.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.IProjectFolder.GetSubItems(System.String)">
            <summary>
            Returns all subitems item given the name.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.IProjectFolder.GetSubItems">
            <summary>
            Subitems of the item.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.ProjectFolderImpl.Path">
            <summary>
            This path should be null for projects and solution folders.
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.ISdkModule">
            <summary>
            Incapsulates Sdk Module with sdk content files but not with sdk content assemlbies
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.IProject">
            <remarks>
            Interface to a project
            </remarks>
        </member>
        <member name="T:JetBrains.ProjectModel.IModule">
            <summary>
            Common interface for <see cref="T:JetBrains.ProjectModel.IProject"/> and <see cref="T:JetBrains.ProjectModel.Model2.Assemblies.Interfaces.IAssembly"/>
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.IModule.PlatformID">
            <summary>
            The platform to which the module is targeted. For real project is never null.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.IProject.GetModuleReferences">
            <summary>
            All assembly and project references
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.IProject.ProjectFile">
            <summary>
            Returns project item representing the project file. Can be <c>Null</c> for the misc items project.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.ISdkModule.ContentRootFolder">
            <summary>
            A path to the contents of sdk module. I.e. for windows sdk it is "...\Windows Kits\8.0\References\CommonConfiguration\Neutral"
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.ISdkModule.TargetPlatformData">
            <summary>
            describes the hardware platfrom current module is applicable to
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Impl.StudioProjectData.ProjectLocation">
            <summary>
            Project home directory for Web sites. Project file location for other project types.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Tasks.ISolutionLoadTasksScheduler.ResetTime">
            <summary>
            Time statistics in tick counts
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.model2.Assemblies.Interfaces.IAssemblyFactory.AddRef(JetBrains.ProjectModel.AssemblyReferenceResolveResult,System.String,JetBrains.ProjectModel.PlatformID)">
            <summary>
            Adds assembly to assembly collection
            </summary>
            <param name="resolveResult"></param>
            <param name="holderId">Caller ID</param>
            <param name="platformID">Specific platform id or null to autodetect</param>
        </member>
        <member name="M:JetBrains.ProjectModel.Model2.Assemblies.Impl.Job.Do(JetBrains.Application.Progress.IProgressIndicator)">
            <summary>
            Runs the task. The <paramref name="progress"/> should be used only if the task requires additional progress display (like smooth execution progress or more text messages). Normally, for short-time tasks, the executing engine will handle the progress.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Model2.Assemblies.Impl.Job.Description">
            <summary>
            The individual description of the job. Not included into the status bar cache notifier.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.IProjectModelEditor.AddFile(JetBrains.ProjectModel.IProjectFolder,JetBrains.Util.FileSystemPath)">
            <summary>
            Adds specified file to the project 
            </summary>
            <param name="parentFolder">Parent folder</param>
            <param name="location">Path to the file being added</param>
            <returns>Reference to the new project item</returns>
        </member>
        <member name="M:JetBrains.ProjectModel.IProjectModelEditor.AddFolder(JetBrains.ProjectModel.IProjectFolder,System.String,JetBrains.Util.FileSystemPath)">
            <summary>
            Adds a directory to the project
            </summary>
            /// <param name="parentFolder">Parent folder</param>
            <param name="name">Name of the directory being added</param>
            <param name="folderPath">Path to the directory being added. If null, folderPath equals to parentFolder.Location.Combine(name)</param>
            <returns>Reference to the new project item</returns>
        </member>
        <member name="M:JetBrains.ProjectModel.IProjectModelEditor.Rename(JetBrains.ProjectModel.IProjectItem,System.String)">
            <summary>
            Renames the project item.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.IProjectModelEditor.Move(JetBrains.ProjectModel.IProjectItem,JetBrains.ProjectModel.IProjectFolder)">
            <summary>
            Moves the project item so that it becomes a child of the specified parent.
            </summary>
            <param name="projectItem">Project item to move</param>
            <param name="newParentItem">newParentItem == null means project becomes a top-level one</param>
        </member>
        <member name="M:JetBrains.ProjectModel.IProjectModelEditor.Copy(JetBrains.ProjectModel.IProjectItem,JetBrains.ProjectModel.IProjectFolder)">
            <summary>
            Cpoies the project item so that it's copy becomes a child of the specified parent.
            </summary>
            <param name="projectItem">Project item to copy</param>
            <param name="newParentItem">newParentItem == null means project becomes a top-level one</param>
            <returns>Reference to the new project item</returns>
        </member>
        <member name="M:JetBrains.ProjectModel.IProjectModelEditor.Remove(JetBrains.ProjectModel.IProjectItem)">
            <summary>
            Removes project item.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.IProjectModelEditor.AddModuleReference(JetBrains.ProjectModel.IProject,JetBrains.ProjectModel.IModule)">
            <summary>
            Makes the project reference the specified module
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.IProjectModelEditor.AddAssemblyReference(JetBrains.ProjectModel.IProject,JetBrains.Util.FileSystemPath)">
            <summary>
            Adds the specified library to the project's references
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.IProjectModelEditor.RemoveModuleReference(JetBrains.ProjectModel.IProjectToModuleReference)">
            <summary>
            Removes the specified assembly or project from project's references
            </summary>
            <param name="referenceToRemove"></param>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectExtensions.GetAssemblyReferences(JetBrains.ProjectModel.IProject)">
            <summary>
            All assemblies referenced in the project
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectExtensions.GetProjectReferences(JetBrains.ProjectModel.IProject)">
            <summary>
            All projects referenced in the project
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectExtensions.GetModuleReference(JetBrains.ProjectModel.IProject,System.String)">
            <summary>
            Retrieves module reference by the module name
            </summary>
            <remarks>It is assumed that the name uniquely identifies the module among referenced modules (both projects and assemblies)
            For projects use ProjectReferenceExtension.GetReferencedName
            </remarks>
        </member>
        <member name="M:JetBrains.ProjectModel.Properties.IProjectProperties.UpdateFrom(JetBrains.ProjectModel.Properties.IProjectProperties)">
            <summary>
            Tries updating values from <seealso cref="!:properties"/> if posiible
            </summary>
            <param name="properties">Other properties</param>
            <returns>true if values updated, false otherwise</returns>
        </member>
        <member name="T:JetBrains.ProjectModel.Properties.IBuildSettings">
            <summary>
            Common build settings for all projects
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Properties.IBuildSettings.UpdateFrom(JetBrains.ProjectModel.Properties.IBuildSettings)">
            <summary>
            Tries updating values from <seealso cref="!:settings"/> if posiible
            </summary>
            <param name="settings">Other settings</param>
            <returns>true if values updated, false otherwise</returns>
        </member>
        <member name="M:JetBrains.ProjectModel.Properties.JavaScriptMetroStyle.JavaScriptMetroProjectPropertiesFactory.CreateJavaScriptMetroProjectProperties(JetBrains.ProjectModel.PlatformID,System.Collections.Generic.ICollection{System.Guid},JetBrains.Metadata.Utils.TargetPlatformData)">
            <param name="platformIdVs">platfrom id obtained from VS</param>
            <param name="flavours"> </param>
            <param name="targetPlatformData"> </param>
        </member>
        <member name="T:JetBrains.ProjectModel.Properties.DefaultNamespaceFolderProviderResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Properties.DefaultNamespaceFolderProviderResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Properties.DefaultNamespaceFolderProviderResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.References.Impl.SdkReferenceImpl.#ctor(JetBrains.ProjectModel.IProject,System.Collections.Generic.ICollection{JetBrains.ProjectModel.IProjectToAssemblyReference},JetBrains.ProjectModel.Update.SdkReferences.SdkReferenceInfo)">
            <summary>
            Don't use this ctor directly. Use SdkReferenceFactory instead!
            </summary>
            <param name="project"></param>
            <param name="nestedAssemblyReferences"></param>
            <param name="sdkReferenceInfo"></param>
        </member>
        <member name="T:JetBrains.ProjectModel.model2.References.ReferencesFolder">
            <summary>
            Data class that represents references folder in solution explorer
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Model2.Transaction.IEnsureWritableHandler.IsWritable(JetBrains.ProjectModel.ISolution)">
            <summary>
            Indicates that the structure of the solution, the properties of the solution and the properties of the solution items
            can be modifed
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Model2.Transaction.IEnsureWritableHandler.IsWritable(JetBrains.ProjectModel.IProject)">
            <summary>
            Indicates whether the structure of the project or properties of its items can be modified
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Model2.Transaction.IEnsureWritableHandler.IsWritable(JetBrains.ProjectModel.IProjectFile)">
            <summary>
            Checks if the persistent version of the file is writable
            </summary>
        </member>
        <member name="E:JetBrains.ProjectModel.Model2.Transaction.IEnsureWritableHandler.MakingWritable">
            <summary>
            Raised when files are needed to make writable. The handlers of this event must ensure that the documents are
            really writable.
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.ProjectFolderPath">
            <summary>
            Path for regular project folder or virtual project folder (which is has alias and abolute location)
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.ProjectFolderPath.ShortName">
            <summary>
            Which is regular folder name or alias for virtual folder.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.ProjectFolderPath.ReferencedFolderPath">
            <summary>
            absolute path to virtual folder or Empty
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectFilePath.#ctor(JetBrains.Util.FileSystemPath,JetBrains.Util.FileSystemPath)">
            <summary>
            Combined isLinked...
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ISolutionExplorer.ShowInSolutionExplorer(JetBrains.ProjectModel.IProjectItem,System.Boolean)">
            <summary>
            Shows the Solution Explorer and sets selection to <paramref name="projectItem"/>, if defined.
            </summary>
            <param name="projectItem">A valid project item to select in Solution Explorer, or <c>Null</c> to just activate the Solution Explorer window (if <paramref name="activate"/>).</param>
            <param name="activate">Whether to activate the Solution Explorer window.</param>
            <returns>Success flag.</returns>
        </member>
        <member name="P:JetBrains.ProjectModel.ISolutionOwner.IsRealSolutionOwner">
            <summary>
            Hack to overcome a problem with toolwindows created for a fake solution in options
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.RecursiveProjectModelChangeDeltaVisitorEx.VisitDeltasRecursively(JetBrains.ProjectModel.ProjectModelChange,System.Action{JetBrains.ProjectModel.ProjectModelChange})">
            <summary>
            Runs the change thru <see cref="T:JetBrains.ProjectModel.RecursiveProjectModelChangeDeltaVisitor"/>, and for each of its <see cref="M:JetBrains.ProjectModel.RecursiveProjectModelChangeDeltaVisitor.VisitDelta(JetBrains.ProjectModel.ProjectModelChange)"/>, calls the given functor.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.RecursiveProjectModelChangeDeltaVisitorEx.VisitItemDeltasRecursively(JetBrains.ProjectModel.ProjectModelChange,System.Action{JetBrains.ProjectModel.ProjectItemChange})">
            <summary>
            Runs the change thru <see cref="T:JetBrains.ProjectModel.RecursiveProjectModelChangeDeltaVisitor"/>, and for each of its <see cref="M:JetBrains.ProjectModel.RecursiveProjectModelChangeDeltaVisitor.VisitItemDelta(JetBrains.ProjectModel.ProjectItemChange)"/>, calls the given functor.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Model2.Assemblies.Interfaces.IAssemblyFileData.LastWriteTimeUtc">
            <summary>
            Time of last modification of the corresponding file on the file system.
            Note that this value is cached and is updated only when the synchronization with the file system is performed.
            That is, the value returned by this method may sometimes differ from the actual modification stamp of the physical file,
            if the file was modified since last synchronization with the file system.
            </summary>    
        </member>
        <member name="T:JetBrains.ProjectModel.ProjectLocationLive">
            <summary>
            Tracks location of the project's project file.
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.ProjectLocationLive.ProjectFileLocation">
            <summary>
            Gets the location of the project file of the owning project (if any).
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.ProjectLocationLive.ProjectLocation">
            <summary>
            Gets the location of the project (This is necessary because there're websites that do not have project files).
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Settings.Schema.BuildSettings">
            <summary>
            <para>Project Model :: Build.</para>
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Settings.Storages.SolutionSettingsStorageBase">
            <summary>
            Base for two per-solution storages.
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Settings.Storages.SettingsStorageProviderBaseInChildContainer">
            <summary>
            If we register a component in a child container, its exposed interfaces won't be available to the shell-level container. This class helps with solving the problem for project model containers by exposing the stuff on behalf of the <see cref="T:JetBrains.Application.Settings.Storage.SettingsStorageProvidersCollection"/> shell-level component.
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Settings.Schema.HierarchySettings">
            <summary>
            <para>Project Model settings root.</para>
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Settings.Storages.ProjectModelSettingsStorageMountPointPriorityClasses">
            <summary>
            Takes the standard <see cref="T:JetBrains.Application.Settings.SettingsStorageMountPointPriorityClasses"/> and details them for project model specific storages.
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Settings.Storages.ProjectSettingsStorageBase">
            <summary>
            Base for two per-project storages.
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Settings.Storages.ProjectSettingsStoragePersonal">
            <summary>
            Per-solution storage excluded from SCC.
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Settings.Storages.ProjectSettingsStorageShared">
            <summary>
            Per-project storage to be checked in to SCC.
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Settings.Storages.SolutionSettingsStoragePersonal">
            <summary>
            Per-solution storage excluded from SCC.
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Settings.Storages.SolutionSettingsStorageShared">
            <summary>
            Per-solution storage to be checked in to SCC.
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Settings.Store.ProjectSettings">
            <summary>
            Helpers for working with project-specific settings layers.
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Settings.Store.ProjectSettings.BindForWritingToProjectShared">
            <summary>
            Binds <see cref="T:JetBrains.Application.Settings.Store.Implementation.SettingsStore"/> to the project context so that writes were SmartSaved to the Project Shared layer (affecting any higher-priority writable layers if they contain conflicting values).
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Settings.Store.ProjectSettings.ProjectSharedLayerId">
            <summary>
            <para>Identifies the Project-Shared <see cref="T:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer">user-friendly settings layer</see>.</para>
            <para>To get the layer, obtain or create a <see cref="T:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayers"/> instance and ask it for the layer by its ID.</para>
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Settings.Store.ProjectSettings.ProjectPersonalLayerId">
            <summary>
            <para>Identifies the Project-Personal <see cref="T:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer">user-friendly settings layer</see>.</para>
            <para>To get the layer, obtain or create a <see cref="T:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayers"/> instance and ask it for the layer by its ID.</para>
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Settings.Store.SolutionSettings">
            <summary>
            Helpers for working with solution-specific settings layers.
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Settings.Store.SolutionSettings.BindForWritingToSolutionShared">
            <summary>
            Binds <see cref="T:JetBrains.Application.Settings.Store.Implementation.SettingsStore"/> to the solution context so that writes were SmartSaved to the Solution Shared layer (affecting any higher-priority writable layers if they contain conflicting values).
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Settings.Store.SolutionSettings.SolutionSharedLayerId">
            <summary>
            <para>Identifies the Solution-Shared <see cref="T:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer">user-friendly settings layer</see>.</para>
            <para>To get the layer, obtain or create a <see cref="T:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayers"/> instance and ask it for the layer by its ID.</para>
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Settings.Store.SolutionSettings.SolutionPersonalLayerId">
            <summary>
            <para>Identifies the Solution-Personal <see cref="T:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer">user-friendly settings layer</see>.</para>
            <para>To get the layer, obtain or create a <see cref="T:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayers"/> instance and ask it for the layer by its ID.</para>
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Sharepoint.SharepointDeploymentType">
            <summary>
            Sharepoint depployment type property value
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.SolutionFileLocationLive">
            <summary>
            Tracks location of the solution's project file.
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.SolutionFileLocationLive.SolutionFileLocation">
            <summary>
            Gets the location of the project file of the owning solution (if any).
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.PlatformManager.GacPath">
            <summary>
            Path to GAC. Test Shell uses GAC from Platform\test\assemblies\GAC*
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.PlatformManager.Gac40Path">
            <summary>
            Path to GAC 4.0. Test Shell uses GAC from Platform\test\assemblies\GAC*
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Impl.ProjectFileModificationCookie">
            <summary>
            A modification cookie for a set of documents that are project-file-based.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Impl.ProjectFileModificationCookie.ProjectFiles">
            <summary>
            Gets the set of project files involved in this modification.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.IProjectModelElementPresenter.GetIcon(JetBrains.ProjectModel.IProjectModelElement)">
            <summary>
            Gets an icon for project model element
            </summary>
            <returns>Icon or null if unhandled by this presenter</returns>
        </member>
        <member name="M:JetBrains.ProjectModel.IProjectModelElementPresenter.GetPresentableLocation(JetBrains.ProjectModel.IProjectModelElement)">
            <summary>
            Gets presentable location for project model element.
            Used in Recent Files, Recent Edits, Go To File etc
            </summary>
            <returns>Presentable location for project model element or null if unhandled by this presenter</returns>
        </member>
        <member name="M:JetBrains.ProjectModel.Model2.References.AssemblyReferenceTarget.#ctor(JetBrains.Metadata.Utils.AssemblyNameInfo,JetBrains.Util.FileSystemPath)">
            <summary>
            Project model reference target
            </summary>
            <param name="assemblyName">Target assembly name</param>
            <param name="hintLocation">Hint location. Should be null for assembly-to-assembly reference</param>
        </member>
        <member name="T:JetBrains.ProjectModel.ProjectModelIcons">
            <summary>
            Collection of standard icons
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.BuildAction">
            <summary>
            Describes what happens with a project file during build
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.FileSetSet.GetBasePaths">
            <summary>
            Returns the root directory of all include patterns
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Model2.Assemblies.Interfaces.IAssembly.IsMissing">
            <summary>
            Indicates that the persistent version of the assembly is not found
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Impl.AssemblyInfoCache.GetAssemblyInfo(JetBrains.Util.FileSystemPath,System.String,System.Func{JetBrains.Util.FileSystemPath,System.String,JetBrains.Util.FileSystemPath},JetBrains.Util.FileSystemPath@)">
            <summary>
            Gets assembly info from cache. Use out parameter and combine func to reduce memory traffic.
            </summary>
            <param name="folderPath"></param>
            <param name="assemblyFileName"></param>
            <param name="combineFunc"> </param>
            <param name="fullAssemblyPath"></param>
            <returns></returns>
        </member>
        <member name="F:JetBrains.ProjectModel.Impl.ExternalChangeProcessor.MyStatusBarIndicator.ShouldBeVisible">
            <summary>
            Gets or sets whether the indicator should be visible. Shows or hides the indicator with a delay, to avoid flickering.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Impl.ProjectReferenceExtension.GetReferencedName(JetBrains.ProjectModel.IProjectToProjectReference)">
            <summary>
            Returns name of the output assembly of a referenced project if is able to fetch. Null otherwise
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Impl.ProjectReferenceExtension.GetReferencedName(JetBrains.ProjectModel.IProject)">
            <summary>
            Returns name of the output assembly of a referenced project if is able to fetch. Null otherwise
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Model2.Assemblies.Impl.Assembly">
            <summary>
            Represents loaded resolved assembly reference.
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.IProjectFile">
            <summary>
            Represents a file in a project
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.IProjectFile.MarkReconciledWithInMemoryVersion">
            <summary>
            Marks the file as reconciled, i.e. its persistent and in-memory version are identical, by assigning its external version timestamp the same value as of the in-memory version
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.IProjectFile.MarkReconciledWithExternalVersion">
            <summary>
            Marks the file as reconciled, i.e. its persistent and in-memory version are identical, by assigning its in-memory version timestamp the same value as of the external version
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.IProjectFile.CreateReadStream">
            <summary>
            Create new read-only stream for this file
            Don't forget to dispose it!
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.IProjectFile.CreateWriteStream">
            <summary>
            Creates new writable stream for this file
            Don't forget to dispose it! 
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.IProjectFile.GetProperties">
            <summary>
            Returns object for manipulating project file properties
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.IProjectFile.LanguageType">
            <summary>
            Language in which the file is written
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.IProjectFile.LastInMemoryModificationStamp">
            <summary>
            Timestamp corresponding to the last in-memory modification
            </summary>
            <remarks>Equals to the LastExternalModificationStamp if the file has not been modified in memory</remarks>
        </member>
        <member name="P:JetBrains.ProjectModel.IProjectFile.LastExternalModificationStamp">
            <summary>
            Timestamp corresponding to the last external modification
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.IProjectFile.LastWriteTimeUtc">
            <summary>
            Time of last modification of the corresponding file on the file system.
            Note that this value is cached and is updated only when the synchronization with the file system is performed.
            That is, the value returned by this method may sometimes differ from the actual modification stamp of the physical file,
            if the file was modified since last synchronization with the file system.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.IProjectFile.IsMissing">
            <summary>
            Checks if the persistent version of the file does not exist
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.IProjectFile.HasChangedExternallySinceLastReconciliation">
            <summary>
            Indicates that the persistent version of the file has changed externally since the last reconciliation
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.IProjectFile.HasChangedInMemorySinceLastReconciliation">
            <summary>
            Indicates that the in-memory version of the file has changed since the last reconciliation
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Impl.ProjectFileSynchronizer">
            <summary>
            Propagates changes made to the project tree into the project file
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.ISolution">
            <summary>
            Root project model element
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.ISolution.IsTemporary">
            <summary>
            Indicates if the solution has not been persisted
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Impl.SolutionElement.SolutionSettingsLegacyPath(JetBrains.ProjectModel.ISolution,JetBrains.Application.Configuration.XmlExternalizationScope,JetBrains.Application.IApplicationDescriptor)">
            <summary>
            Gets the full path for the solution settings file, which includes the product version now.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Impl.SolutionElement.GetSolutionSettingsStoragePath(JetBrains.DataFlow.Lifetime,JetBrains.ProjectModel.SolutionFileLocationLive,JetBrains.Application.Configuration.XmlExternalizationScope)">
            <summary>
            Gets the full path for the solution settings storage file.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Impl.SolutionElement.GetSolutionOrProjectLegacySettingsFileSuffix(JetBrains.Application.Configuration.XmlExternalizationScope,JetBrains.Application.IApplicationDescriptor)">
            <summary>
            Suffix for the solution settings file (the trailing extensions), scope-dependent, leading dot included.
            Usually, <c>".resharper.user"</c> and <c>".resharper"</c>
            </summary>
            <remarks>This is the legacy (pre-settings-storage) file.</remarks>
        </member>
        <member name="M:JetBrains.ProjectModel.Impl.SolutionElement.GetSolutionOrProjectSettingsStorageFileSuffix(JetBrains.Application.Configuration.XmlExternalizationScope)">
            <summary>
            Suffix for the solution/project settings storage file (the trailing extensions), scope-dependent, leading dot included.
            Usually, <c>".DotSettings.user"</c> and <c>".DotSettings"</c>
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Impl.SolutionManagerImpl.CreateSolution(JetBrains.Util.FileSystemPath)">
            <summary>
            Creates new empty instance of solution.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Impl.SolutionManagerImpl.OpenExistingSolution(JetBrains.Util.FileSystemPath)">
            <summary>
            Create instance of solution using specified solution file.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Impl.SolutionManagerImpl.CreateSolutionWithCustomProcess(JetBrains.Util.FileSystemPath,System.Action{JetBrains.ProjectModel.Impl.SolutionElement})">
            <summary>
            Create instance of solution using specified soulution file.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Impl.SolutionManagerImpl.OpenExistingProject(JetBrains.ProjectModel.Impl.SolutionElement,JetBrains.Util.FileSystemPath)">
            <summary>
            Create and new project from project file and add it to a solution.
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Transaction.IProjectModelBatchChange">
            <summary>
            Represents atomic operation on project model
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectModelElementPresenterAttribute.#ctor(System.Double)">
            <summary>
            <paramref name="priority"/> defines the order of presenters. Presenters are checked in descending order.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.ProjectModelElementPresenterAttribute.Priority">
            <summary>
            Priority defines the order of presenters. Presenters are checked in ascending order.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.ProjectModelElementEnvoy.Text">
            <summary>
            Gets presentation text for project item, as was last generated via <see cref="M:JetBrains.ProjectModel.ProjectModelElementEnvoy.Present``1(JetBrains.UI.TreeView.StructuredPresenter{``0,JetBrains.CommonControls.IPresentableItem},``0,JetBrains.CommonControls.IPresentableItem,JetBrains.UI.TreeView.PresentationState)"/>
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.ProjectOutputType">
            <summary>
            Type of the output assembly according to C# compiler options
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectUtil.IsProjectFromUserView(JetBrains.ProjectModel.IProject)">
            <summary>
            Gets whether this <paramref name="project"/> is a project from the user's perspective, eg a project node in the Solution Explorer.
            This excludes the solution folders and fake projects introduced by R# project model to emulate the website queer things.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectUtil.GetProjectByFullPath(JetBrains.ProjectModel.ISolution,JetBrains.Util.FileSystemPath)">
            <summary>
            Looks up the project by its full path, which is either the project folder path or the project file path (not available for some project kinds). Throws if missing or ambiguous.
            </summary>
            <param name="solution">Owning solution.</param>
            <param name="path">Project location or project file location.</param>
            <returns>The project.</returns>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectUtil.TryGetProjectByFullPath(JetBrains.ProjectModel.ISolution,JetBrains.Util.FileSystemPath)">
            <summary>
            Looks up the project by its full path, which is either the project folder path or the project file path (not available for some project kinds). <c>Null</c> if missing or ambiguous.
            </summary>
            <param name="solution">Owning solution.</param>
            <param name="path">Project location or project file location.</param>
            <returns>The project, or <c>Null</c>.</returns>
        </member>
        <member name="T:JetBrains.ProjectModel.impl.SpecialFiles.SpecialFilesManager">
            <summary>
            Provides a reference-counter based mechanism for keeping non-project items
            </summary> 
        </member>
        <member name="P:JetBrains.ProjectModel.Update.IProjectFolderDescriptor.Name">
            <summary>
            For regular folders Name equals to <see cref="P:JetBrains.ProjectModel.Update.IProjectFolderDescriptor.Location"/>.Name
            If the folder is virtual, Name may differ
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Update.IProjectFolderDescriptor.Location">
            <summary>
            Folder path.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Update.IProjectFolderDescriptor.Items">
            <summary>
            Folder content
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Update.IProjectFolderDescriptor.IsHidden">
            <summary>
            There're hidden folders in VS Hierarchy. 
            i.e. C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\kenticocms\cf18e726\9ae5a8e5\Sources_App_Code
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Update.IProjectDescriptor.Guid">
            <summary>
            Guid as specified in project file (or solution file in case of a website)
            Normally, all projects in solution have different guids but if .csproj file is copy-pasted with only name changed,
            VS will create hierarchy items with equal guids and will create different guids only later while saving the solution
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Update.IProjectDescriptor.ProjectFilePath">
            <summary>
            Path to project file. May be empty if there's no project file (Misc files, Solution project, Solution folders, Websites)
            <see cref="P:JetBrains.ProjectModel.IProjectItem.Location"/> property contains project location. Location of a project. 
            If project file exists, <see cref="P:JetBrains.ProjectModel.IProjectItem.Location"/> must be a folder of <see cref="P:JetBrains.ProjectModel.Update.IProjectDescriptor.ProjectFilePath"/>
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Update.IProjectDescriptor.ParentProjectPointer">
            <summary>
            Pointer to a parent project in case of a project nested to a solution folder. Maybe we get rid of the thingy in case we have an assumption, 
            that nested hierarchy element never appers prior to its parent.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Update.IProjectDescriptor.ProjectProperties">
            <summary>
            Project properties that define project's treatment (Solution folder/ C# project/ Website etc)
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Update.IProjectFileDescriptor.Location">
            <summary>
            Path to the project file. File is linked if its directory does not match to the parent folder location.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Update.IProjectFileDescriptor.Properties">
            <summary>
            File properties. Null if no need to specify
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Update.IProjectReferenceProperties.AutoReferenced">
            <summary>
            This property set tot TRUE when the references is added implicitely by Visual Studio
            see http://youtrack.jetbrains.com/issue/RSMSFT-37 for more details
            The only aspect affected by the property is whether the reference can be removed respecting NoStdLib property
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Update.SdkReferences.ProjectToSdkReferenceDescriptor.#ctor(JetBrains.ProjectModel.References.Impl.SdkReferenceFactory,System.String,System.String)">
            <param name="sdkReferenceFactory"></param>
            <param name="sdkName">SDK Name</param>
            <param name="sdkManifestPath">path to a folder with the sdkmanifest.xml file</param>
        </member>
        <member name="F:JetBrains.ProjectModel.Update.UpdateFlags.F_UPDATE_PROJECT_PROPERTIES">
            <summary>
            Update project properties
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Update.UpdateFlags.F_CREATE_MISSING_ITEMS">
            <summary>
            Creates project and missing items, does not remove anything
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Update.UpdateFlags.F_REMOVE_REDUNDAND_FILES_AND_FOLDERS">
            <summary>
            When project is being synchronized files and folders became redundand are removed. Nested projects are skipped.
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Update.UpdateFlags.F_REMOVE_REDUNDAND_NESTED_PROJECTS">
            <summary>
            When project is being synchronized, nested projects that became redundand are removed
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Update.UpdateFlags.F_NOTIFY_CHANGE_MANGER">
            <summary>
            Change mananger event is fired if the flag is on
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Update.UpdateFlags.CREATE_MISSING_ITEMS">
            <summary>
            Creates project and listed items only
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Update.UpdateFlags.ASL_STARTUP_SYNC">
            <summary>
            ASL startup synchronization. important not to turn on <see cref="F:JetBrains.ProjectModel.Update.UpdateFlags.F_REMOVE_REDUNDAND_NESTED_PROJECTS"/> because there're not loaded projects, 
            that wolud be removed otherwise
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Update.UpdateFlags.FULL_SYNC">
            <summary>
            Full project sync. Will remove nested projects, files and folders that became redundand
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Update.UpdateFlags.FULL_SYNC_NOTIFY_CHANGE_MANAGER">
            <summary>
            Full sync with change manager notification
            </summary>
        </member>
    </members>
</doc>
